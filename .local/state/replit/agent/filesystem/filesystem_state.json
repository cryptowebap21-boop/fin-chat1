{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"Inter\", \"system-ui\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Georgia\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"JetBrains Mono\", \"Fira Code\", \"Consolas\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        glow: {\n          '0%': { 'box-shadow': '0 0 20px rgba(0, 245, 255, 0.3)' },\n          '100%': { 'box-shadow': '0 0 40px rgba(0, 245, 255, 0.6)' }\n        },\n        float: {\n          '0%, 100%': { transform: 'translateY(0px)' },\n          '50%': { transform: 'translateY(-10px)' }\n        },\n        shimmer: {\n          '0%': { transform: 'translateX(-100%)' },\n          '100%': { transform: 'translateX(100%)' }\n        },\n        pulse: {\n          '0%, 100%': { opacity: '1' },\n          '50%': { opacity: '0.5' }\n        }\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"glow\": \"glow 2s ease-in-out infinite alternate\",\n        \"pulse-slow\": \"pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n        \"float\": \"float 6s ease-in-out infinite\",\n        \"shimmer\": \"shimmer 2s infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3788},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage.js\";\nimport { MarketService } from \"./services/marketService.js\";\nimport { NewsService } from \"./services/newsService.js\";\nimport { ChatService } from \"./services/chatService.js\";\nimport { CalculatorService } from \"./services/calculatorService.js\";\nimport { chatMessageSchema, calculatorInputSchema, taxCalculationSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  \n  // Initialize services\n  const marketService = new MarketService();\n  const newsService = new NewsService();\n  const chatService = new ChatService();\n  const calculatorService = new CalculatorService();\n  \n  // Initialize live market streams\n  await marketService.initializeLiveStreams();\n  \n  // WebSocket server for real-time data\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  // Store active SSE connections\n  const sseConnections = new Set<any>();\n  \n  // WebSocket connection handling\n  wss.on('connection', (ws: WebSocket) => {\n    console.log('WebSocket client connected');\n    \n    ws.on('message', (message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        \n        if (data.type === 'subscribe') {\n          // Handle subscription to market data streams\n          console.log('Client subscribed to:', data.symbols, data.kind);\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n    \n    ws.on('close', () => {\n      console.log('WebSocket client disconnected');\n    });\n  });\n  \n  // Broadcast market updates to WebSocket clients\n  function broadcastMarketUpdate(data: any) {\n    wss.clients.forEach((client) => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(JSON.stringify({\n          type: 'market_update',\n          data\n        }));\n      }\n    });\n  }\n  \n  // Chat Assistant API\n  app.post('/api/chat', async (req, res) => {\n    try {\n      const { message, conversationId } = req.body;\n      \n      if (!message || typeof message !== 'string') {\n        return res.status(400).json({ error: 'Message is required' });\n      }\n      \n      if (!chatService.isConfigured()) {\n        return res.status(503).json({ \n          error: 'AI chat service is not configured. Please add OPENROUTER_API_KEY to environment variables.' \n        });\n      }\n      \n      const result = await chatService.sendMessage(message, conversationId);\n      res.json(result);\n      \n    } catch (error) {\n      console.error('Chat API error:', error);\n      res.status(500).json({ \n        error: 'Failed to process chat message',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n  \n  // Chat streaming endpoint\n  app.post('/api/chat/stream', async (req, res) => {\n    try {\n      const { message, conversationId } = req.body;\n      \n      if (!message || typeof message !== 'string') {\n        return res.status(400).json({ error: 'Message is required' });\n      }\n      \n      if (!chatService.isConfigured()) {\n        return res.status(503).json({ \n          error: 'AI chat service is not configured' \n        });\n      }\n      \n      res.writeHead(200, {\n        'Content-Type': 'text/plain',\n        'Transfer-Encoding': 'chunked',\n        'Cache-Control': 'no-cache',\n        'Connection': 'keep-alive'\n      });\n      \n      const stream = await chatService.streamMessage(message, conversationId);\n      \n      for await (const chunk of stream) {\n        res.write(chunk);\n      }\n      \n      res.end();\n      \n    } catch (error) {\n      console.error('Chat stream error:', error);\n      res.status(500).json({ error: 'Failed to stream chat response' });\n    }\n  });\n  \n  // Markets API\n  app.get('/api/markets/snapshot', async (req, res) => {\n    try {\n      const { kind = 'crypto', symbols } = req.query;\n      \n      if (!['crypto', 'stock'].includes(kind as string)) {\n        return res.status(400).json({ error: 'Kind must be \"crypto\" or \"stock\"' });\n      }\n      \n      let symbolList: string[];\n      if (symbols && typeof symbols === 'string') {\n        symbolList = symbols.split(',').map(s => s.trim().toUpperCase());\n      } else {\n        symbolList = marketService.getDefaultSymbols(kind as 'crypto' | 'stock');\n      }\n      \n      const data = await marketService.getMarketSnapshot(kind as 'crypto' | 'stock', symbolList);\n      res.json(data);\n      \n    } catch (error) {\n      console.error('Market snapshot error:', error);\n      res.status(500).json({ error: 'Failed to fetch market data' });\n    }\n  });\n  \n  // Server-Sent Events for real-time market data\n  app.get('/api/markets/stream', (req, res) => {\n    const { kind = 'crypto', symbols } = req.query;\n    \n    res.writeHead(200, {\n      'Content-Type': 'text/event-stream',\n      'Cache-Control': 'no-cache',\n      'Connection': 'keep-alive',\n      'Access-Control-Allow-Origin': '*'\n    });\n    \n    const connection = { res, kind, symbols };\n    sseConnections.add(connection);\n    \n    // Send initial data\n    res.write('event: connected\\n');\n    res.write('data: {\"status\":\"connected\"}\\n\\n');\n    \n    req.on('close', () => {\n      sseConnections.delete(connection);\n    });\n  });\n  \n  // Periodic market data updates via SSE\n  setInterval(async () => {\n    for (const connection of Array.from(sseConnections)) {\n      try {\n        const { res, kind, symbols } = connection;\n        \n        let symbolList: string[];\n        if (symbols && typeof symbols === 'string') {\n          symbolList = symbols.split(',').map((s: string) => s.trim().toUpperCase());\n        } else {\n          symbolList = marketService.getDefaultSymbols(kind as 'crypto' | 'stock');\n        }\n        \n        const data = await marketService.getMarketSnapshot(kind as 'crypto' | 'stock', symbolList);\n        \n        res.write('event: market_update\\n');\n        res.write(`data: ${JSON.stringify(data)}\\n\\n`);\n        \n      } catch (error) {\n        console.error('SSE update error:', error);\n        sseConnections.delete(connection);\n      }\n    }\n  }, 5000); // Update every 5 seconds for crypto, 15 seconds for stocks\n  \n  // Market history API\n  app.get('/api/markets/history', async (req, res) => {\n    try {\n      const { kind = 'crypto', symbol, range = '1d' } = req.query;\n      \n      if (!symbol || typeof symbol !== 'string') {\n        return res.status(400).json({ error: 'Symbol is required' });\n      }\n      \n      const data = await marketService.getMarketHistory(\n        kind as 'crypto' | 'stock', \n        symbol.toUpperCase(), \n        range as string\n      );\n      \n      res.json(data);\n      \n    } catch (error) {\n      console.error('Market history error:', error);\n      res.status(500).json({ error: 'Failed to fetch market history' });\n    }\n  });\n  \n  // News API\n  app.get('/api/news', async (req, res) => {\n    try {\n      const { category, limit } = req.query;\n      \n      const limitNum = limit ? parseInt(limit as string) : 50;\n      const categoryStr = category && category !== 'all' ? category as string : undefined;\n      \n      const news = await newsService.getNews(categoryStr, limitNum);\n      res.json(news);\n      \n    } catch (error) {\n      console.error('News API error:', error);\n      res.status(500).json({ error: 'Failed to fetch news' });\n    }\n  });\n  \n  // Featured news API\n  app.get('/api/news/featured', async (req, res) => {\n    try {\n      const { category } = req.query;\n      const categoryStr = category && category !== 'all' ? category as string : undefined;\n      \n      const featured = await newsService.getFeaturedNews(categoryStr);\n      res.json(featured || null);\n      \n    } catch (error) {\n      console.error('Featured news error:', error);\n      res.status(500).json({ error: 'Failed to fetch featured news' });\n    }\n  });\n  \n  // Calculator APIs\n  app.post('/api/calculators/roi', async (req, res) => {\n    try {\n      const inputs = req.body;\n      const result = calculatorService.calculateROI(inputs);\n      res.json(result);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Calculation error' });\n    }\n  });\n  \n  app.post('/api/calculators/pl', async (req, res) => {\n    try {\n      const inputs = req.body;\n      const result = calculatorService.calculateProfitLoss(inputs);\n      res.json(result);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Calculation error' });\n    }\n  });\n  \n  app.post('/api/calculators/compound', async (req, res) => {\n    try {\n      const inputs = req.body;\n      const result = calculatorService.calculateCompoundInterest(inputs);\n      res.json(result);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Calculation error' });\n    }\n  });\n  \n  app.post('/api/calculators/convert', async (req, res) => {\n    try {\n      const inputs = req.body;\n      \n      // Get current market prices for conversion\n      const cryptoSymbols = ['BTC', 'ETH', 'SOL', 'ADA'];\n      const marketData = await marketService.getMarketSnapshot('crypto', cryptoSymbols);\n      \n      const prices: Record<string, number> = { USD: 1 };\n      marketData.forEach(item => {\n        prices[item.symbol] = item.price;\n      });\n      \n      const result = calculatorService.convertCurrency(inputs, prices);\n      res.json(result);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Conversion error' });\n    }\n  });\n  \n  app.post('/api/calculators/tax', async (req, res) => {\n    try {\n      const validatedData = taxCalculationSchema.parse(req.body);\n      const result = calculatorService.calculateTax(validatedData);\n      res.json(result);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Tax calculation error' });\n    }\n  });\n  \n  // Watchlist API\n  app.get('/api/watchlist', async (req, res) => {\n    try {\n      const watchlist = await storage.getWatchlist();\n      res.json(watchlist || { symbols: [] });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch watchlist' });\n    }\n  });\n  \n  app.post('/api/watchlist', async (req, res) => {\n    try {\n      const { symbols } = req.body;\n      \n      if (!Array.isArray(symbols)) {\n        return res.status(400).json({ error: 'Symbols must be an array' });\n      }\n      \n      const existing = await storage.getWatchlist();\n      \n      if (existing) {\n        const updated = await storage.updateWatchlist(existing.id, symbols);\n        res.json(updated);\n      } else {\n        const created = await storage.saveWatchlist({ symbols });\n        res.json(created);\n      }\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to update watchlist' });\n    }\n  });\n  \n  // Health check endpoint\n  app.get('/api/health', async (req, res) => {\n    try {\n      const health = {\n        status: 'healthy',\n        timestamp: new Date().toISOString(),\n        services: {\n          market: marketService.getServiceHealth(),\n          news: newsService.getServiceHealth(),\n          chat: chatService.getServiceHealth(),\n          calculator: calculatorService.getServiceHealth()\n        },\n        connections: {\n          websocket: wss.clients.size,\n          sse: sseConnections.size\n        }\n      };\n      \n      res.json(health);\n    } catch (error) {\n      res.status(500).json({ \n        status: 'unhealthy', \n        error: error instanceof Error ? error.message : 'Unknown error' \n      });\n    }\n  });\n\n  // Provider stats endpoint for debugging and monitoring\n  app.get('/api/providers/stats', async (req, res) => {\n    try {\n      // Access registries through market service\n      const cryptoStats = marketService['cryptoRegistry']?.getProviderStats() || [];\n      const stockStats = marketService['stockRegistry']?.getProviderStats() || [];\n      \n      const providerStats = {\n        timestamp: new Date().toISOString(),\n        crypto: {\n          providers: cryptoStats,\n          totalProviders: cryptoStats.length,\n          activeProviders: cryptoStats.filter((p: any) => p.circuitBreakerState === 'closed').length\n        },\n        stock: {\n          providers: stockStats,\n          totalProviders: stockStats.length,\n          activeProviders: stockStats.filter((p: any) => p.circuitBreakerState === 'closed').length\n        }\n      };\n      \n      res.json(providerStats);\n    } catch (error) {\n      console.error('Provider stats error:', error);\n      res.status(500).json({ \n        error: 'Failed to get provider stats',\n        message: error instanceof Error ? error.message : 'Unknown error' \n      });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":12895},"server/storage.ts":{"content":"import { type User, type InsertUser, type MarketData, type InsertMarketData, type NewsArticle, type InsertNewsArticle, type ChatConversation, type InsertChatConversation, type Watchlist, type InsertWatchlist } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Market data methods\n  getMarketData(symbol: string, kind: \"crypto\" | \"stock\"): Promise<MarketData | undefined>;\n  getLatestMarketData(kind?: \"crypto\" | \"stock\"): Promise<MarketData[]>;\n  saveMarketData(data: InsertMarketData): Promise<MarketData>;\n  getMarketDataBatch(symbols: string[], kind: \"crypto\" | \"stock\"): Promise<MarketData[]>;\n\n  // News methods\n  getLatestNews(category?: string, limit?: number): Promise<NewsArticle[]>;\n  saveNewsArticle(article: InsertNewsArticle): Promise<NewsArticle>;\n  getNewsByUrl(url: string): Promise<NewsArticle | undefined>;\n\n  // Chat methods\n  getChatConversation(id: string): Promise<ChatConversation | undefined>;\n  saveChatConversation(conversation: InsertChatConversation): Promise<ChatConversation>;\n  updateChatConversation(id: string, messages: any[]): Promise<ChatConversation>;\n\n  // Watchlist methods\n  getWatchlist(userId?: string): Promise<Watchlist | undefined>;\n  saveWatchlist(watchlist: InsertWatchlist): Promise<Watchlist>;\n  updateWatchlist(id: string, symbols: string[]): Promise<Watchlist>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private marketData: Map<string, MarketData>;\n  private newsArticles: Map<string, NewsArticle>;\n  private chatConversations: Map<string, ChatConversation>;\n  private watchlists: Map<string, Watchlist>;\n\n  constructor() {\n    this.users = new Map();\n    this.marketData = new Map();\n    this.newsArticles = new Map();\n    this.chatConversations = new Map();\n    this.watchlists = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getMarketData(symbol: string, kind: \"crypto\" | \"stock\"): Promise<MarketData | undefined> {\n    const key = `${kind}-${symbol}`;\n    return this.marketData.get(key);\n  }\n\n  async getLatestMarketData(kind?: \"crypto\" | \"stock\"): Promise<MarketData[]> {\n    const allData = Array.from(this.marketData.values());\n    if (kind) {\n      return allData.filter(data => data.kind === kind);\n    }\n    return allData;\n  }\n\n  async saveMarketData(insertData: InsertMarketData): Promise<MarketData> {\n    const id = randomUUID();\n    const data: MarketData = { \n      ...insertData, \n      id, \n      timestamp: new Date(),\n      change24h: insertData.change24h ?? null,\n      volume: insertData.volume ?? null,\n      marketCap: insertData.marketCap ?? null\n    };\n    const key = `${data.kind}-${data.symbol}`;\n    this.marketData.set(key, data);\n    return data;\n  }\n\n  async getMarketDataBatch(symbols: string[], kind: \"crypto\" | \"stock\"): Promise<MarketData[]> {\n    const results: MarketData[] = [];\n    for (const symbol of symbols) {\n      const data = await this.getMarketData(symbol, kind);\n      if (data) results.push(data);\n    }\n    return results;\n  }\n\n  async getLatestNews(category?: string, limit: number = 50): Promise<NewsArticle[]> {\n    let articles = Array.from(this.newsArticles.values());\n    \n    if (category && category !== \"all\") {\n      articles = articles.filter(article => article.category === category);\n    }\n    \n    return articles\n      .sort((a, b) => new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime())\n      .slice(0, limit);\n  }\n\n  async saveNewsArticle(insertArticle: InsertNewsArticle): Promise<NewsArticle> {\n    const id = randomUUID();\n    const article: NewsArticle = { \n      ...insertArticle, \n      id, \n      createdAt: new Date(),\n      content: insertArticle.content ?? null,\n      description: insertArticle.description ?? null,\n      imageUrl: insertArticle.imageUrl ?? null\n    };\n    this.newsArticles.set(article.url, article);\n    return article;\n  }\n\n  async getNewsByUrl(url: string): Promise<NewsArticle | undefined> {\n    return this.newsArticles.get(url);\n  }\n\n  async getChatConversation(id: string): Promise<ChatConversation | undefined> {\n    return this.chatConversations.get(id);\n  }\n\n  async saveChatConversation(insertConversation: InsertChatConversation): Promise<ChatConversation> {\n    const id = randomUUID();\n    const now = new Date();\n    const conversation: ChatConversation = { \n      ...insertConversation, \n      id, \n      createdAt: now,\n      updatedAt: now,\n      messages: insertConversation.messages ?? []\n    };\n    this.chatConversations.set(id, conversation);\n    return conversation;\n  }\n\n  async updateChatConversation(id: string, messages: any[]): Promise<ChatConversation> {\n    const existing = this.chatConversations.get(id);\n    if (!existing) {\n      throw new Error(\"Conversation not found\");\n    }\n    \n    const updated: ChatConversation = {\n      ...existing,\n      messages,\n      updatedAt: new Date()\n    };\n    \n    this.chatConversations.set(id, updated);\n    return updated;\n  }\n\n  async getWatchlist(userId?: string): Promise<Watchlist | undefined> {\n    if (!userId) {\n      // Return default watchlist\n      return Array.from(this.watchlists.values())[0];\n    }\n    return Array.from(this.watchlists.values()).find(w => w.userId === userId);\n  }\n\n  async saveWatchlist(insertWatchlist: InsertWatchlist): Promise<Watchlist> {\n    const id = randomUUID();\n    const watchlist: Watchlist = { \n      ...insertWatchlist, \n      id, \n      createdAt: new Date(),\n      name: insertWatchlist.name ?? \"My Watchlist\",\n      userId: insertWatchlist.userId ?? null,\n      symbols: insertWatchlist.symbols ?? []\n    };\n    this.watchlists.set(id, watchlist);\n    return watchlist;\n  }\n\n  async updateWatchlist(id: string, symbols: string[]): Promise<Watchlist> {\n    const existing = this.watchlists.get(id);\n    if (!existing) {\n      throw new Error(\"Watchlist not found\");\n    }\n    \n    const updated: Watchlist = {\n      ...existing,\n      symbols\n    };\n    \n    this.watchlists.set(id, updated);\n    return updated;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":6662},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, timestamp, jsonb, boolean, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// User schema for basic auth if needed\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\n// Market data schema for caching\nexport const marketData = pgTable(\"market_data\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  symbol: text(\"symbol\").notNull(),\n  name: text(\"name\").notNull(),\n  price: decimal(\"price\", { precision: 20, scale: 8 }).notNull(),\n  change24h: decimal(\"change24h\", { precision: 10, scale: 4 }),\n  volume: decimal(\"volume\", { precision: 20, scale: 2 }),\n  marketCap: decimal(\"market_cap\", { precision: 20, scale: 2 }),\n  timestamp: timestamp(\"timestamp\").notNull().defaultNow(),\n  source: text(\"source\").notNull(),\n  kind: text(\"kind\").notNull(), // \"crypto\" | \"stock\"\n});\n\n// News articles schema\nexport const newsArticles = pgTable(\"news_articles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  content: text(\"content\"),\n  url: text(\"url\").notNull(),\n  imageUrl: text(\"image_url\"),\n  source: text(\"source\").notNull(),\n  category: text(\"category\").notNull(), // \"crypto\" | \"stocks\" | \"general\"\n  publishedAt: timestamp(\"published_at\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Chat conversations schema\nexport const chatConversations = pgTable(\"chat_conversations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  messages: jsonb(\"messages\").notNull().default([]),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// User watchlists\nexport const watchlists = pgTable(\"watchlists\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\"),\n  symbols: jsonb(\"symbols\").notNull().default([]),\n  name: text(\"name\").notNull().default(\"My Watchlist\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Schemas for API data structures\nexport const unifiedMarketDataSchema = z.object({\n  symbol: z.string(),\n  name: z.string(),\n  price: z.number(),\n  change24h: z.number().optional(),\n  volume: z.number().optional(),\n  marketCap: z.number().optional(),\n  timestamp: z.string(),\n  source: z.string(),\n  kind: z.enum([\"crypto\", \"stock\"]),\n});\n\nexport const newsArticleSchema = z.object({\n  title: z.string(),\n  description: z.string().optional(),\n  content: z.string().optional(),\n  url: z.string(),\n  imageUrl: z.string().optional(),\n  source: z.string(),\n  category: z.enum([\"crypto\", \"stocks\", \"general\"]),\n  publishedAt: z.string(),\n});\n\nexport const chatMessageSchema = z.object({\n  role: z.enum([\"user\", \"assistant\"]),\n  content: z.string(),\n  timestamp: z.string(),\n});\n\nexport const calculatorInputSchema = z.object({\n  type: z.enum([\"roi\", \"pl\", \"compound\", \"conversion\"]),\n  inputs: z.record(z.union([z.string(), z.number()])),\n});\n\nexport const taxCalculationSchema = z.object({\n  assetType: z.string(),\n  symbol: z.string(),\n  quantity: z.number(),\n  purchasePrice: z.number(),\n  salePrice: z.number(),\n  purchaseDate: z.string(),\n  saleDate: z.string().optional(),\n  fees: z.number().optional(),\n  region: z.string().default(\"US\"),\n  taxBracket: z.number(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertMarketDataSchema = createInsertSchema(marketData).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertNewsArticleSchema = createInsertSchema(newsArticles).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertChatConversationSchema = createInsertSchema(chatConversations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertWatchlistSchema = createInsertSchema(watchlists).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type MarketData = typeof marketData.$inferSelect;\nexport type InsertMarketData = z.infer<typeof insertMarketDataSchema>;\nexport type NewsArticle = typeof newsArticles.$inferSelect;\nexport type InsertNewsArticle = z.infer<typeof insertNewsArticleSchema>;\nexport type ChatConversation = typeof chatConversations.$inferSelect;\nexport type InsertChatConversation = z.infer<typeof insertChatConversationSchema>;\nexport type Watchlist = typeof watchlists.$inferSelect;\nexport type InsertWatchlist = z.infer<typeof insertWatchlistSchema>;\n\nexport type UnifiedMarketData = z.infer<typeof unifiedMarketDataSchema>;\nexport type NewsArticleData = z.infer<typeof newsArticleSchema>;\nexport type ChatMessage = z.infer<typeof chatMessageSchema>;\nexport type CalculatorInput = z.infer<typeof calculatorInputSchema>;\nexport type TaxCalculation = z.infer<typeof taxCalculationSchema>;\n","size_bytes":5165},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/hooks/use-theme\";\nimport Home from \"@/pages/home\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":803},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --radius: 12px;\n  --font-sans: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  --font-mono: 'JetBrains Mono', 'Fira Code', Consolas, monospace;\n  \n  /* Light theme */\n  --background: hsl(210 40% 98%);\n  --foreground: hsl(222.2 84% 4.9%);\n  --card: hsla(0 0% 100% / 0.7);\n  --card-foreground: hsl(222.2 84% 4.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222.2 84% 4.9%);\n  --primary: hsl(188 100% 50%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222.2 47.4% 11.2%);\n  --muted: hsla(210 40% 96% / 0.8);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(262 83% 58%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsla(214.3 31.8% 91.4% / 0.5);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(188 100% 50%);\n  --chart-1: hsl(188 100% 50%);\n  --chart-2: hsl(262 83% 58%);\n  --chart-3: hsl(149 80% 90%);\n  --chart-4: hsl(43 74% 66%);\n  --chart-5: hsl(27 87% 67%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n}\n\n.dark {\n  --background: hsl(226 65% 7%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsla(226 65% 10% / 0.8);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(226 65% 10%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(188 100% 50%);\n  --primary-foreground: hsl(226 65% 7%);\n  --secondary: hsl(226 65% 15%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsla(226 65% 15% / 0.6);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(262 83% 58%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsla(226 65% 20% / 0.4);\n  --input: hsl(226 65% 15%);\n  --ring: hsl(188 100% 50%);\n  --chart-1: hsl(188 100% 50%);\n  --chart-2: hsl(262 83% 58%);\n  --chart-3: hsl(149 80% 90%);\n  --chart-4: hsl(43 74% 66%);\n  --chart-5: hsl(27 87% 67%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    background: linear-gradient(135deg, var(--background) 0%, var(--muted) 100%);\n    background-attachment: fixed;\n    min-height: 100vh;\n    overflow-x: hidden;\n  }\n\n  * {\n    scrollbar-width: thin;\n    scrollbar-color: var(--primary) var(--muted);\n  }\n\n  *::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  *::-webkit-scrollbar-track {\n    background: var(--muted);\n    border-radius: 3px;\n  }\n\n  *::-webkit-scrollbar-thumb {\n    background: var(--primary);\n    border-radius: 3px;\n  }\n\n  *::-webkit-scrollbar-thumb:hover {\n    background: var(--accent);\n  }\n}\n\n@layer components {\n  .glass-panel {\n    background: var(--card);\n    backdrop-filter: blur(25px);\n    border: 1px solid var(--border);\n    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.1), \n                0 0 0 1px rgba(255, 255, 255, 0.05) inset;\n    transition: all 0.3s ease;\n  }\n\n  .glass-panel:hover {\n    box-shadow: 0 16px 50px rgba(0, 0, 0, 0.15), \n                0 0 0 1px rgba(255, 255, 255, 0.1) inset,\n                0 0 30px rgba(0, 245, 255, 0.1);\n    transform: translateY(-1px);\n  }\n\n  @media (max-width: 768px) {\n    .glass-panel:hover {\n      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1), \n                  0 0 0 1px rgba(255, 255, 255, 0.05) inset;\n      transform: none;\n    }\n  }\n\n  .neon-glow {\n    box-shadow: 0 0 25px rgba(0, 245, 255, 0.4), \n                0 0 50px rgba(0, 245, 255, 0.2);\n    transition: all 0.3s ease;\n  }\n\n  .neon-glow:hover {\n    box-shadow: 0 0 35px rgba(0, 245, 255, 0.6),\n                0 0 70px rgba(0, 245, 255, 0.3);\n    transform: scale(1.02);\n  }\n\n  /* Mobile optimizations - reduce heavy effects */\n  @media (max-width: 768px) {\n    .neon-glow {\n      box-shadow: 0 2px 8px rgba(0, 245, 255, 0.2);\n    }\n    \n    .neon-glow:hover {\n      box-shadow: 0 4px 12px rgba(0, 245, 255, 0.3);\n      transform: none;\n    }\n  }\n\n  .gradient-text {\n    background: linear-gradient(45deg, hsl(188 100% 50%), hsl(262 83% 58%));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .chart-container {\n    height: 400px;\n    background: var(--card);\n    border: 1px solid var(--border);\n    border-radius: var(--radius);\n    position: relative;\n    overflow: hidden;\n  }\n\n  .sparkline {\n    stroke: var(--primary);\n    stroke-width: 2;\n    fill: none;\n  }\n\n  .market-card {\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .market-card:hover {\n    transform: translateY(-4px) scale(1.02);\n    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15),\n                0 0 30px rgba(0, 245, 255, 0.2);\n  }\n\n  @media (max-width: 768px) {\n    .market-card:hover {\n      transform: translateY(-2px);\n      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n    }\n  }\n\n  .pulse-dot {\n    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n\n  .streaming-indicator {\n    background: linear-gradient(90deg, transparent, rgba(0, 245, 255, 0.3), transparent);\n    animation: shimmer 2s infinite;\n  }\n\n  .news-card {\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .news-card:hover {\n    transform: translateY(-3px) scale(1.01);\n    box-shadow: 0 15px 50px rgba(0, 0, 0, 0.2),\n                0 0 25px rgba(0, 245, 255, 0.15);\n  }\n\n  @media (max-width: 768px) {\n    .news-card:hover {\n      transform: translateY(-1px);\n      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);\n    }\n  }\n\n  .calculator-input {\n    background: var(--input);\n    border: 1px solid var(--border);\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    position: relative;\n  }\n\n  .calculator-input:focus {\n    outline: none;\n    border-color: var(--primary);\n    box-shadow: 0 0 0 3px rgba(0, 245, 255, 0.2),\n                0 0 20px rgba(0, 245, 255, 0.1);\n    transform: translateY(-1px);\n  }\n\n  .chat-message {\n    animation: slideIn 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .loading-dots {\n    animation: loadingPulse 1.5s infinite;\n  }\n\n  .nav-tab {\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    position: relative;\n    overflow: hidden;\n  }\n\n  .nav-tab::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(0, 245, 255, 0.1), transparent);\n    transition: left 0.5s ease;\n  }\n\n  .nav-tab:hover::before {\n    left: 100%;\n  }\n}\n\n@layer utilities {\n  .animate-glow {\n    animation: glow 2s ease-in-out infinite alternate;\n  }\n\n  .animate-pulse-slow {\n    animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n\n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n\n  .animate-in {\n    animation: fadeIn 0.5s ease-in-out;\n  }\n\n  .fade-in {\n    opacity: 0;\n    animation: fadeIn 0.5s ease-in-out forwards;\n  }\n\n  /* Premium Input Field Styles */\n  input:focus {\n    outline: none;\n    transform: translateY(-1px);\n  }\n\n  @media (max-width: 768px) {\n    input:focus {\n      transform: none;\n    }\n    \n    .calculator-input:focus {\n      transform: none;\n    }\n  }\n\n  input::placeholder {\n    transition: all 0.3s ease-in-out;\n  }\n\n  input:focus::placeholder {\n    opacity: 0.7;\n    transform: translateY(-2px);\n  }\n\n  @keyframes fadeIn {\n    0% {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n    100% {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  @keyframes glow {\n    0% {\n      box-shadow: 0 0 25px rgba(0, 245, 255, 0.4);\n    }\n    100% {\n      box-shadow: 0 0 50px rgba(0, 245, 255, 0.8),\n                  0 0 80px rgba(0, 245, 255, 0.4);\n    }\n  }\n\n  /* Reduce motion for mobile users and accessibility */\n  @media (max-width: 768px), (prefers-reduced-motion: reduce) {\n    .animate-glow,\n    .animate-float,\n    .pulse-dot {\n      animation: none;\n    }\n    \n    .nav-tab::before {\n      display: none;\n    }\n    \n    * {\n      transition-duration: 0.1s !important;\n    }\n  }\n\n  @keyframes slideIn {\n    0% {\n      opacity: 0;\n      transform: translateY(20px) scale(0.95);\n    }\n    100% {\n      opacity: 1;\n      transform: translateY(0) scale(1);\n    }\n  }\n\n  @keyframes loadingPulse {\n    0%, 20% {\n      opacity: 0.3;\n      transform: scale(0.8);\n    }\n    50% {\n      opacity: 1;\n      transform: scale(1.1);\n    }\n    80%, 100% {\n      opacity: 0.3;\n      transform: scale(0.8);\n    }\n  }\n\n  @keyframes float {\n    0%, 100% {\n      transform: translateY(0px);\n    }\n    50% {\n      transform: translateY(-10px);\n    }\n  }\n\n  @keyframes shimmer {\n    0% {\n      transform: translateX(-100%);\n    }\n    100% {\n      transform: translateX(100%);\n    }\n  }\n}\n","size_bytes":9629},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/providers/cryptoProviders.ts":{"content":"import WebSocket from 'ws';\nimport { normalizeMarketData } from '../utils/formatters.js';\nimport { getCircuitBreaker } from '../utils/circuitBreaker.js';\nimport { cryptoProviderOptimizer } from '../utils/providerOptimizer.js';\nimport { type UnifiedMarketData } from '@shared/schema';\n\nexport interface CryptoProvider {\n  id: string;\n  priority: number;\n  capabilities: ('live' | 'snapshot' | 'history')[];\n  rateLimit: number; // requests per minute\n  \n  fetchSnapshot(symbols: string[]): Promise<UnifiedMarketData[]>;\n  connect?(): Promise<WebSocket | undefined>;\n  fetchHistory?(symbol: string, range: string): Promise<any[]>;\n}\n\nexport class BinanceProvider implements CryptoProvider {\n  id = 'binance';\n  priority = 1;\n  capabilities: ('live' | 'snapshot' | 'history')[] = ['live', 'snapshot'];\n  rateLimit = 1200; // 1200 requests per minute\n  \n  private ws?: WebSocket;\n  \n  async fetchSnapshot(symbols: string[]): Promise<UnifiedMarketData[]> {\n    const circuitBreaker = getCircuitBreaker('crypto', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      const symbolsQuery = symbols.map(s => `\"${s.toUpperCase()}USDT\"`).join(',');\n      const url = `https://api.binance.com/api/v3/ticker/24hr?symbols=[${symbolsQuery}]`;\n      \n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Binance API error: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      return Array.isArray(data) \n        ? data.map(item => normalizeMarketData(item, this.id, 'crypto'))\n        : [normalizeMarketData(data, this.id, 'crypto')];\n    });\n  }\n  \n  async connect(): Promise<WebSocket | undefined> {\n    const circuitBreaker = getCircuitBreaker('crypto', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      return new Promise<WebSocket | undefined>((resolve, reject) => {\n        const ws = new WebSocket('wss://stream.binance.com:9443/ws/!ticker@arr');\n        \n        ws.on('open', () => {\n          console.log('Binance WebSocket connected');\n          this.ws = ws;\n          resolve(ws);\n        });\n        \n        ws.on('error', (error) => {\n          console.error('Binance WebSocket error:', error);\n          // Don't throw synchronously, reject the promise instead\n          reject(error);\n        });\n        \n        // Add a timeout to avoid hanging\n        setTimeout(() => {\n          if (ws.readyState === WebSocket.CONNECTING) {\n            ws.terminate();\n            reject(new Error('WebSocket connection timeout'));\n          }\n        }, 10000);\n      });\n    });\n  }\n}\n\nexport class CoinGeckoProvider implements CryptoProvider {\n  id = 'coingecko';\n  priority = 2;\n  capabilities: ('live' | 'snapshot' | 'history')[] = ['snapshot', 'history'];\n  rateLimit = 30; // 30 requests per minute for free tier\n  \n  private symbolToId: Map<string, string> = new Map([\n    ['BTC', 'bitcoin'],\n    ['ETH', 'ethereum'],\n    ['SOL', 'solana'],\n    ['ADA', 'cardano'],\n    ['DOT', 'polkadot'],\n    ['MATIC', 'polygon'],\n    ['AVAX', 'avalanche-2'],\n    ['LINK', 'chainlink'],\n    ['UNI', 'uniswap'],\n    ['LTC', 'litecoin']\n  ]);\n  \n  async fetchSnapshot(symbols: string[]): Promise<UnifiedMarketData[]> {\n    const circuitBreaker = getCircuitBreaker('crypto', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      const ids = symbols.map(s => this.symbolToId.get(s) || s.toLowerCase()).join(',');\n      const url = `https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=${ids}&order=market_cap_desc&per_page=100&page=1&sparkline=false&price_change_percentage=24h`;\n      \n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`CoinGecko API error: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      return data.map((item: any) => normalizeMarketData(item, this.id, 'crypto'));\n    });\n  }\n  \n  async fetchHistory(symbol: string, range: string): Promise<any[]> {\n    const circuitBreaker = getCircuitBreaker('crypto', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      const id = this.symbolToId.get(symbol) || symbol.toLowerCase();\n      const days = this.getRangeDays(range);\n      const url = `https://api.coingecko.com/api/v3/coins/${id}/market_chart?vs_currency=usd&days=${days}&interval=${this.getInterval(range)}`;\n      \n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`CoinGecko history API error: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      return data.prices?.map((price: [number, number]) => ({\n        timestamp: price[0],\n        close: price[1]\n      })) || [];\n    });\n  }\n  \n  private getRangeDays(range: string): number {\n    switch (range) {\n      case '1m': case '5m': case '15m': case '30m': case '1h': return 1;\n      case '4h': case '1d': return 7;\n      case '1w': return 30;\n      case '1M': return 365;\n      default: return 7;\n    }\n  }\n  \n  private getInterval(range: string): string {\n    if (['1m', '5m', '15m', '30m'].includes(range)) return 'minutely';\n    if (['1h', '4h'].includes(range)) return 'hourly';\n    return 'daily';\n  }\n}\n\nexport class CoinPaprikaProvider implements CryptoProvider {\n  id = 'coinpaprika';\n  priority = 3;\n  capabilities: ('live' | 'snapshot' | 'history')[] = ['snapshot'];\n  rateLimit = 20000; // 20k requests per month\n  \n  async fetchSnapshot(symbols: string[]): Promise<UnifiedMarketData[]> {\n    const circuitBreaker = getCircuitBreaker('crypto', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      // First get coin IDs for symbols\n      const coinsResponse = await fetch('https://api.coinpaprika.com/v1/coins');\n      if (!coinsResponse.ok) {\n        throw new Error(`CoinPaprika coins API error: ${coinsResponse.statusText}`);\n      }\n      \n      const coins = await coinsResponse.json();\n      const symbolToId = new Map();\n      coins.forEach((coin: any) => {\n        if (symbols.includes(coin.symbol)) {\n          symbolToId.set(coin.symbol, coin.id);\n        }\n      });\n      \n      // Fetch data for each symbol\n      const results: UnifiedMarketData[] = [];\n      for (const symbol of symbols) {\n        const id = symbolToId.get(symbol);\n        if (!id) continue;\n        \n        try {\n          const response = await fetch(`https://api.coinpaprika.com/v1/tickers/${id}`);\n          if (response.ok) {\n            const data = await response.json();\n            results.push(normalizeMarketData(data, this.id, 'crypto'));\n          }\n        } catch (error) {\n          console.error(`Error fetching ${symbol} from CoinPaprika:`, error);\n        }\n      }\n      \n      return results;\n    });\n  }\n}\n\nexport class KrakenProvider implements CryptoProvider {\n  id = 'kraken';\n  priority = 4;\n  capabilities: ('live' | 'snapshot' | 'history')[] = ['snapshot'];\n  rateLimit = 60; // API rate limit\n  \n  async fetchSnapshot(symbols: string[]): Promise<UnifiedMarketData[]> {\n    const circuitBreaker = getCircuitBreaker('crypto', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      const pairs = symbols.map(s => `${s}USD`).join(',');\n      const url = `https://api.kraken.com/0/public/Ticker?pair=${pairs}`;\n      \n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Kraken API error: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      if (data.error?.length > 0) {\n        throw new Error(`Kraken API error: ${data.error.join(', ')}`);\n      }\n      \n      return Object.keys(data.result || {}).map(pair => \n        normalizeMarketData(data.result[pair], this.id, 'crypto')\n      );\n    });\n  }\n}\n\nexport class CryptoCompareProvider implements CryptoProvider {\n  id = 'cryptocompare';\n  priority = 5;\n  capabilities: ('live' | 'snapshot' | 'history')[] = ['history', 'snapshot'];\n  rateLimit = 100000; // 100k requests per month\n  \n  private apiKey?: string;\n  \n  constructor() {\n    this.apiKey = process.env.CRYPTOCOMPARE_KEY;\n  }\n  \n  async fetchSnapshot(symbols: string[]): Promise<UnifiedMarketData[]> {\n    if (!this.apiKey) {\n      throw new Error('CryptoCompare API key not provided');\n    }\n    \n    const circuitBreaker = getCircuitBreaker('crypto', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      const symbolsQuery = symbols.join(',');\n      const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${symbolsQuery}&tsyms=USD&api_key=${this.apiKey}`;\n      \n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`CryptoCompare API error: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      return symbols.map(symbol => {\n        const symbolData = data.RAW?.[symbol]?.USD;\n        if (!symbolData) return null;\n        \n        return normalizeMarketData({\n          symbol,\n          price: symbolData.PRICE,\n          change24h: symbolData.CHANGEPCT24HOUR,\n          volume: symbolData.VOLUME24HOURTO,\n          marketCap: symbolData.MKTCAP\n        }, this.id, 'crypto');\n      }).filter(Boolean) as UnifiedMarketData[];\n    });\n  }\n  \n  async fetchHistory(symbol: string, range: string): Promise<any[]> {\n    if (!this.apiKey) {\n      throw new Error('CryptoCompare API key not provided');\n    }\n    \n    const circuitBreaker = getCircuitBreaker('crypto', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      const { endpoint, limit } = this.getHistoryParams(range);\n      const url = `https://min-api.cryptocompare.com/data/v2/${endpoint}?fsym=${symbol}&tsym=USD&limit=${limit}&api_key=${this.apiKey}`;\n      \n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`CryptoCompare history API error: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      return data.Data?.Data || [];\n    });\n  }\n  \n  private getHistoryParams(range: string): { endpoint: string; limit: number } {\n    switch (range) {\n      case '1m': case '5m': case '15m': case '30m': case '1h':\n        return { endpoint: 'histominute', limit: 60 };\n      case '4h': case '1d':\n        return { endpoint: 'histohour', limit: 24 };\n      case '1w':\n        return { endpoint: 'histoday', limit: 7 };\n      case '1M':\n        return { endpoint: 'histoday', limit: 30 };\n      default:\n        return { endpoint: 'histoday', limit: 30 };\n    }\n  }\n}\n\nexport class CoinCapProvider implements CryptoProvider {\n  id = 'coincap';\n  priority = 6;\n  capabilities: ('live' | 'snapshot' | 'history')[] = ['snapshot', 'live'];\n  rateLimit = 1000; // Very generous rate limit\n  \n  async fetchSnapshot(symbols: string[]): Promise<UnifiedMarketData[]> {\n    const circuitBreaker = getCircuitBreaker('crypto', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      const symbolsQuery = symbols.join(',');\n      const url = `https://api.coincap.io/v2/assets?ids=${symbolsQuery.toLowerCase()}`;\n      \n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`CoinCap API error: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      return data.data?.map((item: any) => normalizeMarketData({\n        symbol: item.symbol,\n        name: item.name,\n        price: parseFloat(item.priceUsd),\n        change24h: parseFloat(item.changePercent24Hr),\n        volume: parseFloat(item.volumeUsd24Hr),\n        marketCap: parseFloat(item.marketCapUsd)\n      }, this.id, 'crypto')) || [];\n    });\n  }\n  \n  async connect(): Promise<WebSocket | undefined> {\n    const circuitBreaker = getCircuitBreaker('crypto', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      return new Promise<WebSocket | undefined>((resolve, reject) => {\n        const ws = new WebSocket('wss://ws.coincap.io/prices?assets=ALL');\n        \n        ws.on('open', () => {\n          console.log('CoinCap WebSocket connected');\n          resolve(ws);\n        });\n        \n        ws.on('error', (error) => {\n          console.error('CoinCap WebSocket error:', error);\n          reject(error);\n        });\n        \n        setTimeout(() => {\n          if (ws.readyState === WebSocket.CONNECTING) {\n            ws.terminate();\n            reject(new Error('WebSocket connection timeout'));\n          }\n        }, 10000);\n      });\n    });\n  }\n}\n\nexport class CoinbaseProProvider implements CryptoProvider {\n  id = 'coinbase';\n  priority = 7;\n  capabilities: ('live' | 'snapshot' | 'history')[] = ['snapshot', 'live'];\n  rateLimit = 1000; // Public endpoints have good limits\n  \n  async fetchSnapshot(symbols: string[]): Promise<UnifiedMarketData[]> {\n    const circuitBreaker = getCircuitBreaker('crypto', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      const results: UnifiedMarketData[] = [];\n      \n      for (const symbol of symbols) {\n        try {\n          const productId = `${symbol}-USD`;\n          const [statsResponse, tickerResponse] = await Promise.all([\n            fetch(`https://api.exchange.coinbase.com/products/${productId}/stats`),\n            fetch(`https://api.exchange.coinbase.com/products/${productId}/ticker`)\n          ]);\n          \n          if (statsResponse.ok && tickerResponse.ok) {\n            const [stats, ticker] = await Promise.all([\n              statsResponse.json(),\n              tickerResponse.json()\n            ]);\n            \n            results.push(normalizeMarketData({\n              symbol,\n              price: parseFloat(ticker.price),\n              change24h: parseFloat(stats.last) / parseFloat(stats.open) * 100 - 100,\n              volume: parseFloat(stats.volume)\n            }, this.id, 'crypto'));\n          }\n        } catch (error) {\n          console.error(`Error fetching ${symbol} from Coinbase:`, error);\n        }\n      }\n      \n      return results;\n    });\n  }\n  \n  async connect(): Promise<WebSocket | undefined> {\n    const circuitBreaker = getCircuitBreaker('crypto', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      return new Promise<WebSocket | undefined>((resolve, reject) => {\n        const ws = new WebSocket('wss://ws-feed.exchange.coinbase.com');\n        \n        ws.on('open', () => {\n          console.log('Coinbase Pro WebSocket connected');\n          // Subscribe to ticker channel for major symbols\n          ws.send(JSON.stringify({\n            type: 'subscribe',\n            channels: ['ticker'],\n            product_ids: ['BTC-USD', 'ETH-USD', 'SOL-USD', 'ADA-USD']\n          }));\n          resolve(ws);\n        });\n        \n        ws.on('error', (error) => {\n          console.error('Coinbase Pro WebSocket error:', error);\n          reject(error);\n        });\n        \n        setTimeout(() => {\n          if (ws.readyState === WebSocket.CONNECTING) {\n            ws.terminate();\n            reject(new Error('WebSocket connection timeout'));\n          }\n        }, 10000);\n      });\n    });\n  }\n}\n\nexport class BlockchainInfoProvider implements CryptoProvider {\n  id = 'blockchain';\n  priority = 8;\n  capabilities: ('live' | 'snapshot' | 'history')[] = ['snapshot'];\n  rateLimit = 300; // No official limit but being conservative\n  \n  async fetchSnapshot(symbols: string[]): Promise<UnifiedMarketData[]> {\n    const circuitBreaker = getCircuitBreaker('crypto', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      const results: UnifiedMarketData[] = [];\n      \n      // Blockchain.info primarily focuses on Bitcoin\n      if (symbols.includes('BTC')) {\n        try {\n          const [tickerResponse, statsResponse] = await Promise.all([\n            fetch('https://api.blockchain.info/ticker'),\n            fetch('https://api.blockchain.info/stats')\n          ]);\n          \n          if (tickerResponse.ok && statsResponse.ok) {\n            const [ticker, stats] = await Promise.all([\n              tickerResponse.json(),\n              statsResponse.json()\n            ]);\n            \n            results.push(normalizeMarketData({\n              symbol: 'BTC',\n              name: 'Bitcoin',\n              price: ticker.USD.last,\n              volume: stats.trade_volume_usd,\n              marketCap: stats.market_price_usd * stats.totalbc / 100000000\n            }, this.id, 'crypto'));\n          }\n        } catch (error) {\n          console.error('Error fetching BTC from Blockchain.info:', error);\n        }\n      }\n      \n      return results;\n    });\n  }\n}\n\nexport class CoinLoreProvider implements CryptoProvider {\n  id = 'coinlore';\n  priority = 9;\n  capabilities: ('live' | 'snapshot' | 'history')[] = ['snapshot'];\n  rateLimit = 600; // 10 requests per minute\n  \n  async fetchSnapshot(symbols: string[]): Promise<UnifiedMarketData[]> {\n    const circuitBreaker = getCircuitBreaker('crypto', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      // CoinLore uses different approach - get tickers and filter by symbols\n      const url = 'https://api.coinlore.net/api/tickers/';\n      \n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`CoinLore API error: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      const results: UnifiedMarketData[] = [];\n      \n      if (data.data) {\n        data.data.forEach((coin: any) => {\n          if (symbols.includes(coin.symbol)) {\n            results.push(normalizeMarketData({\n              symbol: coin.symbol,\n              name: coin.name,\n              price: parseFloat(coin.price_usd),\n              change24h: parseFloat(coin.percent_change_24h),\n              volume: parseFloat(coin.volume24),\n              marketCap: parseFloat(coin.market_cap_usd)\n            }, this.id, 'crypto'));\n          }\n        });\n      }\n      \n      return results;\n    });\n  }\n}\n\nexport class BitPayProvider implements CryptoProvider {\n  id = 'bitpay';\n  priority = 10;\n  capabilities: ('live' | 'snapshot' | 'history')[] = ['snapshot'];\n  rateLimit = 300; // Conservative estimate\n  \n  async fetchSnapshot(symbols: string[]): Promise<UnifiedMarketData[]> {\n    const circuitBreaker = getCircuitBreaker('crypto', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      const results: UnifiedMarketData[] = [];\n      \n      // BitPay has rates API for major cryptocurrencies\n      const response = await fetch('https://bitpay.com/api/rates');\n      if (!response.ok) {\n        throw new Error(`BitPay API error: ${response.statusText}`);\n      }\n      \n      const rates = await response.json();\n      \n      rates.forEach((rate: any) => {\n        if (symbols.includes(rate.code) && rate.code !== 'USD') {\n          results.push(normalizeMarketData({\n            symbol: rate.code,\n            name: rate.name,\n            price: rate.rate\n          }, this.id, 'crypto'));\n        }\n      });\n      \n      return results;\n    });\n  }\n}\n\n// Provider registry and failover logic\nexport class CryptoProviderRegistry {\n  private providers: CryptoProvider[];\n  private activeConnections: Map<string, WebSocket> = new Map();\n  \n  constructor() {\n    this.providers = [\n      new BinanceProvider(),\n      new CoinGeckoProvider(),\n      new CoinPaprikaProvider(),\n      new KrakenProvider(),\n      new CryptoCompareProvider(),\n      new CoinCapProvider(),\n      new CoinbaseProProvider(),\n      new BlockchainInfoProvider(),\n      new CoinLoreProvider(),\n      new BitPayProvider()\n    ].sort((a, b) => a.priority - b.priority);\n  }\n  \n  async fetchSnapshot(symbols: string[]): Promise<UnifiedMarketData[]> {\n    // Get optimized provider order\n    const optimizedProviders = cryptoProviderOptimizer.optimizeProviderOrder(this.providers);\n    \n    let attemptedProviders = 0;\n    \n    // First try with performance filtering\n    for (const provider of optimizedProviders) {\n      if (!provider.capabilities.includes('snapshot')) continue;\n      \n      // Runtime assertion to ensure provider methods exist\n      if (typeof provider.fetchSnapshot !== 'function') {\n        console.error(`Provider ${provider.id} is corrupted - missing fetchSnapshot method`);\n        continue;\n      }\n      \n      // Skip providers that should be avoided\n      if (cryptoProviderOptimizer.shouldSkipProvider(provider.id)) {\n        console.log(`Skipping provider ${provider.id} - poor performance metrics`);\n        continue;\n      }\n      \n      attemptedProviders++;\n      \n      try {\n        const data = await cryptoProviderOptimizer.recordProviderRequest(\n          provider.id,\n          () => provider.fetchSnapshot(symbols)\n        );\n        \n        if (data.length > 0) {\n          return data;\n        }\n      } catch (error) {\n        console.error(`Provider ${provider.id} failed:`, error);\n        continue;\n      }\n    }\n    \n    // If all providers are skipped, try without performance filtering as fallback\n    if (attemptedProviders === 0) {\n      console.log('All providers skipped by optimizer - trying fallback without performance filtering');\n      for (const provider of this.providers) {\n        if (!provider.capabilities.includes('snapshot')) continue;\n        \n        // Runtime assertion for fallback too\n        if (typeof provider.fetchSnapshot !== 'function') {\n          console.error(`Fallback provider ${provider.id} is corrupted - missing fetchSnapshot method`);\n          continue;\n        }\n        \n        try {\n          const data = await provider.fetchSnapshot(symbols);\n          if (data.length > 0) {\n            return data;\n          }\n        } catch (error) {\n          console.error(`Fallback provider ${provider.id} failed:`, error);\n          continue;\n        }\n      }\n    }\n    \n    throw new Error('All crypto providers failed');\n  }\n  \n  async fetchHistory(symbol: string, range: string): Promise<any[]> {\n    for (const provider of this.providers) {\n      if (!provider.capabilities.includes('history') || !provider.fetchHistory) continue;\n      \n      try {\n        const data = await provider.fetchHistory(symbol, range);\n        if (data.length > 0) {\n          return data;\n        }\n      } catch (error) {\n        console.error(`Provider ${provider.id} history failed:`, error);\n        continue;\n      }\n    }\n    \n    return []; // Return empty array if all providers fail\n  }\n  \n  async connectLiveStreams(symbols: string[]): Promise<WebSocket[]> {\n    const connections: WebSocket[] = [];\n    \n    for (const provider of this.providers) {\n      if (!provider.capabilities.includes('live') || !provider.connect) continue;\n      \n      try {\n        const ws = await provider.connect();\n        if (ws) {\n          connections.push(ws);\n          this.activeConnections.set(provider.id, ws);\n        }\n      } catch (error) {\n        console.error(`Failed to connect to ${provider.id}:`, error);\n      }\n    }\n    \n    return connections;\n  }\n  \n  getProviderStats() {\n    const recommendations = cryptoProviderOptimizer.getProviderRecommendations();\n    const performanceStats = cryptoProviderOptimizer.getProviderStats();\n    \n    return this.providers.map(provider => {\n      const perfStat = performanceStats.find(p => p.id === provider.id);\n      const metrics = cryptoProviderOptimizer.getProviderMetrics(provider.id);\n      const dynamicPriority = cryptoProviderOptimizer.getProviderDynamicPriority(provider);\n      \n      return {\n        id: provider.id,\n        priority: provider.priority,\n        dynamicPriority: dynamicPriority,\n        capabilities: provider.capabilities,\n        circuitBreakerState: getCircuitBreaker('crypto', provider.id).getState(),\n        isConnected: this.activeConnections.has(provider.id),\n        performance: perfStat || null,\n        recommendation: recommendations.fast.includes(provider.id) ? 'fast' :\n                      recommendations.reliable.includes(provider.id) ? 'reliable' :\n                      recommendations.avoid.includes(provider.id) ? 'avoid' : 'normal'\n      };\n    });\n  }\n}\n","size_bytes":23901},"server/providers/newsProviders.ts":{"content":"import { Parser } from 'xml2js';\nimport { getCircuitBreaker } from '../utils/circuitBreaker.js';\nimport { type NewsArticleData } from '@shared/schema';\n\nexport interface NewsProvider {\n  id: string;\n  category: 'crypto' | 'stocks' | 'general';\n  url: string;\n  rateLimit: number;\n  \n  fetchNews(): Promise<NewsArticleData[]>;\n}\n\nexport class CryptoNewsProvider implements NewsProvider {\n  constructor(\n    public id: string,\n    public category: 'crypto' | 'stocks' | 'general',\n    public url: string,\n    public rateLimit: number = 10\n  ) {}\n  \n  async fetchNews(): Promise<NewsArticleData[]> {\n    const circuitBreaker = getCircuitBreaker('news', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      const response = await fetch(this.url, {\n        headers: {\n          'User-Agent': 'FinChat/1.0 (Financial News Aggregator)'\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error(`${this.id} RSS fetch error: ${response.statusText}`);\n      }\n      \n      const xmlText = await response.text();\n      const parser = new Parser();\n      const result = await parser.parseStringPromise(xmlText);\n      \n      const items = result.rss?.channel?.[0]?.item || result.feed?.entry || [];\n      \n      return items.slice(0, 20).map((item: any) => this.parseItem(item)).filter(Boolean) as NewsArticleData[];\n    });\n  }\n  \n  private parseItem(item: any): NewsArticleData | null {\n    try {\n      // Handle both RSS and Atom formats\n      const title = item.title?.[0]?._ || item.title?.[0] || item.title;\n      const description = item.description?.[0] || item.summary?.[0]?._ || item.summary?.[0];\n      const link = item.link?.[0]?.$ ? item.link[0].$.href : (item.link?.[0] || item.link);\n      const pubDate = item.pubDate?.[0] || item.published?.[0] || item.updated?.[0];\n      \n      if (!title || !link) return null;\n      \n      // Extract image URL from description or enclosure\n      let imageUrl: string | undefined;\n      if (item.enclosure?.[0]?.$ && item.enclosure[0].$.type?.startsWith('image/')) {\n        imageUrl = item.enclosure[0].$.url;\n      } else if (description) {\n        const imgMatch = description.match(/<img[^>]+src=\"([^\"]+)\"/);\n        if (imgMatch) imageUrl = imgMatch[1];\n      }\n      \n      return {\n        title: this.cleanText(title),\n        description: description ? this.cleanText(description) : undefined,\n        url: link,\n        imageUrl,\n        source: this.id,\n        category: this.category,\n        publishedAt: new Date(pubDate || Date.now()).toISOString()\n      };\n    } catch (error) {\n      console.error(`Error parsing item from ${this.id}:`, error);\n      return null;\n    }\n  }\n  \n  private cleanText(text: string): string {\n    return text\n      .replace(/<[^>]*>/g, '') // Remove HTML tags\n      .replace(/&[a-zA-Z0-9#]+;/g, ' ') // Remove HTML entities\n      .replace(/\\s+/g, ' ') // Normalize whitespace\n      .trim()\n      .substring(0, 500); // Limit length\n  }\n}\n\n// News Provider Registry\nexport class NewsProviderRegistry {\n  private providers: NewsProvider[];\n  private cache: Map<string, { data: NewsArticleData[]; timestamp: number }> = new Map();\n  private readonly cacheTimeout = 10 * 60 * 1000; // 10 minutes\n  \n  constructor() {\n    this.providers = [\n      // Crypto News Sources\n      new CryptoNewsProvider('cointelegraph', 'crypto', 'https://cointelegraph.com/rss'),\n      new CryptoNewsProvider('bitcoinist', 'crypto', 'https://bitcoinist.com/feed'),\n      new CryptoNewsProvider('newsbtc', 'crypto', 'https://www.newsbtc.com/feed'),\n      new CryptoNewsProvider('cryptopotato', 'crypto', 'https://cryptopotato.com/feed'),\n      new CryptoNewsProvider('coinjournal', 'crypto', 'https://coinjournal.net/news/feed/'),\n      new CryptoNewsProvider('99bitcoins', 'crypto', 'https://99bitcoins.com/feed'),\n      \n      // Stock/Finance News Sources\n      new CryptoNewsProvider('yahoo-finance', 'stocks', 'https://feeds.finance.yahoo.com/rss/2.0/headline?s=GSPC,DJI,^IXIC'),\n      new CryptoNewsProvider('investing', 'stocks', 'https://www.investing.com/rss/news_25.rss'),\n      new CryptoNewsProvider('marketwatch', 'stocks', 'https://feeds.marketwatch.com/marketwatch/topstories/'),\n      new CryptoNewsProvider('reuters', 'stocks', 'http://feeds.reuters.com/reuters/businessNews'),\n      new CryptoNewsProvider('seekingalpha', 'stocks', 'https://seekingalpha.com/market_currents.xml')\n    ];\n  }\n  \n  async fetchAllNews(category?: string): Promise<NewsArticleData[]> {\n    const providers = category \n      ? this.providers.filter(p => p.category === category)\n      : this.providers;\n    \n    const allNews: NewsArticleData[] = [];\n    const fetchPromises = providers.map(async (provider) => {\n      try {\n        // Check cache first\n        const cached = this.cache.get(provider.id);\n        if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {\n          return cached.data;\n        }\n        \n        const news = await provider.fetchNews();\n        \n        // Update cache\n        this.cache.set(provider.id, {\n          data: news,\n          timestamp: Date.now()\n        });\n        \n        return news;\n      } catch (error) {\n        console.error(`Failed to fetch news from ${provider.id}:`, error);\n        return [];\n      }\n    });\n    \n    const results = await Promise.allSettled(fetchPromises);\n    \n    results.forEach((result) => {\n      if (result.status === 'fulfilled') {\n        allNews.push(...result.value);\n      }\n    });\n    \n    // Deduplicate by URL and sort by published date\n    const uniqueNews = this.deduplicateNews(allNews);\n    return uniqueNews.sort((a, b) => \n      new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime()\n    );\n  }\n  \n  private deduplicateNews(news: NewsArticleData[]): NewsArticleData[] {\n    const seen = new Set<string>();\n    const unique: NewsArticleData[] = [];\n    \n    for (const article of news) {\n      // Create a simple hash based on title and URL\n      const hash = `${article.title.toLowerCase().substring(0, 50)}-${article.url}`;\n      \n      if (!seen.has(hash)) {\n        seen.add(hash);\n        unique.push(article);\n      }\n    }\n    \n    return unique;\n  }\n  \n  getProviderStats() {\n    return this.providers.map(provider => ({\n      id: provider.id,\n      category: provider.category,\n      url: provider.url,\n      circuitBreakerState: getCircuitBreaker('news', provider.id).getState(),\n      lastFetch: this.cache.get(provider.id)?.timestamp,\n      articleCount: this.cache.get(provider.id)?.data.length || 0\n    }));\n  }\n  \n  clearCache() {\n    this.cache.clear();\n  }\n}\n","size_bytes":6593},"server/providers/stockProviders.ts":{"content":"import { normalizeMarketData } from '../utils/formatters.js';\nimport { getCircuitBreaker } from '../utils/circuitBreaker.js';\nimport { stockProviderOptimizer } from '../utils/providerOptimizer.js';\nimport { type UnifiedMarketData } from '@shared/schema';\n\nexport interface StockProvider {\n  id: string;\n  priority: number;\n  capabilities: ('live' | 'snapshot' | 'history')[];\n  rateLimit: number;\n  requiresKey: boolean;\n  \n  fetchSnapshot(symbols: string[]): Promise<UnifiedMarketData[]>;\n  fetchHistory?(symbol: string, range: string): Promise<any[]>;\n}\n\nexport class IEXCloudProvider implements StockProvider {\n  id = 'iex';\n  priority = 1;\n  capabilities: ('live' | 'snapshot' | 'history')[] = ['live', 'snapshot', 'history'];\n  rateLimit = 100; // varies by plan\n  requiresKey = true;\n  \n  private apiKey?: string;\n  \n  constructor() {\n    this.apiKey = process.env.IEX_KEY;\n  }\n  \n  async fetchSnapshot(symbols: string[]): Promise<UnifiedMarketData[]> {\n    if (!this.apiKey) {\n      throw new Error('IEX Cloud API key not provided');\n    }\n    \n    const circuitBreaker = getCircuitBreaker('stock', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      const symbolsQuery = symbols.join(',');\n      const url = `https://cloud.iexapis.com/stable/stock/market/batch?symbols=${symbolsQuery}&types=quote&token=${this.apiKey}`;\n      \n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`IEX Cloud API error: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      return symbols.map(symbol => {\n        const quote = data[symbol]?.quote;\n        if (!quote) return null;\n        \n        return normalizeMarketData(quote, this.id, 'stock');\n      }).filter(Boolean) as UnifiedMarketData[];\n    });\n  }\n  \n  async fetchHistory(symbol: string, range: string): Promise<any[]> {\n    if (!this.apiKey) {\n      throw new Error('IEX Cloud API key not provided');\n    }\n    \n    const circuitBreaker = getCircuitBreaker('stock', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      const iexRange = this.convertRange(range);\n      const url = `https://cloud.iexapis.com/stable/stock/${symbol}/chart/${iexRange}?token=${this.apiKey}`;\n      \n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`IEX Cloud history API error: ${response.statusText}`);\n      }\n      \n      return await response.json();\n    });\n  }\n  \n  private convertRange(range: string): string {\n    switch (range) {\n      case '1d': return '1d';\n      case '1w': return '5d';\n      case '1M': return '1m';\n      case '3M': return '3m';\n      case '1Y': return '1y';\n      default: return '1d';\n    }\n  }\n}\n\nexport class FinnhubProvider implements StockProvider {\n  id = 'finnhub';\n  priority = 2;\n  capabilities: ('live' | 'snapshot' | 'history')[] = ['live', 'snapshot', 'history'];\n  rateLimit = 60; // 60 calls per minute\n  requiresKey = true;\n  \n  private apiKey?: string;\n  \n  constructor() {\n    this.apiKey = process.env.FINNHUB_KEY;\n  }\n  \n  async fetchSnapshot(symbols: string[]): Promise<UnifiedMarketData[]> {\n    if (!this.apiKey) {\n      throw new Error('Finnhub API key not provided');\n    }\n    \n    const circuitBreaker = getCircuitBreaker('stock', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      const results: UnifiedMarketData[] = [];\n      \n      for (const symbol of symbols) {\n        try {\n          const url = `https://finnhub.io/api/v1/quote?symbol=${symbol}&token=${this.apiKey}`;\n          const response = await fetch(url);\n          \n          if (response.ok) {\n            const data = await response.json();\n            results.push(normalizeMarketData({ ...data, symbol }, this.id, 'stock'));\n          }\n        } catch (error) {\n          console.error(`Error fetching ${symbol} from Finnhub:`, error);\n        }\n      }\n      \n      return results;\n    });\n  }\n  \n  async fetchHistory(symbol: string, range: string): Promise<any[]> {\n    if (!this.apiKey) {\n      throw new Error('Finnhub API key not provided');\n    }\n    \n    const circuitBreaker = getCircuitBreaker('stock', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      const { from, to, resolution } = this.getTimeParams(range);\n      const url = `https://finnhub.io/api/v1/stock/candle?symbol=${symbol}&resolution=${resolution}&from=${from}&to=${to}&token=${this.apiKey}`;\n      \n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Finnhub history API error: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      return data.c?.map((close: number, index: number) => ({\n        timestamp: data.t[index] * 1000,\n        close: close,\n        open: data.o[index],\n        high: data.h[index],\n        low: data.l[index],\n        volume: data.v[index]\n      })) || [];\n    });\n  }\n  \n  private getTimeParams(range: string) {\n    const now = Math.floor(Date.now() / 1000);\n    const day = 24 * 60 * 60;\n    \n    switch (range) {\n      case '1d':\n        return { from: now - day, to: now, resolution: '5' };\n      case '1w':\n        return { from: now - 7 * day, to: now, resolution: '60' };\n      case '1M':\n        return { from: now - 30 * day, to: now, resolution: 'D' };\n      case '3M':\n        return { from: now - 90 * day, to: now, resolution: 'D' };\n      case '1Y':\n        return { from: now - 365 * day, to: now, resolution: 'D' };\n      default:\n        return { from: now - day, to: now, resolution: '5' };\n    }\n  }\n}\n\nexport class YahooFinanceProvider implements StockProvider {\n  id = 'yahoo';\n  priority = 3;\n  capabilities: ('live' | 'snapshot' | 'history')[] = ['snapshot'];\n  rateLimit = 2000; // Estimated limit\n  requiresKey = false; // Can work without key but limited\n  \n  async fetchSnapshot(symbols: string[]): Promise<UnifiedMarketData[]> {\n    const circuitBreaker = getCircuitBreaker('stock', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      // Using Yahoo Finance API v8 (free but unofficial)\n      const symbolsQuery = symbols.join(',');\n      const url = `https://query1.finance.yahoo.com/v8/finance/chart/${symbolsQuery}?interval=1d&range=1d`;\n      \n      const response = await fetch(url, {\n        headers: {\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Yahoo Finance API error: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      const results: UnifiedMarketData[] = [];\n      \n      if (data.chart?.result) {\n        for (const result of data.chart.result) {\n          const meta = result.meta;\n          const quote = result.indicators?.quote?.[0];\n          \n          if (meta && quote) {\n            results.push(normalizeMarketData({\n              symbol: meta.symbol,\n              price: meta.regularMarketPrice,\n              changePercent: ((meta.regularMarketPrice - meta.previousClose) / meta.previousClose) * 100,\n              volume: quote.volume?.[quote.volume.length - 1],\n              marketCap: meta.marketCap\n            }, this.id, 'stock'));\n          }\n        }\n      }\n      \n      return results;\n    });\n  }\n}\n\nexport class MarketStackProvider implements StockProvider {\n  id = 'marketstack';\n  priority = 4;\n  capabilities: ('live' | 'snapshot' | 'history')[] = ['snapshot', 'history'];\n  rateLimit = 1000; // 1000 requests per month on free plan\n  requiresKey = true;\n  \n  private apiKey?: string;\n  \n  constructor() {\n    this.apiKey = process.env.MARKETSTACK_KEY;\n  }\n  \n  async fetchSnapshot(symbols: string[]): Promise<UnifiedMarketData[]> {\n    if (!this.apiKey) {\n      throw new Error('MarketStack API key not provided');\n    }\n    \n    const circuitBreaker = getCircuitBreaker('stock', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      const symbolsQuery = symbols.join(',');\n      const url = `http://api.marketstack.com/v1/eod/latest?access_key=${this.apiKey}&symbols=${symbolsQuery}`;\n      \n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`MarketStack API error: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      return data.data?.map((item: any) => normalizeMarketData(item, this.id, 'stock')) || [];\n    });\n  }\n}\n\nexport class TwelveDataProvider implements StockProvider {\n  id = 'twelvedata';\n  priority = 5;\n  capabilities: ('live' | 'snapshot' | 'history')[] = ['snapshot', 'history'];\n  rateLimit = 800; // 800 requests per day on free plan\n  requiresKey = true;\n  \n  private apiKey?: string;\n  \n  constructor() {\n    this.apiKey = process.env.TWELVEDATA_KEY;\n  }\n  \n  async fetchSnapshot(symbols: string[]): Promise<UnifiedMarketData[]> {\n    if (!this.apiKey) {\n      throw new Error('Twelve Data API key not provided');\n    }\n    \n    const circuitBreaker = getCircuitBreaker('stock', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      const symbolsQuery = symbols.join(',');\n      const url = `https://api.twelvedata.com/price?symbol=${symbolsQuery}&apikey=${this.apiKey}`;\n      \n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Twelve Data API error: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      // Handle single symbol vs multiple symbols response format\n      if (symbols.length === 1) {\n        return [normalizeMarketData({ symbol: symbols[0], price: parseFloat(data.price) }, this.id, 'stock')];\n      } else {\n        return Object.keys(data).map(symbol => \n          normalizeMarketData({ symbol, price: parseFloat(data[symbol].price) }, this.id, 'stock')\n        );\n      }\n    });\n  }\n}\n\nexport class PolygonFreeProvider implements StockProvider {\n  id = 'polygon';\n  priority = 6;\n  capabilities: ('live' | 'snapshot' | 'history')[] = ['snapshot'];\n  rateLimit = 5; // 5 requests per minute on free tier\n  requiresKey = false; // Using free endpoints\n  \n  async fetchSnapshot(symbols: string[]): Promise<UnifiedMarketData[]> {\n    const circuitBreaker = getCircuitBreaker('stock', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      const results: UnifiedMarketData[] = [];\n      \n      // Polygon.io has some free endpoints for basic data\n      for (const symbol of symbols) {\n        try {\n          // Using free previous close endpoint\n          const url = `https://api.polygon.io/v2/aggs/ticker/${symbol}/prev?adjusted=true`;\n          const response = await fetch(url);\n          \n          if (response.ok) {\n            const data = await response.json();\n            const result = data.results?.[0];\n            if (result) {\n              results.push(normalizeMarketData({\n                symbol,\n                price: result.c, // Close price\n                change24h: ((result.c - result.o) / result.o) * 100,\n                volume: result.v\n              }, this.id, 'stock'));\n            }\n          }\n        } catch (error) {\n          console.error(`Error fetching ${symbol} from Polygon:`, error);\n        }\n      }\n      \n      return results;\n    });\n  }\n}\n\nexport class AlphaVantageFreeProvider implements StockProvider {\n  id = 'alphavantage';\n  priority = 7;\n  capabilities: ('live' | 'snapshot' | 'history')[] = ['snapshot', 'history'];\n  rateLimit = 5; // 5 requests per minute on free tier\n  requiresKey = true;\n  \n  private apiKey?: string;\n  \n  constructor() {\n    this.apiKey = process.env.ALPHA_VANTAGE_API_KEY;\n  }\n  \n  async fetchSnapshot(symbols: string[]): Promise<UnifiedMarketData[]> {\n    if (!this.apiKey) {\n      throw new Error('Alpha Vantage API key not provided');\n    }\n    \n    const circuitBreaker = getCircuitBreaker('stock', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      const results: UnifiedMarketData[] = [];\n      \n      // Alpha Vantage requires one symbol per request\n      for (const symbol of symbols) {\n        try {\n          const url = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${this.apiKey}`;\n          const response = await fetch(url);\n          \n          if (response.ok) {\n            const data = await response.json();\n            const quote = data['Global Quote'];\n            if (quote && quote['05. price']) {\n              results.push(normalizeMarketData({\n                symbol,\n                price: parseFloat(quote['05. price']),\n                change24h: parseFloat(quote['10. change percent'].replace('%', '')),\n                volume: parseFloat(quote['06. volume'])\n              }, this.id, 'stock'));\n            }\n          }\n          \n          // Rate limiting - wait between requests\n          await new Promise(resolve => setTimeout(resolve, 1000));\n        } catch (error) {\n          console.error(`Error fetching ${symbol} from Alpha Vantage:`, error);\n        }\n      }\n      \n      return results;\n    });\n  }\n  \n  async fetchHistory(symbol: string, range: string): Promise<any[]> {\n    if (!this.apiKey) {\n      throw new Error('Alpha Vantage API key not provided');\n    }\n    \n    const circuitBreaker = getCircuitBreaker('stock', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      const func = this.getTimeSeriesFunction(range);\n      const url = `https://www.alphavantage.co/query?function=${func}&symbol=${symbol}&apikey=${this.apiKey}`;\n      \n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Alpha Vantage history API error: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      const timeSeriesKey = Object.keys(data).find(key => key.includes('Time Series'));\n      const timeSeriesData = timeSeriesKey ? data[timeSeriesKey] : null;\n      \n      if (!timeSeriesData) return [];\n      \n      return Object.entries(timeSeriesData).map(([date, values]: [string, any]) => ({\n        timestamp: new Date(date).getTime(),\n        close: parseFloat(values['4. close']),\n        open: parseFloat(values['1. open']),\n        high: parseFloat(values['2. high']),\n        low: parseFloat(values['3. low']),\n        volume: parseFloat(values['5. volume'])\n      }));\n    });\n  }\n  \n  private getTimeSeriesFunction(range: string): string {\n    switch (range) {\n      case '1d': return 'TIME_SERIES_INTRADAY&interval=5min';\n      case '1w': case '1M': return 'TIME_SERIES_DAILY';\n      case '3M': case '1Y': return 'TIME_SERIES_WEEKLY';\n      default: return 'TIME_SERIES_DAILY';\n    }\n  }\n}\n\nexport class FinancialModelingPrepProvider implements StockProvider {\n  id = 'fmp';\n  priority = 8;\n  capabilities: ('live' | 'snapshot' | 'history')[] = ['snapshot'];\n  rateLimit = 250; // 250 requests per day on free tier\n  requiresKey = false; // Some endpoints don't require key\n  \n  async fetchSnapshot(symbols: string[]): Promise<UnifiedMarketData[]> {\n    const circuitBreaker = getCircuitBreaker('stock', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      const results: UnifiedMarketData[] = [];\n      \n      // FMP has some free endpoints for major stocks\n      for (const symbol of symbols) {\n        try {\n          const url = `https://financialmodelingprep.com/api/v3/quote-short/${symbol}`;\n          const response = await fetch(url);\n          \n          if (response.ok) {\n            const data = await response.json();\n            if (data && data.length > 0) {\n              const quote = data[0];\n              results.push(normalizeMarketData({\n                symbol,\n                price: quote.price,\n                change24h: ((quote.price - quote.price) / quote.price) * 100 // Need to calculate from additional data\n              }, this.id, 'stock'));\n            }\n          }\n        } catch (error) {\n          console.error(`Error fetching ${symbol} from FMP:`, error);\n        }\n      }\n      \n      return results;\n    });\n  }\n}\n\nexport class TiingoFreeProvider implements StockProvider {\n  id = 'tiingo';\n  priority = 9;\n  capabilities: ('live' | 'snapshot' | 'history')[] = ['snapshot', 'history'];\n  rateLimit = 1000; // 1000 requests per day on free tier\n  requiresKey = true;\n  \n  private apiKey?: string;\n  \n  constructor() {\n    this.apiKey = process.env.TIINGO_API_KEY;\n  }\n  \n  async fetchSnapshot(symbols: string[]): Promise<UnifiedMarketData[]> {\n    if (!this.apiKey) {\n      throw new Error('Tiingo API key not provided');\n    }\n    \n    const circuitBreaker = getCircuitBreaker('stock', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      const results: UnifiedMarketData[] = [];\n      \n      for (const symbol of symbols) {\n        try {\n          const url = `https://api.tiingo.com/tiingo/daily/${symbol}/prices?token=${this.apiKey}`;\n          const response = await fetch(url);\n          \n          if (response.ok) {\n            const data = await response.json();\n            if (data && data.length > 0) {\n              const latest = data[0];\n              results.push(normalizeMarketData({\n                symbol,\n                price: latest.close,\n                change24h: ((latest.close - latest.prevClose) / latest.prevClose) * 100,\n                volume: latest.volume\n              }, this.id, 'stock'));\n            }\n          }\n        } catch (error) {\n          console.error(`Error fetching ${symbol} from Tiingo:`, error);\n        }\n      }\n      \n      return results;\n    });\n  }\n  \n  async fetchHistory(symbol: string, range: string): Promise<any[]> {\n    if (!this.apiKey) {\n      throw new Error('Tiingo API key not provided');\n    }\n    \n    const circuitBreaker = getCircuitBreaker('stock', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      const { startDate, endDate } = this.getDateRange(range);\n      const url = `https://api.tiingo.com/tiingo/daily/${symbol}/prices?startDate=${startDate}&endDate=${endDate}&token=${this.apiKey}`;\n      \n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Tiingo history API error: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      return data.map((item: any) => ({\n        timestamp: new Date(item.date).getTime(),\n        close: item.close,\n        open: item.open,\n        high: item.high,\n        low: item.low,\n        volume: item.volume\n      }));\n    });\n  }\n  \n  private getDateRange(range: string) {\n    const now = new Date();\n    const formatDate = (date: Date) => date.toISOString().split('T')[0];\n    \n    switch (range) {\n      case '1d':\n        return { startDate: formatDate(new Date(now.getTime() - 24 * 60 * 60 * 1000)), endDate: formatDate(now) };\n      case '1w':\n        return { startDate: formatDate(new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)), endDate: formatDate(now) };\n      case '1M':\n        return { startDate: formatDate(new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000)), endDate: formatDate(now) };\n      case '3M':\n        return { startDate: formatDate(new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000)), endDate: formatDate(now) };\n      case '1Y':\n        return { startDate: formatDate(new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000)), endDate: formatDate(now) };\n      default:\n        return { startDate: formatDate(new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000)), endDate: formatDate(now) };\n    }\n  }\n}\n\nexport class WorldTradingDataProvider implements StockProvider {\n  id = 'worldtradingdata';\n  priority = 10;\n  capabilities: ('live' | 'snapshot' | 'history')[] = ['snapshot'];\n  rateLimit = 250; // 250 requests per day on free tier\n  requiresKey = false; // Some basic endpoints are free\n  \n  async fetchSnapshot(symbols: string[]): Promise<UnifiedMarketData[]> {\n    const circuitBreaker = getCircuitBreaker('stock', this.id);\n    \n    return circuitBreaker.execute(async () => {\n      // World Trading Data has been discontinued, but keeping structure for alternative\n      // Using alternative free endpoint structure\n      const results: UnifiedMarketData[] = [];\n      \n      // Placeholder for when we find a replacement free API\n      console.log('WorldTradingData provider - looking for alternative free endpoint');\n      \n      return results;\n    });\n  }\n}\n\n// Stock Provider Registry\nexport class StockProviderRegistry {\n  private providers: StockProvider[];\n  \n  constructor() {\n    this.providers = [\n      new IEXCloudProvider(),\n      new FinnhubProvider(),\n      new YahooFinanceProvider(),\n      new MarketStackProvider(),\n      new TwelveDataProvider(),\n      new PolygonFreeProvider(),\n      new AlphaVantageFreeProvider(),\n      new FinancialModelingPrepProvider(),\n      new TiingoFreeProvider(),\n      new WorldTradingDataProvider()\n    ].sort((a, b) => a.priority - b.priority);\n  }\n  \n  async fetchSnapshot(symbols: string[]): Promise<UnifiedMarketData[]> {\n    // Get optimized provider order\n    const optimizedProviders = stockProviderOptimizer.optimizeProviderOrder(this.providers);\n    \n    let attemptedProviders = 0;\n    \n    // First try with performance filtering\n    for (const provider of optimizedProviders) {\n      if (!provider.capabilities.includes('snapshot')) continue;\n      \n      // Runtime assertion to ensure provider methods exist\n      if (typeof provider.fetchSnapshot !== 'function') {\n        console.error(`Provider ${provider.id} is corrupted - missing fetchSnapshot method`);\n        continue;\n      }\n      \n      // Skip providers that require keys if keys aren't available\n      if (provider.requiresKey) {\n        const hasKey = this.hasRequiredKey(provider.id);\n        if (!hasKey) {\n          console.log(`Skipping ${provider.id} - API key not provided`);\n          continue;\n        }\n      }\n      \n      // Skip providers that should be avoided based on performance\n      if (stockProviderOptimizer.shouldSkipProvider(provider.id)) {\n        console.log(`Skipping provider ${provider.id} - poor performance metrics`);\n        continue;\n      }\n      \n      attemptedProviders++;\n      \n      try {\n        const data = await stockProviderOptimizer.recordProviderRequest(\n          provider.id,\n          () => provider.fetchSnapshot(symbols)\n        );\n        \n        if (data.length > 0) {\n          return data;\n        }\n      } catch (error) {\n        console.error(`Provider ${provider.id} failed:`, error);\n        continue;\n      }\n    }\n    \n    // If all providers are skipped/failed, try fallback without performance filtering\n    if (attemptedProviders === 0) {\n      console.log('All providers skipped by optimizer - trying fallback without performance filtering');\n      for (const provider of this.providers) {\n        if (!provider.capabilities.includes('snapshot')) continue;\n        \n        // Runtime assertion for fallback too\n        if (typeof provider.fetchSnapshot !== 'function') {\n          console.error(`Fallback provider ${provider.id} is corrupted - missing fetchSnapshot method`);\n          continue;\n        }\n        \n        // Still skip providers that require keys if keys aren't available\n        if (provider.requiresKey) {\n          const hasKey = this.hasRequiredKey(provider.id);\n          if (!hasKey) {\n            continue;\n          }\n        }\n        \n        try {\n          const data = await provider.fetchSnapshot(symbols);\n          if (data.length > 0) {\n            return data;\n          }\n        } catch (error) {\n          console.error(`Fallback provider ${provider.id} failed:`, error);\n          continue;\n        }\n      }\n    }\n    \n    // If all providers fail, return empty array with warning\n    console.warn('All stock providers failed - consider adding API keys for live data');\n    return [];\n  }\n  \n  async fetchHistory(symbol: string, range: string): Promise<any[]> {\n    for (const provider of this.providers) {\n      if (!provider.capabilities.includes('history') || !provider.fetchHistory) continue;\n      \n      if (provider.requiresKey && !this.hasRequiredKey(provider.id)) continue;\n      \n      try {\n        const data = await provider.fetchHistory(symbol, range);\n        if (data.length > 0) {\n          return data;\n        }\n      } catch (error) {\n        console.error(`Provider ${provider.id} history failed:`, error);\n        continue;\n      }\n    }\n    \n    return [];\n  }\n  \n  private hasRequiredKey(providerId: string): boolean {\n    switch (providerId) {\n      case 'iex': return !!process.env.IEX_KEY;\n      case 'finnhub': return !!process.env.FINNHUB_KEY;\n      case 'marketstack': return !!process.env.MARKETSTACK_KEY;\n      case 'twelvedata': return !!process.env.TWELVEDATA_KEY;\n      case 'alphavantage': return !!process.env.ALPHA_VANTAGE_API_KEY;\n      case 'tiingo': return !!process.env.TIINGO_API_KEY;\n      default: return true;\n    }\n  }\n  \n  getProviderStats() {\n    const recommendations = stockProviderOptimizer.getProviderRecommendations();\n    const performanceStats = stockProviderOptimizer.getProviderStats();\n    \n    return this.providers.map(provider => {\n      const perfStat = performanceStats.find(p => p.id === provider.id);\n      const metrics = stockProviderOptimizer.getProviderMetrics(provider.id);\n      const dynamicPriority = stockProviderOptimizer.getProviderDynamicPriority(provider);\n      \n      return {\n        id: provider.id,\n        priority: provider.priority,\n        dynamicPriority: dynamicPriority,\n        capabilities: provider.capabilities,\n        requiresKey: provider.requiresKey,\n        hasKey: provider.requiresKey ? this.hasRequiredKey(provider.id) : true,\n        circuitBreakerState: getCircuitBreaker('stock', provider.id).getState(),\n        performance: perfStat || null,\n        recommendation: recommendations.fast.includes(provider.id) ? 'fast' :\n                      recommendations.reliable.includes(provider.id) ? 'reliable' :\n                      recommendations.avoid.includes(provider.id) ? 'avoid' : 'normal'\n      };\n    });\n  }\n}\n","size_bytes":25962},"server/services/calculatorService.ts":{"content":"import { calculateHoldingPeriod, isLongTermHolding, calculateTaxRate } from '../utils/formatters.js';\nimport { type CalculatorInput, type TaxCalculation } from '@shared/schema';\n\nexport class CalculatorService {\n  \n  calculateROI(inputs: Record<string, number>): any {\n    const { initialInvestment, currentValue, purchaseDate } = inputs;\n    \n    if (!initialInvestment || !currentValue) {\n      throw new Error('Initial investment and current value are required');\n    }\n    \n    const absoluteGain = currentValue - initialInvestment;\n    const percentageGain = (absoluteGain / initialInvestment) * 100;\n    \n    let annualizedReturn = 0;\n    let holdingPeriod = 0;\n    \n    if (purchaseDate) {\n      holdingPeriod = calculateHoldingPeriod(new Date(purchaseDate).toISOString());\n      if (holdingPeriod > 0) {\n        const years = holdingPeriod / 365;\n        annualizedReturn = (Math.pow(currentValue / initialInvestment, 1 / years) - 1) * 100;\n      }\n    }\n    \n    return {\n      initialInvestment,\n      currentValue,\n      absoluteGain,\n      percentageGain,\n      annualizedReturn,\n      holdingPeriod,\n      isProfit: absoluteGain > 0\n    };\n  }\n  \n  calculateProfitLoss(inputs: Record<string, number>): any {\n    const { entryPrice, exitPrice, quantity, fees = 0, positionType = 1 } = inputs; // 1 = long, -1 = short\n    \n    if (!entryPrice || !exitPrice || !quantity) {\n      throw new Error('Entry price, exit price, and quantity are required');\n    }\n    \n    const direction = positionType >= 0 ? 1 : -1;\n    const grossPnL = direction * (exitPrice - entryPrice) * quantity;\n    const totalFees = fees * 2; // Entry + exit fees\n    const netPnL = grossPnL - totalFees;\n    const roi = (netPnL / (entryPrice * quantity)) * 100;\n    \n    return {\n      entryPrice,\n      exitPrice,\n      quantity,\n      grossPnL,\n      totalFees,\n      netPnL,\n      roi,\n      positionType: direction > 0 ? 'Long' : 'Short',\n      isProfit: netPnL > 0\n    };\n  }\n  \n  calculateCompoundInterest(inputs: Record<string, any>): any {\n    const { \n      principal, \n      annualRate, \n      timePeriod, \n      timeUnit = 'years', \n      compoundFrequency = 12, \n      monthlyContribution = 0 \n    } = inputs;\n    \n    if (!principal || !annualRate || !timePeriod) {\n      throw new Error('Principal, annual rate, and time period are required');\n    }\n    \n    const rate = annualRate / 100;\n    const years = timeUnit === 'years' ? timePeriod : timePeriod / 12;\n    const periodsPerYear = compoundFrequency;\n    const totalPeriods = years * periodsPerYear;\n    \n    // Compound interest formula with regular contributions\n    const futureValue = principal * Math.pow(1 + rate / periodsPerYear, totalPeriods) +\n      monthlyContribution * (Math.pow(1 + rate / periodsPerYear, totalPeriods) - 1) / (rate / periodsPerYear);\n    \n    const totalContributions = principal + (monthlyContribution * 12 * years);\n    const interestEarned = futureValue - totalContributions;\n    \n    // Year-by-year breakdown\n    const yearlyBreakdown = [];\n    for (let year = 1; year <= Math.min(years, 10); year++) {\n      const periods = year * periodsPerYear;\n      const yearValue = principal * Math.pow(1 + rate / periodsPerYear, periods) +\n        monthlyContribution * (Math.pow(1 + rate / periodsPerYear, periods) - 1) / (rate / periodsPerYear);\n      \n      yearlyBreakdown.push({\n        year,\n        value: Math.round(yearValue * 100) / 100,\n        contributions: principal + (monthlyContribution * 12 * year),\n        interest: yearValue - (principal + (monthlyContribution * 12 * year))\n      });\n    }\n    \n    return {\n      principal,\n      annualRate,\n      years,\n      monthlyContribution,\n      compoundFrequency,\n      futureValue: Math.round(futureValue * 100) / 100,\n      totalContributions,\n      interestEarned: Math.round(interestEarned * 100) / 100,\n      effectiveRate: ((futureValue / totalContributions - 1) * 100),\n      yearlyBreakdown\n    };\n  }\n  \n  convertCurrency(inputs: Record<string, any>, marketPrices: Record<string, number>): any {\n    const { fromCurrency, toCurrency, amount } = inputs;\n    \n    if (!fromCurrency || !toCurrency || !amount) {\n      throw new Error('From currency, to currency, and amount are required');\n    }\n    \n    let fromRate = 1;\n    let toRate = 1;\n    \n    // Get rates from market prices (assuming USD as base)\n    if (fromCurrency !== 'USD' && marketPrices[fromCurrency]) {\n      fromRate = marketPrices[fromCurrency];\n    }\n    \n    if (toCurrency !== 'USD' && marketPrices[toCurrency]) {\n      toRate = marketPrices[toCurrency];\n    }\n    \n    // Convert via USD\n    const usdAmount = fromCurrency === 'USD' ? amount : amount * fromRate;\n    const convertedAmount = toCurrency === 'USD' ? usdAmount : usdAmount / toRate;\n    \n    const exchangeRate = convertedAmount / amount;\n    \n    return {\n      fromCurrency,\n      toCurrency,\n      amount,\n      convertedAmount: Math.round(convertedAmount * 100000) / 100000,\n      exchangeRate: Math.round(exchangeRate * 100000) / 100000,\n      rates: {\n        [fromCurrency]: fromRate,\n        [toCurrency]: toRate\n      }\n    };\n  }\n  \n  calculateTax(calculation: TaxCalculation): any {\n    const {\n      quantity,\n      purchasePrice,\n      salePrice,\n      purchaseDate,\n      saleDate,\n      fees = 0,\n      region = 'US',\n      taxBracket\n    } = calculation;\n    \n    if (!quantity || !purchasePrice || !salePrice || !purchaseDate) {\n      throw new Error('Quantity, purchase price, sale price, and purchase date are required');\n    }\n    \n    const totalCost = quantity * purchasePrice + fees;\n    const totalSale = quantity * salePrice - fees;\n    const capitalGains = totalSale - totalCost;\n    \n    const holdingDays = saleDate \n      ? calculateHoldingPeriod(purchaseDate, saleDate)\n      : 0;\n    \n    const isLongTerm = isLongTermHolding(holdingDays);\n    \n    // Calculate tax rate based on holding period and income\n    const taxRate = calculateTaxRate(taxBracket, isLongTerm, region);\n    const taxOwed = Math.max(0, capitalGains * (taxRate / 100));\n    const netProfit = capitalGains - taxOwed;\n    const effectiveRate = capitalGains > 0 ? (taxOwed / capitalGains) * 100 : 0;\n    \n    // Scenario comparison\n    const shortTermTaxRate = calculateTaxRate(taxBracket, false, region);\n    const shortTermTax = Math.max(0, capitalGains * (shortTermTaxRate / 100));\n    const shortTermNet = capitalGains - shortTermTax;\n    const taxSavings = shortTermTax - taxOwed;\n    \n    return {\n      purchasePrice,\n      salePrice,\n      quantity,\n      totalCost,\n      totalSale,\n      fees,\n      capitalGains,\n      holdingDays,\n      isLongTerm,\n      taxRate,\n      taxOwed: Math.round(taxOwed * 100) / 100,\n      netProfit: Math.round(netProfit * 100) / 100,\n      effectiveRate: Math.round(effectiveRate * 100) / 100,\n      scenarios: {\n        current: {\n          type: isLongTerm ? 'Long-term' : 'Short-term',\n          taxRate,\n          taxOwed: Math.round(taxOwed * 100) / 100,\n          netProfit: Math.round(netProfit * 100) / 100\n        },\n        shortTerm: {\n          type: 'Short-term',\n          taxRate: shortTermTaxRate,\n          taxOwed: Math.round(shortTermTax * 100) / 100,\n          netProfit: Math.round(shortTermNet * 100) / 100\n        },\n        savings: Math.round(taxSavings * 100) / 100\n      }\n    };\n  }\n  \n  getServiceHealth() {\n    return {\n      supportedCalculations: ['roi', 'pl', 'compound', 'conversion', 'tax'],\n      regions: ['US', 'UK', 'CA', 'AU'],\n      currencies: ['USD', 'EUR', 'GBP', 'BTC', 'ETH', 'SOL', 'ADA']\n    };\n  }\n}\n","size_bytes":7577},"server/services/chatService.ts":{"content":"import { storage } from '../storage.js';\nimport { type ChatMessage } from '@shared/schema';\n\nexport class ChatService {\n  private apiKey: string | null = null;\n  private readonly apiUrl = 'https://openrouter.ai/api/v1/chat/completions';\n  private readonly model = 'deepseek/deepseek-chat-v3.1:free';\n  private readonly systemPrompt = `You are FinChat, an expert AI financial assistant specializing in cryptocurrency, stock markets, and personal finance.\n\nYour role is to:\n- Provide insights about financial markets, investments, and trading strategies\n- Analyze market trends and deliver actionable analysis  \n- Help users understand financial concepts and calculations\n- Offer portfolio management and risk assessment guidance\n- Explain tax implications and optimization strategies\n- Discuss economic indicators and their market impact\n\nGuidelines:\n- Provide clear, confident analysis and recommendations\n- Present objective perspectives on investment opportunities  \n- Explain both opportunities and risks clearly\n- Use current market data to inform your responses\n- Give specific, actionable insights when possible\n\nCurrent market context: You have access to real-time crypto and stock market data, news feeds, and financial calculators. Reference this data to provide accurate and timely insights.`;\n\n  constructor() {\n    if (process.env.OPENROUTER_API_KEY) {\n      this.apiKey = process.env.OPENROUTER_API_KEY;\n    }\n  }\n\n  async sendMessage(message: string, conversationId?: string): Promise<{ response: string; conversationId: string }> {\n    if (!this.apiKey) {\n      throw new Error('OpenRouter API key not configured. Please set OPENROUTER_API_KEY environment variable.');\n    }\n\n    let conversation;\n    let messages: ChatMessage[] = [];\n\n    // Load existing conversation or create new one\n    if (conversationId) {\n      conversation = await storage.getChatConversation(conversationId);\n      if (conversation) {\n        messages = Array.isArray(conversation.messages) ? conversation.messages : [];\n      }\n    }\n\n    // Add user message\n    const userMessage: ChatMessage = {\n      role: 'user',\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n    messages.push(userMessage);\n\n    try {\n      // Using DeepSeek model via OpenRouter for reliable chat functionality\n      const response = await fetch(this.apiUrl, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json',\n          'HTTP-Referer': 'https://finchat.app',\n          'X-Title': 'FinChat'\n        },\n        body: JSON.stringify({\n          model: this.model,\n          messages: [\n            { role: 'system', content: this.systemPrompt },\n            ...messages.map(msg => ({ role: msg.role, content: msg.content }))\n          ],\n          max_tokens: 2000,\n          stream: false\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(`OpenRouter API error: ${response.status} ${response.statusText} - ${JSON.stringify(errorData)}`);\n      }\n\n      const completion = await response.json();\n      const assistantResponse = completion.choices?.[0]?.message?.content || 'I apologize, but I was unable to generate a response. Please try again.';\n\n      // Add assistant message\n      const assistantMessage: ChatMessage = {\n        role: 'assistant',\n        content: assistantResponse,\n        timestamp: new Date().toISOString()\n      };\n      messages.push(assistantMessage);\n\n      // Save conversation\n      if (conversation) {\n        conversation = await storage.updateChatConversation(conversationId!, messages);\n      } else {\n        conversation = await storage.saveChatConversation({ messages });\n      }\n\n      return {\n        response: assistantResponse,\n        conversationId: conversation.id\n      };\n\n    } catch (error) {\n      console.error('OpenRouter API error:', error);\n      \n      // Provide helpful error message\n      let errorMessage = 'I apologize, but I encountered an error while processing your request. ';\n      \n      if (error instanceof Error) {\n        if (error.message.includes('rate limit')) {\n          errorMessage += 'I\\'m currently experiencing high demand. Please try again in a moment.';\n        } else if (error.message.includes('quota')) {\n          errorMessage += 'The AI service quota has been exceeded. Please try again later.';\n        } else {\n          errorMessage += 'Please try again or rephrase your question.';\n        }\n      }\n\n      // Add error message to conversation\n      const errorResponse: ChatMessage = {\n        role: 'assistant',\n        content: errorMessage,\n        timestamp: new Date().toISOString()\n      };\n      messages.push(errorResponse);\n\n      // Save conversation with error\n      if (conversation) {\n        conversation = await storage.updateChatConversation(conversationId!, messages);\n      } else {\n        conversation = await storage.saveChatConversation({ messages });\n      }\n\n      return {\n        response: errorMessage,\n        conversationId: conversation.id\n      };\n    }\n  }\n\n  async streamMessage(message: string, conversationId?: string): Promise<AsyncIterableIterator<string>> {\n    if (!this.apiKey) {\n      throw new Error('OpenRouter API key not configured');\n    }\n\n    let conversation;\n    let messages: ChatMessage[] = [];\n\n    if (conversationId) {\n      conversation = await storage.getChatConversation(conversationId);\n      if (conversation) {\n        messages = Array.isArray(conversation.messages) ? conversation.messages : [];\n      }\n    }\n\n    const userMessage: ChatMessage = {\n      role: 'user',\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n    messages.push(userMessage);\n\n    // Using DeepSeek model via OpenRouter for reliable streaming chat functionality\n    const response = await fetch(this.apiUrl, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${this.apiKey}`,\n        'Content-Type': 'application/json',\n        'HTTP-Referer': 'https://finchat.app',\n        'X-Title': 'FinChat'\n      },\n      body: JSON.stringify({\n        model: this.model,\n        messages: [\n          { role: 'system', content: this.systemPrompt },\n          ...messages.map(msg => ({ role: msg.role, content: msg.content }))\n        ],\n        max_tokens: 2000,\n        stream: true\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`OpenRouter API error: ${response.status} ${response.statusText}`);\n    }\n\n    return this.createStreamIterator(response, messages, conversation?.id);\n  }\n\n  private async *createStreamIterator(\n    response: Response,\n    messages: ChatMessage[],\n    conversationId?: string\n  ): AsyncIterableIterator<string> {\n    let fullResponse = '';\n\n    try {\n      const reader = response.body?.getReader();\n      if (!reader) {\n        throw new Error('No response body');\n      }\n\n      const decoder = new TextDecoder();\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        const chunk = decoder.decode(value, { stream: true });\n        const lines = chunk.split('\\n');\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            const data = line.slice(6);\n            if (data === '[DONE]') {\n              break;\n            }\n\n            try {\n              const parsed = JSON.parse(data);\n              const content = parsed.choices?.[0]?.delta?.content || '';\n              if (content) {\n                fullResponse += content;\n                yield content;\n              }\n            } catch (e) {\n              // Ignore JSON parsing errors for malformed chunks\n            }\n          }\n        }\n      }\n\n      // Save complete response\n      const assistantMessage: ChatMessage = {\n        role: 'assistant',\n        content: fullResponse,\n        timestamp: new Date().toISOString()\n      };\n      messages.push(assistantMessage);\n\n      if (conversationId) {\n        await storage.updateChatConversation(conversationId, messages);\n      } else {\n        await storage.saveChatConversation({ messages });\n      }\n\n    } catch (error) {\n      console.error('Stream error:', error);\n      yield '\\n\\n[Error: Stream interrupted. Please try again.]';\n    }\n  }\n\n  async getConversation(conversationId: string): Promise<ChatMessage[]> {\n    const conversation = await storage.getChatConversation(conversationId);\n    return Array.isArray(conversation?.messages) ? conversation.messages : [];\n  }\n\n  isConfigured(): boolean {\n    return this.apiKey !== null;\n  }\n\n  getServiceHealth() {\n    return {\n      configured: this.isConfigured(),\n      model: this.model,\n      systemPromptLength: this.systemPrompt.length\n    };\n  }\n}","size_bytes":8811},"server/services/marketService.ts":{"content":"import { CryptoProviderRegistry } from '../providers/cryptoProviders.js';\nimport { StockProviderRegistry } from '../providers/stockProviders.js';\nimport { marketCache } from '../utils/cache.js';\nimport { storage } from '../storage.js';\nimport { type UnifiedMarketData } from '@shared/schema';\n\nexport class MarketService {\n  private cryptoRegistry: CryptoProviderRegistry;\n  private stockRegistry: StockProviderRegistry;\n  private activeStreams: Map<string, any> = new Map();\n  \n  constructor() {\n    this.cryptoRegistry = new CryptoProviderRegistry();\n    this.stockRegistry = new StockProviderRegistry();\n  }\n  \n  async getMarketSnapshot(kind: 'crypto' | 'stock', symbols: string[]): Promise<UnifiedMarketData[]> {\n    const cacheKey = `${kind}-${symbols.join(',')}-snapshot`;\n    \n    // Check cache first\n    const cached = marketCache.get(cacheKey);\n    if (cached && Array.isArray(cached)) {\n      return cached;\n    }\n    \n    let data: UnifiedMarketData[] = [];\n    \n    try {\n      if (kind === 'crypto') {\n        data = await this.cryptoRegistry.fetchSnapshot(symbols);\n      } else {\n        data = await this.stockRegistry.fetchSnapshot(symbols);\n      }\n      \n      // Cache with appropriate TTL\n      const ttl = kind === 'crypto' ? 15000 : 30000; // 15s for crypto, 30s for stocks\n      marketCache.set(cacheKey, data, ttl);\n      \n      // Store in persistent storage\n      await this.saveMarketData(data);\n      \n    } catch (error) {\n      console.error(`Market snapshot error for ${kind}:`, error);\n      \n      // Try to return cached data from storage as fallback\n      const fallbackData = await storage.getMarketDataBatch(symbols, kind);\n      if (fallbackData.length > 0) {\n        data = fallbackData.map(item => ({\n          symbol: item.symbol,\n          name: item.name,\n          price: parseFloat(item.price),\n          change24h: item.change24h ? parseFloat(item.change24h) : undefined,\n          volume: item.volume ? parseFloat(item.volume) : undefined,\n          marketCap: item.marketCap ? parseFloat(item.marketCap) : undefined,\n          timestamp: item.timestamp.toISOString(),\n          source: item.source,\n          kind: item.kind as 'crypto' | 'stock'\n        }));\n      }\n    }\n    \n    return data;\n  }\n  \n  async getMarketHistory(kind: 'crypto' | 'stock', symbol: string, range: string): Promise<any[]> {\n    const cacheKey = `${kind}-${symbol}-${range}-history`;\n    \n    // Check cache first\n    const cached = marketCache.get(cacheKey);\n    if (cached && Array.isArray(cached)) {\n      return cached;\n    }\n    \n    let data: any[] = [];\n    \n    try {\n      if (kind === 'crypto') {\n        data = await this.cryptoRegistry.fetchHistory(symbol, range);\n      } else {\n        data = await this.stockRegistry.fetchHistory(symbol, range);\n      }\n      \n      // Cache for 5 minutes\n      marketCache.set(cacheKey, data, 5 * 60 * 1000);\n      \n    } catch (error) {\n      console.error(`Market history error for ${kind} ${symbol}:`, error);\n    }\n    \n    return data;\n  }\n  \n  private async saveMarketData(data: UnifiedMarketData[]): Promise<void> {\n    try {\n      for (const item of data) {\n        await storage.saveMarketData({\n          symbol: item.symbol,\n          name: item.name,\n          price: item.price.toString(),\n          change24h: item.change24h?.toString(),\n          volume: item.volume?.toString(),\n          marketCap: item.marketCap?.toString(),\n          source: item.source,\n          kind: item.kind\n        });\n      }\n    } catch (error) {\n      console.error('Error saving market data:', error);\n    }\n  }\n  \n  async initializeLiveStreams(): Promise<void> {\n    try {\n      // Initialize crypto live streams\n      const cryptoSymbols = ['BTC', 'ETH', 'SOL', 'ADA', 'DOT', 'MATIC', 'AVAX', 'LINK'];\n      const connections = await this.cryptoRegistry.connectLiveStreams(cryptoSymbols);\n      \n      connections.forEach((ws, index) => {\n        this.activeStreams.set(`crypto-stream-${index}`, ws);\n      });\n      \n      console.log(`Initialized ${connections.length} crypto live streams`);\n    } catch (error) {\n      console.error('Error initializing live streams:', error);\n    }\n  }\n  \n  getServiceHealth() {\n    return {\n      cryptoProviders: this.cryptoRegistry.getProviderStats(),\n      stockProviders: this.stockRegistry.getProviderStats(),\n      cacheStats: marketCache.getStats(),\n      activeStreams: this.activeStreams.size\n    };\n  }\n  \n  // Default symbols for each market type\n  getDefaultSymbols(kind: 'crypto' | 'stock'): string[] {\n    if (kind === 'crypto') {\n      return ['BTC', 'ETH', 'SOL', 'ADA', 'DOT', 'MATIC', 'AVAX', 'LINK', 'UNI', 'LTC'];\n    } else {\n      return ['AAPL', 'GOOGL', 'MSFT', 'AMZN', 'TSLA', 'META', 'NVDA', 'NFLX', 'SPY', 'QQQ'];\n    }\n  }\n}\n","size_bytes":4769},"server/services/newsService.ts":{"content":"import { NewsProviderRegistry } from '../providers/newsProviders.js';\nimport { newsCache } from '../utils/cache.js';\nimport { storage } from '../storage.js';\nimport { type NewsArticleData } from '@shared/schema';\n\nexport class NewsService {\n  private newsRegistry: NewsProviderRegistry;\n  private lastFetchTime: number = 0;\n  private readonly fetchInterval = 10 * 60 * 1000; // 10 minutes\n  \n  constructor() {\n    this.newsRegistry = new NewsProviderRegistry();\n    this.startPeriodicFetch();\n  }\n  \n  async getNews(category?: string, limit: number = 50): Promise<NewsArticleData[]> {\n    const cacheKey = `news-${category || 'all'}-${limit}`;\n    \n    // Check cache first\n    const cached = newsCache.get(cacheKey);\n    if (cached && Array.isArray(cached)) {\n      return cached;\n    }\n    \n    let news: NewsArticleData[] = [];\n    \n    try {\n      // Try to fetch from providers first\n      news = await this.newsRegistry.fetchAllNews(category);\n      \n      if (news.length > 0) {\n        // Save to storage\n        await this.saveNewsArticles(news);\n        \n        // Cache for 10 minutes\n        newsCache.set(cacheKey, news.slice(0, limit), this.fetchInterval);\n      } else {\n        // Fallback to storage\n        const fallbackNews = await storage.getLatestNews(category, limit);\n        news = this.transformStorageNewsToAPIFormat(fallbackNews);\n      }\n      \n    } catch (error) {\n      console.error('Error fetching news:', error);\n      \n      // Fallback to storage\n      const fallbackNews = await storage.getLatestNews(category, limit);\n      news = this.transformStorageNewsToAPIFormat(fallbackNews);\n    }\n    \n    return news.slice(0, limit);\n  }\n  \n  private transformStorageNewsToAPIFormat(storageNews: any[]): NewsArticleData[] {\n    return storageNews.map(article => ({\n      title: article.title,\n      description: article.description || undefined,\n      content: article.content || undefined,\n      url: article.url,\n      imageUrl: article.imageUrl || undefined,\n      source: article.source,\n      category: ['crypto', 'stocks', 'general'].includes(article.category) \n        ? article.category as 'crypto' | 'stocks' | 'general'\n        : 'general',\n      publishedAt: article.publishedAt instanceof Date \n        ? article.publishedAt.toISOString()\n        : article.publishedAt\n    }));\n  }\n\n  private async saveNewsArticles(articles: NewsArticleData[]): Promise<void> {\n    try {\n      for (const article of articles) {\n        // Check if article already exists\n        const existing = await storage.getNewsByUrl(article.url);\n        if (!existing) {\n          await storage.saveNewsArticle({\n            title: article.title,\n            description: article.description,\n            content: undefined, // We don't fetch full content from RSS\n            url: article.url,\n            imageUrl: article.imageUrl,\n            source: article.source,\n            category: article.category,\n            publishedAt: new Date(article.publishedAt)\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Error saving news articles:', error);\n    }\n  }\n  \n  private startPeriodicFetch(): void {\n    // Initial fetch\n    this.fetchAndCacheNews();\n    \n    // Set up periodic fetching\n    setInterval(() => {\n      this.fetchAndCacheNews();\n    }, this.fetchInterval);\n  }\n  \n  private async fetchAndCacheNews(): Promise<void> {\n    try {\n      console.log('Fetching news from all sources...');\n      \n      // Fetch all categories\n      const allNews = await this.newsRegistry.fetchAllNews();\n      const cryptoNews = allNews.filter(n => n.category === 'crypto');\n      const stockNews = allNews.filter(n => n.category === 'stocks');\n      \n      // Save to storage\n      await this.saveNewsArticles(allNews);\n      \n      // Update cache\n      newsCache.set('news-all-50', allNews.slice(0, 50), this.fetchInterval);\n      newsCache.set('news-crypto-50', cryptoNews.slice(0, 50), this.fetchInterval);\n      newsCache.set('news-stocks-50', stockNews.slice(0, 50), this.fetchInterval);\n      \n      this.lastFetchTime = Date.now();\n      \n      console.log(`Fetched ${allNews.length} news articles (${cryptoNews.length} crypto, ${stockNews.length} stocks)`);\n      \n    } catch (error) {\n      console.error('Error in periodic news fetch:', error);\n    }\n  }\n  \n  getFeaturedNews(category?: string): Promise<NewsArticleData | undefined> {\n    return this.getNews(category, 1).then(news => news[0]);\n  }\n  \n  getServiceHealth() {\n    return {\n      providers: this.newsRegistry.getProviderStats(),\n      cacheStats: newsCache.getStats(),\n      lastFetchTime: this.lastFetchTime,\n      nextFetchIn: Math.max(0, this.fetchInterval - (Date.now() - this.lastFetchTime))\n    };\n  }\n  \n  clearCache(): void {\n    this.newsRegistry.clearCache();\n    newsCache.clear();\n  }\n}\n","size_bytes":4820},"server/utils/cache.ts":{"content":"class LRUCache<T> {\n  private capacity: number;\n  private cache: Map<string, { value: T; expiry: number }>;\n\n  constructor(capacity: number = 1000) {\n    this.capacity = capacity;\n    this.cache = new Map();\n  }\n\n  get(key: string): T | undefined {\n    const item = this.cache.get(key);\n    if (!item) return undefined;\n\n    if (Date.now() > item.expiry) {\n      this.cache.delete(key);\n      return undefined;\n    }\n\n    // Move to end (most recently used)\n    this.cache.delete(key);\n    this.cache.set(key, item);\n    return item.value;\n  }\n\n  set(key: string, value: T, ttlMs: number): void {\n    if (this.cache.has(key)) {\n      this.cache.delete(key);\n    } else if (this.cache.size >= this.capacity) {\n      // Remove least recently used (first item)\n      const firstKey = this.cache.keys().next().value;\n      if (firstKey !== undefined) {\n        this.cache.delete(firstKey);\n      }\n    }\n\n    this.cache.set(key, {\n      value,\n      expiry: Date.now() + ttlMs\n    });\n  }\n\n  has(key: string): boolean {\n    const item = this.cache.get(key);\n    if (!item) return false;\n\n    if (Date.now() > item.expiry) {\n      this.cache.delete(key);\n      return false;\n    }\n\n    return true;\n  }\n\n  delete(key: string): boolean {\n    return this.cache.delete(key);\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n\n  size(): number {\n    return this.cache.size;\n  }\n\n  getStats() {\n    return {\n      size: this.cache.size,\n      capacity: this.capacity,\n      hitRate: 0 // TODO: Implement hit rate tracking\n    };\n  }\n}\n\n// Cache instances for different data types\nexport const marketCache = new LRUCache(500); // 15s TTL for crypto, 30s for stocks\nexport const newsCache = new LRUCache(200); // 10-15 minutes TTL\nexport const chartCache = new LRUCache(100); // 5 minutes TTL for chart data\n\nexport { LRUCache };\n","size_bytes":1819},"server/utils/circuitBreaker.ts":{"content":"export enum CircuitState {\n  CLOSED = 'CLOSED',\n  OPEN = 'OPEN',\n  HALF_OPEN = 'HALF_OPEN'\n}\n\nexport class CircuitBreaker {\n  private state: CircuitState = CircuitState.CLOSED;\n  private failureCount: number = 0;\n  private lastFailureTime: number = 0;\n  private successCount: number = 0;\n\n  constructor(\n    private failureThreshold: number = 5, // Increased threshold for high-frequency trading\n    private recoveryTimeMs: number = 30000, // Reduced to 30 seconds for faster recovery\n    private successThreshold: number = 2\n  ) {}\n\n  async execute<T>(operation: () => Promise<T>): Promise<T> {\n    if (this.state === CircuitState.OPEN) {\n      if (Date.now() - this.lastFailureTime < this.recoveryTimeMs) {\n        throw new Error('Circuit breaker is OPEN');\n      } else {\n        this.state = CircuitState.HALF_OPEN;\n        this.successCount = 0;\n      }\n    }\n\n    try {\n      const result = await operation();\n      this.onSuccess();\n      return result;\n    } catch (error) {\n      this.onFailure();\n      throw error;\n    }\n  }\n\n  private onSuccess(): void {\n    this.failureCount = 0;\n    \n    if (this.state === CircuitState.HALF_OPEN) {\n      this.successCount++;\n      if (this.successCount >= this.successThreshold) {\n        this.state = CircuitState.CLOSED;\n      }\n    } else {\n      this.state = CircuitState.CLOSED;\n    }\n  }\n\n  private onFailure(): void {\n    this.failureCount++;\n    this.lastFailureTime = Date.now();\n    \n    if (this.failureCount >= this.failureThreshold) {\n      this.state = CircuitState.OPEN;\n    }\n  }\n\n  getState(): CircuitState {\n    return this.state;\n  }\n\n  getStats() {\n    return {\n      state: this.state,\n      failureCount: this.failureCount,\n      lastFailureTime: this.lastFailureTime,\n      successCount: this.successCount\n    };\n  }\n\n  reset(): void {\n    this.state = CircuitState.CLOSED;\n    this.failureCount = 0;\n    this.lastFailureTime = 0;\n    this.successCount = 0;\n  }\n}\n\n// Circuit breakers for different providers\nexport const cryptoCircuitBreakers = new Map<string, CircuitBreaker>();\nexport const stockCircuitBreakers = new Map<string, CircuitBreaker>();\nexport const newsCircuitBreakers = new Map<string, CircuitBreaker>();\n\nexport function getCircuitBreaker(type: 'crypto' | 'stock' | 'news', provider: string): CircuitBreaker {\n  const circuitBreakers = type === 'crypto' ? cryptoCircuitBreakers : \n                         type === 'stock' ? stockCircuitBreakers : \n                         newsCircuitBreakers;\n  \n  if (!circuitBreakers.has(provider)) {\n    circuitBreakers.set(provider, new CircuitBreaker());\n  }\n  \n  return circuitBreakers.get(provider)!;\n}\n","size_bytes":2637},"server/utils/formatters.ts":{"content":"import { type UnifiedMarketData } from \"@shared/schema\";\n\nexport function formatPrice(price: number, decimals: number = 2): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals\n  }).format(price);\n}\n\nexport function formatPercentage(value: number, decimals: number = 2): string {\n  return `${value >= 0 ? '+' : ''}${value.toFixed(decimals)}%`;\n}\n\nexport function formatVolume(volume: number): string {\n  if (volume >= 1e9) {\n    return `$${(volume / 1e9).toFixed(2)}B`;\n  } else if (volume >= 1e6) {\n    return `$${(volume / 1e6).toFixed(2)}M`;\n  } else if (volume >= 1e3) {\n    return `$${(volume / 1e3).toFixed(2)}K`;\n  }\n  return `$${volume.toFixed(2)}`;\n}\n\nexport function formatMarketCap(marketCap: number): string {\n  if (marketCap >= 1e12) {\n    return `$${(marketCap / 1e12).toFixed(2)}T`;\n  } else if (marketCap >= 1e9) {\n    return `$${(marketCap / 1e9).toFixed(2)}B`;\n  } else if (marketCap >= 1e6) {\n    return `$${(marketCap / 1e6).toFixed(2)}M`;\n  }\n  return `$${marketCap.toFixed(2)}`;\n}\n\nexport function normalizeMarketData(rawData: any, source: string, kind: 'crypto' | 'stock'): UnifiedMarketData {\n  // This function normalizes data from different providers to unified format\n  const timestamp = new Date().toISOString();\n  \n  switch (source) {\n    case 'binance':\n      return {\n        symbol: rawData.symbol,\n        name: rawData.symbol, // Binance doesn't provide full names\n        price: parseFloat(rawData.price || rawData.c),\n        change24h: parseFloat(rawData.priceChangePercent || rawData.P),\n        volume: parseFloat(rawData.volume || rawData.v),\n        marketCap: undefined, // Not provided by Binance\n        timestamp,\n        source,\n        kind\n      };\n      \n    case 'coingecko':\n      return {\n        symbol: rawData.symbol?.toUpperCase(),\n        name: rawData.name,\n        price: rawData.current_price,\n        change24h: rawData.price_change_percentage_24h,\n        volume: rawData.total_volume,\n        marketCap: rawData.market_cap,\n        timestamp,\n        source,\n        kind\n      };\n      \n    case 'coinpaprika':\n      return {\n        symbol: rawData.symbol?.toUpperCase(),\n        name: rawData.name,\n        price: rawData.quotes?.USD?.price,\n        change24h: rawData.quotes?.USD?.percent_change_24h,\n        volume: rawData.quotes?.USD?.volume_24h,\n        marketCap: rawData.quotes?.USD?.market_cap,\n        timestamp,\n        source,\n        kind\n      };\n      \n    case 'kraken':\n      const pair = Object.keys(rawData.result || {})[0];\n      const data = rawData.result?.[pair];\n      return {\n        symbol: pair?.replace('USD', ''),\n        name: pair?.replace('USD', ''),\n        price: parseFloat(data?.c?.[0]),\n        change24h: undefined, // Calculate from open/close if available\n        volume: parseFloat(data?.v?.[1]), // 24h volume\n        marketCap: undefined,\n        timestamp,\n        source,\n        kind\n      };\n      \n    case 'iex':\n      return {\n        symbol: rawData.symbol,\n        name: rawData.companyName || rawData.symbol,\n        price: rawData.latestPrice,\n        change24h: rawData.changePercent ? rawData.changePercent * 100 : undefined,\n        volume: rawData.volume,\n        marketCap: rawData.marketCap,\n        timestamp,\n        source,\n        kind\n      };\n      \n    case 'finnhub':\n      return {\n        symbol: rawData.symbol,\n        name: rawData.symbol, // Finnhub provides symbol in quote endpoint\n        price: rawData.c, // current price\n        change24h: rawData.dp, // percent change\n        volume: undefined, // Not in basic quote\n        marketCap: undefined,\n        timestamp,\n        source,\n        kind\n      };\n      \n    default:\n      // Generic fallback\n      return {\n        symbol: rawData.symbol || 'UNKNOWN',\n        name: rawData.name || rawData.symbol || 'Unknown',\n        price: parseFloat(rawData.price || rawData.last || rawData.close || 0),\n        change24h: parseFloat(rawData.change24h || rawData.changePercent || 0),\n        volume: parseFloat(rawData.volume || 0),\n        marketCap: parseFloat(rawData.marketCap || 0),\n        timestamp,\n        source,\n        kind\n      };\n  }\n}\n\nexport function calculateHoldingPeriod(purchaseDate: string, saleDate?: string): number {\n  const purchase = new Date(purchaseDate);\n  const sale = saleDate ? new Date(saleDate) : new Date();\n  return Math.floor((sale.getTime() - purchase.getTime()) / (1000 * 60 * 60 * 24));\n}\n\nexport function isLongTermHolding(days: number): boolean {\n  return days >= 365; // US tax law: 1 year for long-term capital gains\n}\n\nexport function calculateTaxRate(income: number, isLongTerm: boolean, region: string = 'US'): number {\n  if (region === 'US') {\n    if (isLongTerm) {\n      // Long-term capital gains rates for 2024\n      if (income <= 44625) return 0;\n      if (income <= 492300) return 15;\n      return 20;\n    } else {\n      // Short-term capital gains = ordinary income tax rates\n      if (income <= 10275) return 10;\n      if (income <= 41775) return 12;\n      if (income <= 89450) return 22;\n      if (income <= 190750) return 24;\n      if (income <= 364200) return 32;\n      if (income <= 462500) return 35;\n      return 37;\n    }\n  }\n  \n  // Default fallback rates for other regions\n  return isLongTerm ? 15 : 25;\n}\n","size_bytes":5379},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-sse.tsx":{"content":"import { useEffect, useState, useRef } from 'react';\n\ninterface UseSSEOptions {\n  reconnect?: boolean;\n  reconnectInterval?: number;\n  maxReconnectAttempts?: number;\n}\n\nexport function useSSE<T = any>(\n  url: string | null,\n  options: UseSSEOptions = {}\n): T | null {\n  const {\n    reconnect = true,\n    reconnectInterval = 3000,\n    maxReconnectAttempts = 5\n  } = options;\n\n  const [data, setData] = useState<T | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  const eventSourceRef = useRef<EventSource | null>(null);\n  const reconnectAttemptsRef = useRef(0);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  const connect = () => {\n    if (!url || eventSourceRef.current?.readyState === EventSource.OPEN) {\n      return;\n    }\n\n    try {\n      const eventSource = new EventSource(url);\n      eventSourceRef.current = eventSource;\n\n      eventSource.onopen = () => {\n        setIsConnected(true);\n        setError(null);\n        reconnectAttemptsRef.current = 0;\n        console.log(`SSE connected to ${url}`);\n      };\n\n      eventSource.onmessage = (event) => {\n        try {\n          const parsedData = JSON.parse(event.data);\n          setData(parsedData);\n        } catch (parseError) {\n          console.warn('Failed to parse SSE data:', parseError);\n          setData(event.data as T);\n        }\n      };\n\n      eventSource.addEventListener('market_update', (event) => {\n        try {\n          const parsedData = JSON.parse(event.data);\n          setData(parsedData);\n        } catch (parseError) {\n          console.warn('Failed to parse market update:', parseError);\n        }\n      });\n\n      eventSource.addEventListener('connected', (event) => {\n        console.log('SSE connection confirmed:', event.data);\n      });\n\n      eventSource.onerror = (event) => {\n        setIsConnected(false);\n        \n        if (eventSource.readyState === EventSource.CLOSED) {\n          console.log('SSE connection closed');\n          \n          if (reconnect && reconnectAttemptsRef.current < maxReconnectAttempts) {\n            reconnectAttemptsRef.current += 1;\n            setError(`Connection lost. Reconnecting... (attempt ${reconnectAttemptsRef.current}/${maxReconnectAttempts})`);\n            \n            reconnectTimeoutRef.current = setTimeout(() => {\n              connect();\n            }, reconnectInterval);\n          } else {\n            setError('Connection failed. Maximum reconnection attempts reached.');\n          }\n        } else {\n          setError('SSE connection error occurred');\n        }\n      };\n\n    } catch (err) {\n      setError('Failed to establish SSE connection');\n      setIsConnected(false);\n    }\n  };\n\n  const disconnect = () => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n\n    if (eventSourceRef.current) {\n      eventSourceRef.current.close();\n      eventSourceRef.current = null;\n    }\n    \n    setIsConnected(false);\n    setData(null);\n  };\n\n  useEffect(() => {\n    if (url) {\n      connect();\n    }\n\n    return () => {\n      disconnect();\n    };\n  }, [url]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      disconnect();\n    };\n  }, []);\n\n  // Return only the data for simplicity\n  // The component can check if data is null to determine connection status\n  return data;\n}\n\nexport default useSSE;\n","size_bytes":3464},"client/src/hooks/use-theme.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'dark' | 'light';\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n}\n\nexport function ThemeProvider({ children, defaultTheme = 'light' }: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    // Check localStorage first, then system preference, then default\n    const stored = localStorage.getItem('finchat-theme') as Theme;\n    if (stored) return stored;\n    \n    if (typeof window !== 'undefined') {\n      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n      return systemTheme;\n    }\n    \n    return defaultTheme;\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    \n    // Remove both classes first\n    root.classList.remove('light', 'dark');\n    \n    // Add the current theme class\n    root.classList.add(theme);\n    \n    // Store in localStorage\n    localStorage.setItem('finchat-theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n\n  const value: ThemeContextType = {\n    theme,\n    setTheme,\n    toggleTheme,\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme(): ThemeContextType {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n","size_bytes":1737},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"export function formatPrice(price: number, decimals: number = 2): string {\n  if (isNaN(price) || price === null || price === undefined) {\n    return '$0.00';\n  }\n  \n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals\n  }).format(price);\n}\n\nexport function formatPercentage(value: number, decimals: number = 2): string {\n  if (isNaN(value) || value === null || value === undefined) {\n    return '0.00%';\n  }\n  \n  return `${value >= 0 ? '+' : ''}${value.toFixed(decimals)}%`;\n}\n\nexport function formatVolume(volume: number): string {\n  if (isNaN(volume) || volume === null || volume === undefined || volume === 0) {\n    return '$0';\n  }\n  \n  if (volume >= 1e9) {\n    return `$${(volume / 1e9).toFixed(2)}B`;\n  } else if (volume >= 1e6) {\n    return `$${(volume / 1e6).toFixed(2)}M`;\n  } else if (volume >= 1e3) {\n    return `$${(volume / 1e3).toFixed(2)}K`;\n  }\n  return `$${volume.toFixed(2)}`;\n}\n\nexport function formatMarketCap(marketCap: number): string {\n  if (isNaN(marketCap) || marketCap === null || marketCap === undefined || marketCap === 0) {\n    return '$0';\n  }\n  \n  if (marketCap >= 1e12) {\n    return `$${(marketCap / 1e12).toFixed(2)}T`;\n  } else if (marketCap >= 1e9) {\n    return `$${(marketCap / 1e9).toFixed(2)}B`;\n  } else if (marketCap >= 1e6) {\n    return `$${(marketCap / 1e6).toFixed(2)}M`;\n  }\n  return `$${marketCap.toFixed(2)}`;\n}\n\nexport function formatCompactNumber(num: number): string {\n  if (isNaN(num) || num === null || num === undefined) {\n    return '0';\n  }\n  \n  if (num >= 1e9) {\n    return `${(num / 1e9).toFixed(1)}B`;\n  } else if (num >= 1e6) {\n    return `${(num / 1e6).toFixed(1)}M`;\n  } else if (num >= 1e3) {\n    return `${(num / 1e3).toFixed(1)}K`;\n  }\n  return num.toString();\n}\n\nexport function getTimeAgo(timestamp: string | Date): string {\n  const now = new Date();\n  const time = new Date(timestamp);\n  \n  if (isNaN(time.getTime())) {\n    return 'Unknown';\n  }\n  \n  const diffInSeconds = Math.floor((now.getTime() - time.getTime()) / 1000);\n  \n  if (diffInSeconds < 60) return `${diffInSeconds}s ago`;\n  if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;\n  if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;\n  return `${Math.floor(diffInSeconds / 86400)}d ago`;\n}\n\nexport function calculatePercentageChange(current: number, previous: number): number {\n  if (previous === 0) return 0;\n  return ((current - previous) / previous) * 100;\n}\n\nexport function formatCurrency(amount: number, currency: string = 'USD'): string {\n  if (isNaN(amount) || amount === null || amount === undefined) {\n    return '0';\n  }\n  \n  // Handle crypto currencies differently\n  if (['BTC', 'ETH', 'SOL', 'ADA'].includes(currency)) {\n    return `${amount.toFixed(8)} ${currency}`;\n  }\n  \n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: currency,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(amount);\n}\n\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n}\n\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean;\n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n}\n\nexport function isValidUrl(string: string): boolean {\n  try {\n    new URL(string);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function truncateText(text: string, maxLength: number): string {\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength) + '...';\n}\n\nexport function generateSparklineData(length: number = 20, trend: 'up' | 'down' | 'flat' = 'up'): number[] {\n  const data: number[] = [];\n  let baseValue = 100;\n  \n  for (let i = 0; i < length; i++) {\n    const randomVariation = (Math.random() - 0.5) * 10;\n    \n    if (trend === 'up') {\n      baseValue += (Math.random() * 2) + randomVariation;\n    } else if (trend === 'down') {\n      baseValue -= (Math.random() * 2) + randomVariation;\n    } else {\n      baseValue += randomVariation;\n    }\n    \n    data.push(Math.max(0, baseValue));\n  }\n  \n  return data;\n}\n\n// Error handling utilities\nexport function getErrorMessage(error: unknown): string {\n  if (error instanceof Error) {\n    return error.message;\n  }\n  if (typeof error === 'string') {\n    return error;\n  }\n  return 'An unknown error occurred';\n}\n\nexport function isNetworkError(error: unknown): boolean {\n  return error instanceof Error && \n    (error.message.includes('fetch') || \n     error.message.includes('network') ||\n     error.message.includes('connection'));\n}\n\n// Local storage utilities with error handling\nexport function getFromStorage<T>(key: string, defaultValue: T): T {\n  try {\n    const item = localStorage.getItem(key);\n    return item ? JSON.parse(item) : defaultValue;\n  } catch (error) {\n    console.warn(`Failed to parse localStorage item \"${key}\":`, error);\n    return defaultValue;\n  }\n}\n\nexport function setToStorage<T>(key: string, value: T): void {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n  } catch (error) {\n    console.warn(`Failed to save to localStorage \"${key}\":`, error);\n  }\n}\n","size_bytes":5551},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    // Handle both single string URLs and array-with-object patterns\n    let url: string;\n    if (typeof queryKey[0] === 'string' && queryKey.length === 1) {\n      // Single string URL (new format)\n      url = queryKey[0];\n    } else {\n      // Array format with potential parameters object\n      const [base, params] = queryKey as [string, Record<string, unknown>?];\n      url = base;\n      \n      if (params && typeof params === 'object') {\n        const searchParams = new URLSearchParams();\n        for (const [key, value] of Object.entries(params)) {\n          if (value === undefined || value === null) continue;\n          searchParams.append(key, Array.isArray(value) ? value.join(',') : String(value));\n        }\n        const queryString = searchParams.toString();\n        if (queryString) {\n          url += (url.includes('?') ? '&' : '?') + queryString;\n        }\n      }\n    }\n\n    const res = await fetch(url, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2248},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useState } from 'react';\nimport Navbar from '@/components/layout/navbar';\nimport ChatAssistant from '@/components/chat/chat-assistant';\nimport MarketOverview from '@/components/markets/market-overview';\nimport TradingChart from '@/components/charts/trading-chart';\nimport NewsDashboard from '@/components/news/news-dashboard';\nimport CalculatorDashboard from '@/components/calculators/calculator-dashboard';\nimport TaxCalculator from '@/components/tax/tax-calculator';\n\nexport type TabType = 'chat' | 'charts' | 'news' | 'calculators' | 'tax';\n\nexport default function Home() {\n  const [activeTab, setActiveTab] = useState<TabType>('chat');\n\n  const renderMainContent = () => {\n    // For the chat tab, show the split layout like in the screenshot\n    if (activeTab === 'chat') {\n      return (\n        <div className=\"grid grid-cols-1 lg:grid-cols-12 gap-3 sm:gap-4 lg:gap-6 h-full animate-in fade-in duration-500\">\n          {/* Chat Assistant - Left Side */}\n          <div className=\"col-span-1 lg:col-span-8\">\n            <ChatAssistant onNavigateToCharts={() => setActiveTab('charts')} />\n          </div>\n          \n          {/* Market Overview - Right Side */}\n          <div className=\"col-span-1 lg:col-span-4\">\n            <MarketOverview onNavigateToCharts={() => setActiveTab('charts')} />\n          </div>\n        </div>\n      );\n    }\n\n    // For other tabs, show full-width content\n    switch (activeTab) {\n      case 'charts':\n        return <div className=\"animate-in fade-in duration-500\"><TradingChart /></div>;\n      case 'news':\n        return <div className=\"animate-in fade-in duration-500\"><NewsDashboard /></div>;\n      case 'calculators':\n        return <div className=\"animate-in fade-in duration-500\"><CalculatorDashboard /></div>;\n      case 'tax':\n        return <div className=\"animate-in fade-in duration-500\"><TaxCalculator /></div>;\n      default:\n        return (\n          <div className=\"grid grid-cols-1 lg:grid-cols-12 gap-3 sm:gap-4 lg:gap-6 h-full animate-in fade-in duration-500\">\n            <div className=\"col-span-1 lg:col-span-8\">\n              <ChatAssistant onNavigateToCharts={() => setActiveTab('charts')} />\n            </div>\n            <div className=\"col-span-1 lg:col-span-4\">\n              <MarketOverview onNavigateToCharts={() => setActiveTab('charts')} />\n            </div>\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <Navbar activeTab={activeTab} onTabChange={setActiveTab} />\n      \n      <main className=\"max-w-7xl mx-auto px-3 sm:px-4 md:px-6 lg:px-8 py-3 sm:py-4 md:py-6 min-h-[calc(100vh-120px)] sm:min-h-[calc(100vh-100px)] md:min-h-[calc(100vh-80px)] transition-all duration-300 ease-in-out\">\n        {renderMainContent()}\n      </main>\n    </div>\n  );\n}","size_bytes":2813},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/calculators/calculator-dashboard.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport ROICalculator from './roi-calculator';\nimport PLCalculator from './pl-calculator';\nimport CompoundCalculator from './compound-calculator';\nimport ConversionCalculator from './conversion-calculator';\n\ntype CalculatorType = 'roi' | 'pl' | 'compound' | 'conversion';\n\nexport default function CalculatorDashboard() {\n  const [activeCalculator, setActiveCalculator] = useState<CalculatorType>('roi');\n\n  const calculators = [\n    { id: 'roi' as CalculatorType, label: 'ROI Calculator', icon: 'fas fa-chart-line' },\n    { id: 'pl' as CalculatorType, label: 'P/L Calculator', icon: 'fas fa-balance-scale' },\n    { id: 'compound' as CalculatorType, label: 'Compound Interest', icon: 'fas fa-piggy-bank' },\n    { id: 'conversion' as CalculatorType, label: 'Crypto Converter', icon: 'fas fa-exchange-alt' },\n  ];\n\n  const renderCalculator = () => {\n    switch (activeCalculator) {\n      case 'roi':\n        return <ROICalculator />;\n      case 'pl':\n        return <PLCalculator />;\n      case 'compound':\n        return <CompoundCalculator />;\n      case 'conversion':\n        return <ConversionCalculator />;\n      default:\n        return <ROICalculator />;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Calculator Tabs */}\n      <div className=\"grid grid-cols-2 lg:flex lg:flex-wrap gap-2\">\n        {calculators.map((calc) => (\n          <Button\n            key={calc.id}\n            variant={activeCalculator === calc.id ? 'default' : 'outline'}\n            onClick={() => setActiveCalculator(calc.id)}\n            data-testid={`calc-tab-${calc.id}`}\n            className={`text-xs sm:text-sm px-2 sm:px-4 py-2 sm:py-3 ${activeCalculator === calc.id ? 'bg-primary/20 text-primary border-primary/30' : ''}`}\n          >\n            <i className={`${calc.icon} mr-1 sm:mr-2 text-xs sm:text-sm`}></i>\n            <span className=\"hidden sm:inline\">{calc.label}</span>\n            <span className=\"sm:hidden\">{calc.label.split(' ')[0]}</span>\n          </Button>\n        ))}\n      </div>\n\n      {/* Calculator Content */}\n      {renderCalculator()}\n\n      {/* Calculator Features */}\n      <div className=\"glass-panel rounded-xl p-4 border border-primary/30\">\n        <p className=\"text-sm text-muted-foreground\">\n          <i className=\"fas fa-calculator text-primary mr-2\"></i>\n          <strong>Professional Tools:</strong> Advanced financial calculators with real-time market data integration. \n          Precision-engineered algorithms provide accurate calculations for investment planning and portfolio analysis. \n          Results include comprehensive breakdowns and scenario modeling for informed decision-making.\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2767},"client/src/components/calculators/compound-calculator.tsx":{"content":"import { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { formatPrice } from '@/lib/api';\n\ninterface CompoundResult {\n  principal: number;\n  annualRate: number;\n  years: number;\n  monthlyContribution: number;\n  compoundFrequency: number;\n  futureValue: number;\n  totalContributions: number;\n  interestEarned: number;\n  effectiveRate: number;\n  yearlyBreakdown: Array<{\n    year: number;\n    value: number;\n    contributions: number;\n    interest: number;\n  }>;\n}\n\nexport default function CompoundCalculator() {\n  const [inputs, setInputs] = useState({\n    principal: '',\n    annualRate: '',\n    timePeriod: '',\n    timeUnit: 'years',\n    compoundFrequency: '12',\n    monthlyContribution: '0',\n  });\n  \n  const [result, setResult] = useState<CompoundResult | null>(null);\n  const { toast } = useToast();\n\n  const calculateMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/calculators/compound', data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setResult(data);\n    },\n    onError: (error) => {\n      toast({\n        title: 'Calculation Error',\n        description: error instanceof Error ? error.message : 'Failed to calculate compound interest',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleInputChange = (field: string, value: string) => {\n    setInputs(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleCalculate = () => {\n    const data = {\n      principal: parseFloat(inputs.principal),\n      annualRate: parseFloat(inputs.annualRate),\n      timePeriod: parseFloat(inputs.timePeriod),\n      timeUnit: inputs.timeUnit,\n      compoundFrequency: parseInt(inputs.compoundFrequency),\n      monthlyContribution: parseFloat(inputs.monthlyContribution),\n    };\n\n    calculateMutation.mutate(data);\n  };\n\n  const isFormValid = inputs.principal && inputs.annualRate && inputs.timePeriod;\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      {/* Input Panel */}\n      <Card className=\"glass-panel rounded-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-xl font-semibold text-foreground\">Compound Interest Calculator</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"principal\" className=\"text-sm font-medium text-foreground mb-2 block\">\n              Principal Amount\n            </Label>\n            <div className=\"relative\">\n              <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">$</span>\n              <Input\n                id=\"principal\"\n                type=\"number\"\n                placeholder=\"10,000\"\n                value={inputs.principal}\n                onChange={(e) => handleInputChange('principal', e.target.value)}\n                className=\"calculator-input pl-8\"\n                data-testid=\"compound-principal\"\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"annual-rate\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                Annual Interest Rate\n              </Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"annual-rate\"\n                  type=\"number\"\n                  placeholder=\"8\"\n                  value={inputs.annualRate}\n                  onChange={(e) => handleInputChange('annualRate', e.target.value)}\n                  className=\"calculator-input pr-8\"\n                  data-testid=\"compound-rate\"\n                />\n                <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">%</span>\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"time-period\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                Time Period\n              </Label>\n              <div className=\"flex space-x-2\">\n                <Input\n                  id=\"time-period\"\n                  type=\"number\"\n                  placeholder=\"5\"\n                  value={inputs.timePeriod}\n                  onChange={(e) => handleInputChange('timePeriod', e.target.value)}\n                  className=\"calculator-input flex-1\"\n                  data-testid=\"compound-time\"\n                />\n                <Select value={inputs.timeUnit} onValueChange={(value) => handleInputChange('timeUnit', value)}>\n                  <SelectTrigger className=\"calculator-input w-24\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"years\">Years</SelectItem>\n                    <SelectItem value=\"months\">Months</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"compound-frequency\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                Compound Frequency\n              </Label>\n              <Select value={inputs.compoundFrequency} onValueChange={(value) => handleInputChange('compoundFrequency', value)}>\n                <SelectTrigger className=\"calculator-input\" id=\"compound-frequency\" data-testid=\"compound-frequency\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"12\">Monthly</SelectItem>\n                  <SelectItem value=\"4\">Quarterly</SelectItem>\n                  <SelectItem value=\"1\">Annually</SelectItem>\n                  <SelectItem value=\"365\">Daily</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"monthly-contribution\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                Monthly Contribution\n              </Label>\n              <div className=\"relative\">\n                <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">$</span>\n                <Input\n                  id=\"monthly-contribution\"\n                  type=\"number\"\n                  placeholder=\"500\"\n                  value={inputs.monthlyContribution}\n                  onChange={(e) => handleInputChange('monthlyContribution', e.target.value)}\n                  className=\"calculator-input pl-8\"\n                  data-testid=\"compound-contribution\"\n                />\n              </div>\n            </div>\n          </div>\n\n          <Button\n            onClick={handleCalculate}\n            disabled={!isFormValid || calculateMutation.isPending}\n            className=\"w-full bg-primary hover:bg-primary/80 text-primary-foreground py-3 rounded-lg font-medium neon-glow transition-all\"\n            data-testid=\"compound-calculate\"\n          >\n            {calculateMutation.isPending ? 'Calculating...' : 'Calculate Compound Growth'}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Results Panel */}\n      <Card className=\"glass-panel rounded-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold text-foreground\">Projection Results</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {result ? (\n            <div className=\"space-y-6\">\n              <div className=\"text-center p-6 glass-panel rounded-lg neon-glow\">\n                <div className=\"text-3xl font-bold gradient-text\">{formatPrice(result.futureValue)}</div>\n                <div className=\"text-sm text-muted-foreground mt-2\">Final Amount</div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center p-4 glass-panel rounded-lg\">\n                  <div className=\"text-xl font-bold text-primary\">{formatPrice(result.totalContributions)}</div>\n                  <div className=\"text-xs text-muted-foreground mt-1\">Total Contributions</div>\n                </div>\n                <div className=\"text-center p-4 glass-panel rounded-lg\">\n                  <div className=\"text-xl font-bold text-green-400\">{formatPrice(result.interestEarned)}</div>\n                  <div className=\"text-xs text-muted-foreground mt-1\">Interest Earned</div>\n                </div>\n              </div>\n\n              {/* Growth Chart Placeholder */}\n              <div className=\"h-40 glass-panel rounded-lg p-4 relative\">\n                <div className=\"text-sm font-medium text-foreground mb-2\">Growth Over Time</div>\n                <svg className=\"w-full h-full\" viewBox=\"0 0 300 120\">\n                  <path \n                    className=\"sparkline\" \n                    d=\"M10,100 Q75,90 150,70 Q225,50 290,30\" \n                    strokeWidth=\"3\"\n                  />\n                  <circle cx=\"290\" cy=\"30\" r=\"4\" fill=\"var(--primary)\" />\n                </svg>\n                <div className=\"absolute bottom-2 left-4 text-xs text-muted-foreground\">Start</div>\n                <div className=\"absolute bottom-2 right-4 text-xs text-muted-foreground\">\n                  Year {result.years}\n                </div>\n              </div>\n\n              {/* Yearly Breakdown */}\n              {result.yearlyBreakdown && result.yearlyBreakdown.length > 0 && (\n                <div className=\"space-y-2\">\n                  <h4 className=\"text-sm font-medium text-foreground\">Year-by-Year Breakdown</h4>\n                  <div className=\"space-y-1 text-sm max-h-32 overflow-y-auto\">\n                    {result.yearlyBreakdown.slice(0, 5).map((year) => (\n                      <div key={year.year} className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Year {year.year}:</span>\n                        <span className=\"text-foreground\">{formatPrice(year.value)}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <i className=\"fas fa-piggy-bank text-4xl text-muted-foreground mb-4\"></i>\n              <p className=\"text-muted-foreground\">\n                Enter investment details to see compound growth projection\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10861},"client/src/components/calculators/conversion-calculator.tsx":{"content":"import { useState } from 'react';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { formatPrice } from '@/lib/api';\n\ninterface ConversionResult {\n  fromCurrency: string;\n  toCurrency: string;\n  amount: number;\n  convertedAmount: number;\n  exchangeRate: number;\n  rates: Record<string, number>;\n}\n\nexport default function ConversionCalculator() {\n  const [inputs, setInputs] = useState({\n    amount: '1',\n    fromCurrency: 'BTC',\n    toCurrency: 'USD',\n  });\n  \n  const [result, setResult] = useState<ConversionResult | null>(null);\n  const { toast } = useToast();\n\n  // Fetch live rates for display\n  const { data: marketData } = useQuery<any[]>({\n    queryKey: [`/api/markets/snapshot?kind=crypto&symbols=BTC,ETH,SOL,ADA`],\n    refetchInterval: 15000,\n  });\n\n  const convertMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/calculators/convert', data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setResult(data);\n    },\n    onError: (error) => {\n      toast({\n        title: 'Conversion Error',\n        description: error instanceof Error ? error.message : 'Failed to convert currency',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const currencies = [\n    { symbol: 'USD', name: 'US Dollar' },\n    { symbol: 'EUR', name: 'Euro' },\n    { symbol: 'BTC', name: 'Bitcoin' },\n    { symbol: 'ETH', name: 'Ethereum' },\n    { symbol: 'SOL', name: 'Solana' },\n    { symbol: 'ADA', name: 'Cardano' },\n  ];\n\n  const handleInputChange = (field: string, value: string) => {\n    setInputs(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSwap = () => {\n    setInputs(prev => ({\n      ...prev,\n      fromCurrency: prev.toCurrency,\n      toCurrency: prev.fromCurrency,\n    }));\n    setResult(null);\n  };\n\n  const handleConvert = () => {\n    const data = {\n      amount: parseFloat(inputs.amount),\n      fromCurrency: inputs.fromCurrency,\n      toCurrency: inputs.toCurrency,\n    };\n\n    convertMutation.mutate(data);\n  };\n\n  const handleQuickAmount = (amount: string) => {\n    setInputs(prev => ({ ...prev, amount }));\n  };\n\n  const isFormValid = inputs.amount && inputs.fromCurrency && inputs.toCurrency;\n\n  return (\n    <Card className=\"glass-panel rounded-xl max-w-2xl mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"text-xl font-semibold text-foreground text-center\">\n          Cryptocurrency Converter\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* From Currency */}\n        <div>\n          <Label className=\"text-sm font-medium text-foreground mb-2 block\">From</Label>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Input\n              type=\"number\"\n              placeholder=\"1.0\"\n              value={inputs.amount}\n              onChange={(e) => handleInputChange('amount', e.target.value)}\n              className=\"calculator-input text-lg font-medium\"\n              data-testid=\"conversion-amount\"\n            />\n            <Select value={inputs.fromCurrency} onValueChange={(value) => handleInputChange('fromCurrency', value)}>\n              <SelectTrigger className=\"calculator-input\" data-testid=\"conversion-from-currency\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {currencies.map((currency) => (\n                  <SelectItem key={currency.symbol} value={currency.symbol}>\n                    {currency.name} ({currency.symbol})\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Swap Button */}\n        <div className=\"flex justify-center\">\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            onClick={handleSwap}\n            className=\"w-12 h-12 glass-panel rounded-full hover:neon-glow transition-all\"\n            data-testid=\"conversion-swap\"\n          >\n            <i className=\"fas fa-exchange-alt text-primary\"></i>\n          </Button>\n        </div>\n\n        {/* To Currency */}\n        <div>\n          <Label className=\"text-sm font-medium text-foreground mb-2 block\">To</Label>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Input\n              type=\"number\"\n              placeholder=\"Result\"\n              value={result ? result.convertedAmount.toFixed(8) : ''}\n              className=\"calculator-input text-lg font-medium\"\n              readOnly\n              data-testid=\"conversion-result\"\n            />\n            <Select value={inputs.toCurrency} onValueChange={(value) => handleInputChange('toCurrency', value)}>\n              <SelectTrigger className=\"calculator-input\" data-testid=\"conversion-to-currency\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {currencies.map((currency) => (\n                  <SelectItem key={currency.symbol} value={currency.symbol}>\n                    {currency.name} ({currency.symbol})\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Convert Button */}\n        <Button\n          onClick={handleConvert}\n          disabled={!isFormValid || convertMutation.isPending}\n          className=\"w-full bg-primary hover:bg-primary/80 text-primary-foreground py-3 rounded-lg font-medium neon-glow transition-all\"\n          data-testid=\"conversion-convert\"\n        >\n          {convertMutation.isPending ? 'Converting...' : 'Convert'}\n        </Button>\n\n        {/* Live Rates */}\n        <div className=\"glass-panel rounded-lg p-4\">\n          <h3 className=\"text-sm font-medium text-foreground mb-3\">Live Exchange Rates</h3>\n          <div className=\"space-y-2 text-sm\">\n            {marketData && Array.isArray(marketData) && marketData.slice(0, 4).map((asset: any) => (\n              <div key={asset.symbol} className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">1 {asset.symbol}</span>\n                <span className=\"text-foreground\">{formatPrice(asset.price)}</span>\n              </div>\n            ))}\n          </div>\n          <div className=\"mt-3 text-xs text-muted-foreground flex items-center\">\n            <div className=\"w-2 h-2 bg-green-400 rounded-full mr-2 pulse-dot\"></div>\n            Updated in real-time\n          </div>\n        </div>\n\n        {/* Quick Convert Buttons */}\n        <div className=\"grid grid-cols-4 gap-2\">\n          {['100', '500', '1000', '10000'].map((amount) => (\n            <Button\n              key={amount}\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handleQuickAmount(amount)}\n              className=\"glass-panel hover:bg-accent/10 transition-all\"\n              data-testid={`quick-amount-${amount}`}\n            >\n              ${amount}\n            </Button>\n          ))}\n        </div>\n\n        {/* Exchange Rate Display */}\n        {result && (\n          <div className=\"glass-panel rounded-lg p-4 text-center\">\n            <div className=\"text-sm text-muted-foreground mb-1\">Exchange Rate</div>\n            <div className=\"text-lg font-medium text-foreground\">\n              1 {result.fromCurrency} = {result.exchangeRate.toFixed(8)} {result.toCurrency}\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7840},"client/src/components/calculators/pl-calculator.tsx":{"content":"import { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { formatPrice, formatPercentage } from '@/lib/api';\n\ninterface PLResult {\n  entryPrice: number;\n  exitPrice: number;\n  quantity: number;\n  grossPnL: number;\n  totalFees: number;\n  netPnL: number;\n  roi: number;\n  positionType: string;\n  isProfit: boolean;\n}\n\nexport default function PLCalculator() {\n  const [inputs, setInputs] = useState({\n    entryPrice: '',\n    exitPrice: '',\n    quantity: '',\n    fees: '0.1',\n    positionType: 'long',\n  });\n  \n  const [result, setResult] = useState<PLResult | null>(null);\n  const { toast } = useToast();\n\n  const calculateMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/calculators/pl', data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setResult(data);\n    },\n    onError: (error) => {\n      toast({\n        title: 'Calculation Error',\n        description: error instanceof Error ? error.message : 'Failed to calculate P/L',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleInputChange = (field: string, value: string) => {\n    setInputs(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleCalculate = () => {\n    const data = {\n      entryPrice: parseFloat(inputs.entryPrice),\n      exitPrice: parseFloat(inputs.exitPrice),\n      quantity: parseFloat(inputs.quantity),\n      fees: parseFloat(inputs.fees),\n      positionType: inputs.positionType === 'long' ? 1 : -1,\n    };\n\n    calculateMutation.mutate(data);\n  };\n\n  const isFormValid = inputs.entryPrice && inputs.exitPrice && inputs.quantity;\n\n  return (\n    <div className=\"glass-panel rounded-xl p-6\">\n      <h2 className=\"text-xl font-semibold mb-6 text-foreground\">Profit/Loss Calculator</h2>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        {/* Entry Position */}\n        <div className=\"space-y-4\">\n          <h3 className=\"font-medium text-foreground\">Entry Position</h3>\n          <div>\n            <Label htmlFor=\"entry-price\" className=\"text-sm font-medium text-foreground mb-2 block\">\n              Entry Price\n            </Label>\n            <Input\n              id=\"entry-price\"\n              type=\"number\"\n              placeholder=\"41,500\"\n              value={inputs.entryPrice}\n              onChange={(e) => handleInputChange('entryPrice', e.target.value)}\n              className=\"calculator-input\"\n              data-testid=\"pl-entry-price\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"quantity\" className=\"text-sm font-medium text-foreground mb-2 block\">\n              Quantity\n            </Label>\n            <Input\n              id=\"quantity\"\n              type=\"number\"\n              placeholder=\"0.25\"\n              value={inputs.quantity}\n              onChange={(e) => handleInputChange('quantity', e.target.value)}\n              className=\"calculator-input\"\n              data-testid=\"pl-quantity\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"position-type\" className=\"text-sm font-medium text-foreground mb-2 block\">\n              Position Type\n            </Label>\n            <Select value={inputs.positionType} onValueChange={(value) => handleInputChange('positionType', value)}>\n              <SelectTrigger className=\"calculator-input\" id=\"position-type\" data-testid=\"pl-position-type\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"long\">Long</SelectItem>\n                <SelectItem value=\"short\">Short</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Exit Position */}\n        <div className=\"space-y-4\">\n          <h3 className=\"font-medium text-foreground\">Exit Position</h3>\n          <div>\n            <Label htmlFor=\"exit-price\" className=\"text-sm font-medium text-foreground mb-2 block\">\n              Exit Price\n            </Label>\n            <Input\n              id=\"exit-price\"\n              type=\"number\"\n              placeholder=\"43,247\"\n              value={inputs.exitPrice}\n              onChange={(e) => handleInputChange('exitPrice', e.target.value)}\n              className=\"calculator-input\"\n              data-testid=\"pl-exit-price\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"fees\" className=\"text-sm font-medium text-foreground mb-2 block\">\n              Trading Fees (%)\n            </Label>\n            <Input\n              id=\"fees\"\n              type=\"number\"\n              placeholder=\"0.1\"\n              value={inputs.fees}\n              onChange={(e) => handleInputChange('fees', e.target.value)}\n              className=\"calculator-input\"\n              data-testid=\"pl-fees\"\n            />\n          </div>\n          <Button\n            onClick={handleCalculate}\n            disabled={!isFormValid || calculateMutation.isPending}\n            className=\"w-full bg-primary hover:bg-primary/80 text-primary-foreground py-3 rounded-lg font-medium neon-glow transition-all mt-6\"\n            data-testid=\"pl-calculate\"\n          >\n            {calculateMutation.isPending ? 'Calculating...' : 'Calculate P/L'}\n          </Button>\n        </div>\n\n        {/* Results */}\n        <div className=\"space-y-4\">\n          <h3 className=\"font-medium text-foreground\">Results</h3>\n          {result ? (\n            <div className=\"space-y-3\">\n              <div className=\"p-4 glass-panel rounded-lg text-center\">\n                <div className={`text-xl font-bold ${result.isProfit ? 'text-green-400' : 'text-red-400'}`}>\n                  {formatPrice(result.netPnL)}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Net Profit/Loss</div>\n              </div>\n              <div className=\"p-3 glass-panel rounded-lg\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Gross P/L:</span>\n                  <span className={result.grossPnL >= 0 ? 'text-green-400' : 'text-red-400'}>\n                    {formatPrice(result.grossPnL)}\n                  </span>\n                </div>\n              </div>\n              <div className=\"p-3 glass-panel rounded-lg\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Total Fees:</span>\n                  <span className=\"text-red-400\">-{formatPrice(result.totalFees)}</span>\n                </div>\n              </div>\n              <div className=\"p-3 glass-panel rounded-lg\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">ROI:</span>\n                  <span className={result.roi >= 0 ? 'text-green-400' : 'text-red-400'}>\n                    {formatPercentage(result.roi)}\n                  </span>\n                </div>\n              </div>\n              <div className=\"p-3 glass-panel rounded-lg\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Position:</span>\n                  <span className=\"text-foreground\">{result.positionType}</span>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <i className=\"fas fa-balance-scale text-3xl text-muted-foreground mb-3\"></i>\n              <p className=\"text-sm text-muted-foreground\">\n                Enter position details to calculate P/L\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8116},"client/src/components/calculators/roi-calculator.tsx":{"content":"import { useState } from 'react';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { formatPrice, formatPercentage } from '@/lib/api';\n\ninterface ROIResult {\n  initialInvestment: number;\n  currentValue: number;\n  absoluteGain: number;\n  percentageGain: number;\n  annualizedReturn: number;\n  holdingPeriod: number;\n  isProfit: boolean;\n}\n\nexport default function ROICalculator() {\n  const [inputs, setInputs] = useState({\n    asset: 'BTC',\n    initialInvestment: '',\n    currentValue: '',\n    purchaseDate: '',\n  });\n  \n  const [result, setResult] = useState<ROIResult | null>(null);\n  const { toast } = useToast();\n\n  // Fetch current prices for asset selection\n  const { data: marketData } = useQuery<any[]>({\n    queryKey: [`/api/markets/snapshot?kind=crypto&symbols=BTC,ETH,SOL,ADA`],\n    refetchInterval: 30000,\n  });\n\n  const calculateMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/calculators/roi', data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setResult(data);\n    },\n    onError: (error) => {\n      toast({\n        title: 'Calculation Error',\n        description: error instanceof Error ? error.message : 'Failed to calculate ROI',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleInputChange = (field: string, value: string) => {\n    setInputs(prev => ({ ...prev, [field]: value }));\n    \n    // Auto-fill current value if asset price is available\n    if (field === 'asset' && marketData) {\n      const selectedAsset = marketData.find((item: any) => item.symbol === value);\n      if (selectedAsset && inputs.initialInvestment) {\n        const quantity = parseFloat(inputs.initialInvestment) / selectedAsset.price;\n        setInputs(prev => ({ \n          ...prev, \n          currentValue: (quantity * selectedAsset.price).toString()\n        }));\n      }\n    }\n  };\n\n  const handleCalculate = () => {\n    const data = {\n      initialInvestment: parseFloat(inputs.initialInvestment),\n      currentValue: parseFloat(inputs.currentValue),\n      purchaseDate: inputs.purchaseDate ? new Date(inputs.purchaseDate).getTime() : undefined,\n    };\n\n    calculateMutation.mutate(data);\n  };\n\n  const isFormValid = inputs.initialInvestment && inputs.currentValue;\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      {/* Input Panel */}\n      <Card className=\"glass-panel rounded-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-xl font-semibold text-foreground\">ROI Calculator</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"asset\" className=\"text-sm font-medium text-foreground mb-2 block\">\n              Asset Selection\n            </Label>\n            <Select value={inputs.asset} onValueChange={(value) => handleInputChange('asset', value)}>\n              <SelectTrigger className=\"calculator-input\" id=\"asset\" data-testid=\"roi-asset-select\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {marketData && Array.isArray(marketData) && marketData.map((asset: any) => (\n                  <SelectItem key={asset.symbol} value={asset.symbol}>\n                    {asset.name} ({asset.symbol}) - {formatPrice(asset.price)}\n                  </SelectItem>\n                ))}\n                <SelectItem value=\"custom\">Custom Amount</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"initial\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                Initial Investment\n              </Label>\n              <div className=\"relative\">\n                <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">$</span>\n                <Input\n                  id=\"initial\"\n                  type=\"number\"\n                  placeholder=\"10,000\"\n                  value={inputs.initialInvestment}\n                  onChange={(e) => handleInputChange('initialInvestment', e.target.value)}\n                  className=\"calculator-input pl-8\"\n                  data-testid=\"roi-initial-investment\"\n                />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"current\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                Current Value\n              </Label>\n              <div className=\"relative\">\n                <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">$</span>\n                <Input\n                  id=\"current\"\n                  type=\"number\"\n                  placeholder=\"12,500\"\n                  value={inputs.currentValue}\n                  onChange={(e) => handleInputChange('currentValue', e.target.value)}\n                  className=\"calculator-input pl-8\"\n                  data-testid=\"roi-current-value\"\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"purchase-date\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                Purchase Date\n              </Label>\n              <Input\n                id=\"purchase-date\"\n                type=\"date\"\n                value={inputs.purchaseDate}\n                onChange={(e) => handleInputChange('purchaseDate', e.target.value)}\n                className=\"calculator-input\"\n                data-testid=\"roi-purchase-date\"\n              />\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-foreground mb-2 block\">\n                Holding Period\n              </Label>\n              <Input\n                type=\"text\"\n                placeholder=\"Auto-calculated\"\n                className=\"calculator-input\"\n                readOnly\n                value={\n                  inputs.purchaseDate && result\n                    ? `${result.holdingPeriod} days`\n                    : ''\n                }\n              />\n            </div>\n          </div>\n\n          <Button\n            onClick={handleCalculate}\n            disabled={!isFormValid || calculateMutation.isPending}\n            className=\"w-full bg-primary hover:bg-primary/80 text-primary-foreground py-3 rounded-lg font-medium neon-glow transition-all\"\n            data-testid=\"roi-calculate\"\n          >\n            <i className=\"fas fa-calculator mr-2\"></i>\n            {calculateMutation.isPending ? 'Calculating...' : 'Calculate ROI'}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Results Panel */}\n      <Card className=\"glass-panel rounded-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold text-foreground\">Results</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {result ? (\n            <div className=\"space-y-6\">\n              {/* Key Metrics */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center p-4 glass-panel rounded-lg\">\n                  <div className={`text-2xl font-bold ${result.isProfit ? 'text-green-400' : 'text-red-400'}`}>\n                    {result.isProfit ? '+' : ''}{formatPercentage(result.percentageGain)}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground mt-1\">Total ROI</div>\n                </div>\n                <div className=\"text-center p-4 glass-panel rounded-lg\">\n                  <div className={`text-2xl font-bold ${result.isProfit ? 'text-green-400' : 'text-red-400'}`}>\n                    {formatPrice(result.absoluteGain)}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground mt-1\">Profit/Loss</div>\n                </div>\n              </div>\n\n              {/* Detailed Breakdown */}\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between items-center py-2 border-b border-border\">\n                  <span className=\"text-muted-foreground\">Initial Investment</span>\n                  <span className=\"font-medium text-foreground\">{formatPrice(result.initialInvestment)}</span>\n                </div>\n                <div className=\"flex justify-between items-center py-2 border-b border-border\">\n                  <span className=\"text-muted-foreground\">Current Value</span>\n                  <span className=\"font-medium text-foreground\">{formatPrice(result.currentValue)}</span>\n                </div>\n                <div className=\"flex justify-between items-center py-2 border-b border-border\">\n                  <span className=\"text-muted-foreground\">Absolute Gain</span>\n                  <span className={`font-medium ${result.isProfit ? 'text-green-400' : 'text-red-400'}`}>\n                    {result.isProfit ? '+' : ''}{formatPrice(result.absoluteGain)}\n                  </span>\n                </div>\n                {result.annualizedReturn !== 0 && (\n                  <div className=\"flex justify-between items-center py-2 border-b border-border\">\n                    <span className=\"text-muted-foreground\">Annualized Return</span>\n                    <span className={`font-medium ${result.annualizedReturn >= 0 ? 'text-green-400' : 'text-red-400'}`}>\n                      {formatPercentage(result.annualizedReturn)}\n                    </span>\n                  </div>\n                )}\n                <div className=\"flex justify-between items-center py-2\">\n                  <span className=\"text-muted-foreground\">Holding Period</span>\n                  <span className=\"font-medium text-foreground\">{result.holdingPeriod} days</span>\n                </div>\n              </div>\n\n              {/* Quick Actions */}\n              <div className=\"space-y-2\">\n                <button className=\"w-full text-left p-3 glass-panel rounded-lg hover:bg-accent/10 transition-all\">\n                  <i className=\"fas fa-share mr-2 text-primary\"></i>\n                  <span className=\"text-sm\">Share Results</span>\n                </button>\n                <button className=\"w-full text-left p-3 glass-panel rounded-lg hover:bg-accent/10 transition-all\">\n                  <i className=\"fas fa-download mr-2 text-primary\"></i>\n                  <span className=\"text-sm\">Export to CSV</span>\n                </button>\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <i className=\"fas fa-calculator text-4xl text-muted-foreground mb-4\"></i>\n              <p className=\"text-muted-foreground\">\n                Enter your investment details to calculate ROI\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11283},"client/src/components/charts/trading-chart.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { formatPrice, formatPercentage } from '@/lib/api';\n\ninterface ChartData {\n  timestamp: number;\n  close: number;\n  open?: number;\n  high?: number;\n  low?: number;\n  volume?: number;\n}\n\ninterface MarketData {\n  symbol: string;\n  name: string;\n  price: number;\n  change24h?: number;\n  volume?: number;\n}\n\nexport default function TradingChart() {\n  const [selectedSymbol, setSelectedSymbol] = useState('BTC');\n  const [selectedRange, setSelectedRange] = useState('1d');\n  const [selectedKind, setSelectedKind] = useState<'crypto' | 'stock'>('crypto');\n  const [compareSymbols, setCompareSymbols] = useState<string[]>([]);\n  const [isVolumeLoading, setIsVolumeLoading] = useState(false);\n  const [volumeError, setVolumeError] = useState<string | null>(null);\n  const chartContainerRef = useRef<HTMLDivElement>(null);\n\n  const symbols = selectedKind === 'crypto' \n    ? ['BTC', 'ETH', 'SOL', 'ADA', 'DOT', 'MATIC']\n    : ['AAPL', 'GOOGL', 'MSFT', 'AMZN', 'TSLA', 'META'];\n\n  const ranges = [\n    { id: '1m', label: '1M' },\n    { id: '5m', label: '5M' },\n    { id: '1h', label: '1H' },\n    { id: '1d', label: '1D' },\n    { id: '1w', label: '1W' },\n  ];\n\n  // Fetch current price data with optimized caching\n  const { data: marketData } = useQuery({\n    queryKey: [`/api/markets/snapshot?kind=${selectedKind}&symbols=${selectedSymbol}`],\n    refetchInterval: 15000,\n    staleTime: 10000, // Consider data fresh for 10 seconds\n    retry: 0, // Don't retry failed requests to avoid long waits\n    refetchOnWindowFocus: false, // Don't refetch when user returns to tab\n  });\n\n  // Fetch chart history data with optimized caching  \n  const { data: chartData, isLoading, isFetching } = useQuery({\n    queryKey: [`/api/markets/history?kind=${selectedKind}&symbol=${selectedSymbol}&range=${selectedRange}`],\n    refetchInterval: 30000,\n    staleTime: 300000, // Consider history data fresh for 5 minutes\n    retry: 0, // Don't retry failed requests\n    refetchOnWindowFocus: false, // Don't refetch when user returns to tab\n  });\n\n  // Fetch compare data for overlay symbols\n  const { data: compareData } = useQuery({\n    queryKey: [`/api/markets/history?kind=${selectedKind}&symbol=${compareSymbols.join(',')}&range=${selectedRange}`],\n    enabled: compareSymbols.length > 0,\n    refetchInterval: 30000,\n    staleTime: 300000,\n    retry: 0,\n    refetchOnWindowFocus: false,\n  });\n\n  const currentData = (Array.isArray(marketData) && marketData.length > 0) ? marketData[0] as MarketData : undefined;\n\n  // Update selected symbol when switching between crypto/stock to prevent dropdown from disappearing\n  useEffect(() => {\n    if (!symbols.includes(selectedSymbol)) {\n      setSelectedSymbol(symbols[0]);\n    }\n    // Clear compare symbols when switching between crypto/stock\n    setCompareSymbols([]);\n  }, [selectedKind, symbols, selectedSymbol]);\n\n  // Handle volume loading states\n  useEffect(() => {\n    if (isFetching) {\n      setIsVolumeLoading(true);\n      setVolumeError(null);\n    } else {\n      setIsVolumeLoading(false);\n      if (!currentData) {\n        setVolumeError('Unable to fetch market data');\n      } else if (!currentData.volume) {\n        setVolumeError('Volume data not available');\n      } else {\n        setVolumeError(null);\n      }\n    }\n  }, [isFetching, currentData]);\n\n  useEffect(() => {\n    if (chartData && Array.isArray(chartData) && chartContainerRef.current) {\n      renderChart(chartData, compareData);\n    }\n  }, [chartData, compareData, selectedRange, selectedKind, selectedSymbol]);\n\n  // Functions for compare functionality\n  const addCompareSymbol = (symbol: string) => {\n    if (!compareSymbols.includes(symbol) && compareSymbols.length < 2) {\n      setCompareSymbols([...compareSymbols, symbol]);\n    }\n  };\n\n  const removeCompareSymbol = (symbol: string) => {\n    setCompareSymbols(compareSymbols.filter(s => s !== symbol));\n  };\n\n  const renderChart = (data: ChartData[], compareData?: any) => {\n    const container = chartContainerRef.current;\n    if (!container) return;\n\n    // Clear previous chart with smooth transition\n    container.innerHTML = '';\n    \n    // Handle empty data case with better messaging\n    if (!data.length) {\n      const messageDiv = document.createElement('div');\n      messageDiv.className = 'flex items-center justify-center h-full text-muted-foreground';\n      messageDiv.innerHTML = `\n        <div class=\"text-center\">\n          <i class=\"fas fa-chart-line text-2xl mb-2 opacity-50\"></i>\n          <p class=\"font-medium\">Chart data loading...</p>\n          <p class=\"text-sm opacity-70\">Data will appear shortly</p>\n        </div>\n      `;\n      container.appendChild(messageDiv);\n      return;\n    }\n\n    // Create SVG\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('viewBox', '0 0 800 400');\n    svg.setAttribute('class', 'w-full h-full');\n\n    // Calculate bounds\n    const prices = data.map(d => d.close);\n    const minPrice = Math.min(...prices);\n    const maxPrice = Math.max(...prices);\n    const priceRange = maxPrice - minPrice;\n    \n    // Add some padding\n    const paddedMin = minPrice - priceRange * 0.1;\n    const paddedMax = maxPrice + priceRange * 0.1;\n    const paddedRange = paddedMax - paddedMin;\n\n    // Create grid lines\n    const gridGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n    gridGroup.setAttribute('opacity', '0.2');\n    \n    // Horizontal grid lines\n    for (let i = 0; i <= 4; i++) {\n      const y = (i / 4) * 360 + 20;\n      const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n      line.setAttribute('x1', '60');\n      line.setAttribute('y1', y.toString());\n      line.setAttribute('x2', '780');\n      line.setAttribute('y2', y.toString());\n      line.setAttribute('stroke', 'var(--border)');\n      line.setAttribute('stroke-width', '0.5');\n      gridGroup.appendChild(line);\n    }\n\n    // Vertical grid lines\n    for (let i = 0; i <= 5; i++) {\n      const x = (i / 5) * 720 + 60;\n      const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n      line.setAttribute('x1', x.toString());\n      line.setAttribute('y1', '20');\n      line.setAttribute('x2', x.toString());\n      line.setAttribute('y2', '380');\n      line.setAttribute('stroke', 'var(--border)');\n      line.setAttribute('stroke-width', '0.5');\n      gridGroup.appendChild(line);\n    }\n\n    svg.appendChild(gridGroup);\n\n    // Create price line\n    const pathData = data.map((point, index) => {\n      const x = 60 + (index / (data.length - 1)) * 720;\n      const y = 380 - ((point.close - paddedMin) / paddedRange) * 360;\n      return index === 0 ? `M${x},${y}` : `L${x},${y}`;\n    }).join(' ');\n\n    const pricePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    pricePath.setAttribute('d', pathData);\n    pricePath.setAttribute('stroke', 'var(--primary)');\n    pricePath.setAttribute('stroke-width', '3');\n    pricePath.setAttribute('fill', 'none');\n    // Remove heavy glow effect for cleaner professional look\n    \n    svg.appendChild(pricePath);\n\n    // Add price labels\n    const labelGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n    for (let i = 0; i <= 4; i++) {\n      const price = paddedMax - (i / 4) * paddedRange;\n      const y = (i / 4) * 360 + 25;\n      \n      const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      text.setAttribute('x', '50');\n      text.setAttribute('y', y.toString());\n      text.setAttribute('text-anchor', 'end');\n      text.setAttribute('class', 'text-xs text-muted-foreground');\n      text.setAttribute('fill', 'var(--muted-foreground)');\n      text.textContent = formatPrice(price);\n      labelGroup.appendChild(text);\n    }\n    svg.appendChild(labelGroup);\n\n    container.appendChild(svg);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Chart Controls */}\n      <div className=\"glass-panel rounded-xl p-3 sm:p-4 lg:p-6\">\n        <div className=\"flex flex-col space-y-3 sm:space-y-4\">\n          {/* Top Row: Category Toggle and Symbol Select */}\n          <div className=\"flex flex-col space-y-3 sm:flex-row sm:items-center sm:space-y-0 sm:space-x-3 lg:space-x-4\">\n            {/* Category Toggle */}\n            <div className=\"flex bg-muted/30 rounded-lg p-0.5 sm:p-1 border border-primary/30 shadow-sm\">\n              <button\n                onClick={() => setSelectedKind('crypto')}\n                className={`px-3 py-2 sm:px-4 sm:py-2.5 lg:px-5 lg:py-3 rounded-md text-xs sm:text-sm font-semibold transition-all duration-300 flex-1 sm:flex-none ${\n                  selectedKind === 'crypto'\n                    ? 'bg-primary/20 text-primary shadow-lg border-2 border-primary/60 font-bold'\n                    : 'text-foreground hover:text-primary hover:bg-primary/10 border border-transparent'\n                }`}\n                data-testid=\"crypto-toggle\"\n              >\n                <i className=\"fas fa-coins mr-1 sm:mr-2 text-xs sm:text-sm\"></i>\n                Crypto\n              </button>\n              <button\n                onClick={() => setSelectedKind('stock')}\n                className={`px-3 py-2 sm:px-4 sm:py-2.5 lg:px-5 lg:py-3 rounded-md text-xs sm:text-sm font-semibold transition-all duration-300 flex-1 sm:flex-none ${\n                  selectedKind === 'stock'\n                    ? 'bg-primary/20 text-primary shadow-lg border-2 border-primary/60 font-bold'\n                    : 'text-foreground hover:text-primary hover:bg-primary/10 border border-transparent'\n                }`}\n                data-testid=\"stock-toggle\"\n              >\n                <i className=\"fas fa-chart-line mr-1 sm:mr-2 text-xs sm:text-sm\"></i>\n                Stocks\n              </button>\n            </div>\n            \n            <Select value={selectedSymbol} onValueChange={setSelectedSymbol}>\n              <SelectTrigger className=\"w-full sm:w-32 lg:w-48 bg-white dark:bg-gray-900 border-2 border-primary/50 hover:border-primary text-black dark:text-white font-semibold shadow-sm text-sm\">\n                <SelectValue className=\"font-semibold text-black dark:text-white\" placeholder=\"Select Symbol\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-white dark:bg-gray-900 border-2 border-primary/50 shadow-lg max-h-60 overflow-y-auto\">\n                {symbols.map(symbol => (\n                  <SelectItem key={symbol} value={symbol} className=\"text-black hover:bg-primary/15 focus:bg-primary/20 font-semibold py-2\">\n                    {symbol}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Price Display */}\n          <div className=\"flex items-center justify-center sm:justify-start space-x-2 sm:space-x-3\">\n            {currentData ? (\n              <>\n                <div className=\"text-lg sm:text-xl lg:text-2xl font-bold text-foreground\" data-testid=\"chart-price\">\n                  {formatPrice(currentData.price)}\n                </div>\n                {currentData.change24h !== undefined && (\n                  <div \n                    className={`font-medium px-2 py-1 rounded-full text-xs sm:text-sm ${\n                      currentData.change24h >= 0 \n                        ? 'text-green-400 bg-green-400/20' \n                        : 'text-red-400 bg-red-400/20'\n                    }`}\n                    data-testid=\"chart-change\"\n                  >\n                    {formatPercentage(currentData.change24h)}\n                  </div>\n                )}\n              </>\n            ) : (\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-20 sm:w-24 h-6 sm:h-8 bg-muted/50 rounded-md animate-pulse\"></div>\n                <div className=\"w-12 sm:w-16 h-5 sm:h-6 bg-muted/30 rounded-md animate-pulse\"></div>\n              </div>\n            )}\n          </div>\n\n          {/* Time Range Buttons */}\n          <div className=\"flex justify-center\">\n            <div className=\"flex space-x-0.5 sm:space-x-1 bg-muted/30 rounded-lg p-0.5 sm:p-1 border border-primary/30 shadow-sm overflow-x-auto max-w-full\">\n              {ranges.map((range) => (\n                <Button\n                  key={range.id}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setSelectedRange(range.id)}\n                  className={`px-2 py-1.5 sm:px-3 sm:py-2 lg:px-4 lg:py-2 font-medium text-xs sm:text-sm whitespace-nowrap flex-shrink-0 ${\n                    selectedRange === range.id\n                      ? 'bg-primary/20 text-primary shadow-lg border-2 border-primary/60 font-bold'\n                      : 'text-foreground hover:text-primary hover:bg-primary/15 border border-transparent'\n                  }`}\n                  data-testid={`range-${range.id}`}\n                >\n                  {range.label}\n                </Button>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Chart */}\n      <div className=\"glass-panel rounded-xl p-3 sm:p-4 lg:p-6\">\n        <div className=\"chart-container relative border border-border/30 rounded-lg min-h-[300px] h-[300px] sm:min-h-[350px] sm:h-[350px] lg:min-h-[400px] lg:h-[400px]\">\n          <div ref={chartContainerRef} className=\"w-full h-full rounded-lg\" data-testid=\"trading-chart\" />\n          \n          {/* Only show overlay loading on initial load when no chart data exists */}\n          {isLoading && !chartData && (\n            <div className=\"absolute inset-0 flex items-center justify-center bg-background/80 backdrop-blur-sm rounded-lg\">\n              <div className=\"flex items-center space-x-3 text-muted-foreground\">\n                <div className=\"w-5 h-5 border-2 border-primary border-t-transparent rounded-full animate-spin\"></div>\n                <span className=\"font-medium\">Loading chart data...</span>\n              </div>\n            </div>\n          )}\n          \n          {/* Enhanced Chart controls overlay */}\n          <div className=\"absolute top-4 left-4 space-y-2 opacity-80 hover:opacity-100 transition-opacity\">\n            <button \n              className=\"w-10 h-10 glass-panel rounded-lg flex items-center justify-center hover:bg-primary/20 hover:border-primary/40 transition-all duration-200 shadow-md\"\n              data-testid=\"chart-zoom-in\"\n              title=\"Zoom In\"\n            >\n              <i className=\"fas fa-plus text-sm text-foreground\"></i>\n            </button>\n            <button \n              className=\"w-10 h-10 glass-panel rounded-lg flex items-center justify-center hover:bg-primary/20 hover:border-primary/40 transition-all duration-200 shadow-md\"\n              data-testid=\"chart-zoom-out\"\n              title=\"Zoom Out\"\n            >\n              <i className=\"fas fa-minus text-sm text-foreground\"></i>\n            </button>\n            <button \n              className=\"w-10 h-10 glass-panel rounded-lg flex items-center justify-center hover:bg-primary/20 hover:border-primary/40 transition-all duration-200 shadow-md\"\n              data-testid=\"chart-crosshair\"\n              title=\"Crosshair\"\n            >\n              <i className=\"fas fa-crosshairs text-sm text-foreground\"></i>\n            </button>\n          </div>\n\n          {/* Enhanced Live indicator with background fetch status */}\n          <div className=\"absolute top-4 right-4 flex items-center space-x-2 bg-background/80 backdrop-blur-sm rounded-full px-3 py-2 border border-border/30\">\n            <div className={`w-2 h-2 rounded-full ${isFetching ? 'bg-blue-400 animate-spin' : 'bg-green-400 animate-pulse'}`}>\n              {isFetching && <div className=\"w-2 h-2 border border-blue-400 border-t-transparent rounded-full animate-spin\"></div>}\n            </div>\n            <span className=\"text-xs text-foreground font-medium\">\n              {isFetching ? 'Updating...' : 'Live Data'}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Chart Features */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        {/* Enhanced Volume Chart with better loading states */}\n        <div className=\"glass-panel rounded-xl p-6\">\n          <h3 className=\"text-lg font-semibold mb-4 text-foreground\">24h Volume</h3>\n          <div className=\"h-32 flex items-end justify-center space-x-1 overflow-hidden\">\n            {isVolumeLoading ? (\n              // Beautiful loading animation\n              <div className=\"flex items-center justify-center h-full w-full\">\n                <div className=\"flex space-x-1\">\n                  {Array.from({length: 8}).map((_, index) => (\n                    <div\n                      key={index}\n                      className=\"w-2 bg-gradient-to-t from-primary/80 to-primary/40 rounded-t animate-pulse\"\n                      style={{\n                        height: `${(Math.sin(Date.now() * 0.01 + index) * 20 + 40)}px`,\n                        animationDelay: `${index * 100}ms`,\n                        animationDuration: '1.5s'\n                      }}\n                    />\n                  ))}\n                </div>\n              </div>\n            ) : volumeError ? (\n              // Error state with retry option\n              <div className=\"flex items-center justify-center h-full w-full text-muted-foreground\">\n                <div className=\"text-center\">\n                  <i className=\"fas fa-exclamation-triangle text-xl mb-2 text-yellow-500\"></i>\n                  <p className=\"text-sm font-medium\">Data unavailable</p>\n                  <p className=\"text-xs opacity-70\">Providers experiencing issues</p>\n                </div>\n              </div>\n            ) : currentData && currentData.volume ? (\n              // Show real volume data when available\n              Array.from({length: 12}).map((_, index) => {\n                const baseHeight = (currentData.volume! / 1000000) * 2; // Scale based on volume\n                const variationHeight = Math.floor(Math.random() * 10) + baseHeight;\n                return (\n                  <div\n                    key={index}\n                    className=\"bg-gradient-to-t from-primary/80 to-primary/40 w-3 rounded-t transition-all duration-300 hover:from-primary hover:to-primary/60 hover:scale-105\"\n                    style={{ height: `${Math.min(variationHeight * 2, 80)}px` }}\n                  />\n                );\n              })\n            ) : (\n              // Fallback state\n              <div className=\"flex items-center justify-center h-full w-full text-muted-foreground\">\n                <div className=\"text-center\">\n                  <i className=\"fas fa-chart-bar text-xl mb-2 opacity-50\"></i>\n                  <p className=\"text-sm\">Waiting for data...</p>\n                </div>\n              </div>\n            )}\n          </div>\n          <div className=\"mt-3 text-center\">\n            <span className=\"text-sm text-muted-foreground\">Volume: </span>\n            <span className=\"text-sm font-medium text-foreground\">\n              {isVolumeLoading ? (\n                <div className=\"inline-flex items-center space-x-2\">\n                  <div className=\"w-3 h-3 border border-primary border-t-transparent rounded-full animate-spin\"></div>\n                  <span>Loading...</span>\n                </div>\n              ) : volumeError ? (\n                <span className=\"text-yellow-500\">Unavailable</span>\n              ) : currentData && currentData.volume ? (\n                `${(currentData.volume / 1000000).toFixed(1)}M ${selectedKind === 'crypto' ? selectedSymbol : 'shares'}`\n              ) : (\n                'Awaiting data'\n              )}\n            </span>\n          </div>\n        </div>\n\n        {/* Market Stats */}\n        <div className=\"glass-panel rounded-xl p-6\">\n          <h3 className=\"text-lg font-semibold mb-4 text-foreground\">Statistics</h3>\n          <div className=\"space-y-3\">\n            {currentData && (\n              <>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Current Price</span>\n                  <span className=\"font-medium text-foreground\">{formatPrice(currentData.price)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">24h Change</span>\n                  <span className={`font-medium ${currentData.change24h && currentData.change24h >= 0 ? 'text-green-400' : 'text-red-400'}`}>\n                    {currentData.change24h ? formatPercentage(currentData.change24h) : 'N/A'}\n                  </span>\n                </div>\n              </>\n            )}\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">24h High</span>\n              <span className=\"font-medium text-green-400\">$45,892</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">24h Low</span>\n              <span className=\"font-medium text-red-400\">$42,156</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Enhanced Compare - Now Functional */}\n        <div className=\"glass-panel rounded-xl p-6\">\n          <h3 className=\"text-lg font-semibold mb-4 text-foreground\">Compare Assets</h3>\n          <div className=\"space-y-3\">\n            {/* Active compare symbols */}\n            {compareSymbols.map((symbol) => (\n              <div \n                key={symbol}\n                className=\"flex items-center justify-between p-3 bg-primary/10 rounded-lg border border-primary/30\"\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <i className=\"fas fa-chart-line text-primary\"></i>\n                  <span className=\"text-foreground font-medium\">{symbol}</span>\n                  <span className=\"text-xs text-muted-foreground\">overlay active</span>\n                </div>\n                <button \n                  onClick={() => removeCompareSymbol(symbol)}\n                  className=\"text-red-400 hover:text-red-300 transition-colors\"\n                  data-testid={`remove-overlay-${symbol.toLowerCase()}`}\n                >\n                  <i className=\"fas fa-times\"></i>\n                </button>\n              </div>\n            ))}\n            \n            {/* Add overlay buttons */}\n            {compareSymbols.length < 2 && (\n              <>\n                <button \n                  onClick={() => addCompareSymbol(selectedKind === 'crypto' ? 'ETH' : 'SPY')}\n                  disabled={compareSymbols.includes(selectedKind === 'crypto' ? 'ETH' : 'SPY') || selectedSymbol === (selectedKind === 'crypto' ? 'ETH' : 'SPY')}\n                  className=\"w-full text-left p-4 glass-panel rounded-lg hover:bg-primary/10 hover:border-primary/30 transition-all duration-200 border border-transparent shadow-sm disabled:opacity-50 disabled:cursor-not-allowed\"\n                  data-testid=\"add-overlay-eth\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <i className={`fas ${selectedKind === 'crypto' ? 'fa-ethereum' : 'fa-chart-line'} text-primary`}></i>\n                      <span className=\"text-foreground font-medium\">Add {selectedKind === 'crypto' ? 'ETH' : 'SPY'} overlay</span>\n                    </div>\n                    <i className=\"fas fa-plus text-primary opacity-70\"></i>\n                  </div>\n                </button>\n                <button \n                  onClick={() => addCompareSymbol(selectedKind === 'crypto' ? 'BTC' : 'QQQ')}\n                  disabled={compareSymbols.includes(selectedKind === 'crypto' ? 'BTC' : 'QQQ') || selectedSymbol === (selectedKind === 'crypto' ? 'BTC' : 'QQQ')}\n                  className=\"w-full text-left p-4 glass-panel rounded-lg hover:bg-primary/10 hover:border-primary/30 transition-all duration-200 border border-transparent shadow-sm disabled:opacity-50 disabled:cursor-not-allowed\"\n                  data-testid=\"add-overlay-index\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <i className={`fas ${selectedKind === 'crypto' ? 'fa-bitcoin' : 'fa-chart-area'} text-primary`}></i>\n                      <span className=\"text-foreground font-medium\">Add {selectedKind === 'crypto' ? 'BTC' : 'QQQ'} overlay</span>\n                    </div>\n                    <i className=\"fas fa-plus text-primary opacity-70\"></i>\n                  </div>\n                </button>\n              </>\n            )}\n            \n            {compareSymbols.length >= 2 && (\n              <div className=\"text-center text-muted-foreground text-sm py-2\">\n                Maximum 2 overlays active\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":25313},"client/src/components/chat/chat-assistant.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { formatPrice, formatPercentage } from '@/lib/api';\n\ninterface ChatMessage {\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp: string;\n}\n\ninterface MarketData {\n  symbol: string;\n  name: string;\n  price: number;\n  change24h?: number;\n  changePercent24h?: number;\n}\n\ninterface ChatAssistantProps {\n  onNavigateToCharts?: () => void;\n}\n\nexport default function ChatAssistant({ onNavigateToCharts }: ChatAssistantProps = {}) {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [input, setInput] = useState('');\n  const [conversationId, setConversationId] = useState<string>();\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  // Fetch market data for chat display  \n  const { data: cryptoData } = useQuery<MarketData[]>({\n    queryKey: [`/api/markets/snapshot?kind=crypto&symbols=BTC,ETH`],\n    refetchInterval: 15000, // Update every 15 seconds\n  });\n\n  const { data: stockData } = useQuery<MarketData[]>({\n    queryKey: [`/api/markets/snapshot?kind=stock&symbols=SPY,AAPL`],\n    refetchInterval: 30000, // Update every 30 seconds\n  });\n\n  // Combine and limit to 4 results\n  const marketDisplayData = [...(cryptoData || []), ...(stockData || [])].slice(0, 4);\n\n  const chatMutation = useMutation({\n    mutationFn: async ({ message, conversationId }: { message: string; conversationId?: string }) => {\n      const response = await apiRequest('POST', '/api/chat', { message, conversationId });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setMessages(prev => [\n        ...prev,\n        {\n          role: 'assistant',\n          content: data.response,\n          timestamp: new Date().toISOString()\n        }\n      ]);\n      setConversationId(data.conversationId);\n    },\n    onError: (error) => {\n      // Add error message to chat history\n      setMessages(prev => [\n        ...prev,\n        {\n          role: 'assistant',\n          content: `I apologize, but I'm currently experiencing technical difficulties. ${error instanceof Error ? error.message : 'Please try again later.'}`,\n          timestamp: new Date().toISOString()\n        }\n      ]);\n      \n      toast({\n        title: 'Chat Error',\n        description: error instanceof Error ? error.message : 'Failed to send message',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!input.trim() || chatMutation.isPending) return;\n\n    // Add user message immediately to chat history\n    const userMessage = {\n      role: 'user' as const,\n      content: input,\n      timestamp: new Date().toISOString()\n    };\n    \n    setMessages(prev => [...prev, userMessage]);\n    \n    // Store the current input and clear it\n    const currentInput = input;\n    setInput('');\n    \n    // Submit to API\n    chatMutation.mutate({ message: currentInput, conversationId });\n  };\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({\n        title: 'Copied to clipboard',\n        description: 'Message copied successfully',\n      });\n    } catch (error) {\n      toast({\n        title: 'Copy failed',\n        description: 'Unable to copy to clipboard',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Initialize with welcome message\n  useEffect(() => {\n    if (messages.length === 0) {\n      setMessages([{\n        role: 'assistant',\n        content: 'Hi! I can help with crypto, stocks, and financial advice. What do you need?',\n        timestamp: new Date().toISOString()\n      }]);\n    }\n  }, [messages.length]);\n\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Chat Interface */}\n      <div className=\"glass-panel rounded-xl p-6 flex flex-col h-full shadow-2xl border border-primary/20 backdrop-blur-lg bg-gradient-to-br from-background/95 to-background/80\">\n        <div className=\"flex items-center justify-between mb-6 border-b border-primary/10 pb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-12 h-12 rounded-full overflow-hidden relative shadow-lg border-2 border-primary/30\">\n              <svg \n                width=\"100%\" \n                height=\"100%\" \n                viewBox=\"0 0 32 32\" \n                fill=\"none\" \n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"w-full h-full\"\n              >\n                <rect x=\"4\" y=\"18\" width=\"3\" height=\"10\" fill=\"#1e293b\" rx=\"1\"/>\n                <rect x=\"9\" y=\"16\" width=\"3\" height=\"12\" fill=\"#334155\" rx=\"1\"/>\n                <rect x=\"14\" y=\"14\" width=\"3\" height=\"14\" fill=\"#1e293b\" rx=\"1\"/>\n                <rect x=\"19\" y=\"12\" width=\"3\" height=\"16\" fill=\"#334155\" rx=\"1\"/>\n                <rect x=\"24\" y=\"10\" width=\"3\" height=\"18\" fill=\"#1e293b\" rx=\"1\"/>\n              </svg>\n            </div>\n            <div>\n              <h2 className=\"text-xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">FinChat Assistant</h2>\n              <p className=\"text-sm text-muted-foreground font-medium\">AI-powered financial insights</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"flex items-center space-x-1 bg-green-500/20 px-3 py-1.5 rounded-full border border-green-400/30 shadow-md\">\n              <div className=\"w-2 h-2 bg-green-400 rounded-full pulse-dot\"></div>\n              <span className=\"text-xs text-green-400 font-semibold\">Online</span>\n            </div>\n          </div>\n        </div>\n\n\n        {/* Chat Messages */}\n        <div className=\"flex-1 overflow-y-auto mb-24 sm:mb-16 space-y-4 pr-2\" data-testid=\"chat-messages\" style={{scrollbarWidth: 'thin'}}>\n          {messages.map((message, index) => (\n            <div\n              key={index}\n              className={`flex space-x-2 sm:space-x-3 ${message.role === 'user' ? 'justify-end' : ''} chat-message`}\n            >\n              {message.role === 'assistant' && (\n                <div className=\"w-8 h-8 rounded-full overflow-hidden flex-shrink-0 neon-glow\">\n                  <svg \n                    width=\"100%\" \n                    height=\"100%\" \n                    viewBox=\"0 0 32 32\" \n                    fill=\"none\" \n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    className=\"w-full h-full\"\n                  >\n                    <rect x=\"4\" y=\"18\" width=\"3\" height=\"10\" fill=\"#1e293b\" rx=\"1\"/>\n                    <rect x=\"9\" y=\"16\" width=\"3\" height=\"12\" fill=\"#334155\" rx=\"1\"/>\n                    <rect x=\"14\" y=\"14\" width=\"3\" height=\"14\" fill=\"#1e293b\" rx=\"1\"/>\n                    <rect x=\"19\" y=\"12\" width=\"3\" height=\"16\" fill=\"#334155\" rx=\"1\"/>\n                    <rect x=\"24\" y=\"10\" width=\"3\" height=\"18\" fill=\"#1e293b\" rx=\"1\"/>\n                  </svg>\n                </div>\n              )}\n              \n              <div className={`max-w-full sm:max-w-2xl shadow-lg ${\n                message.role === 'user' \n                  ? 'bg-gradient-to-br from-primary/25 to-primary/15 border border-primary/40 text-foreground' \n                  : 'glass-panel border border-white/10 bg-gradient-to-br from-background/90 to-background/70'\n              } rounded-2xl p-3 sm:p-5`}>\n                <p className=\"text-foreground whitespace-pre-wrap leading-relaxed font-medium text-sm sm:text-base\">{message.content}</p>\n              </div>\n\n              {message.role === 'user' && (\n                <div className=\"w-8 h-8 bg-gradient-to-r from-accent to-primary rounded-full flex items-center justify-center flex-shrink-0\">\n                  <i className=\"fas fa-user text-white text-sm\"></i>\n                </div>\n              )}\n            </div>\n          ))}\n          \n          {chatMutation.isPending && (\n            <div className=\"flex space-x-3 chat-message\">\n              <div className=\"w-8 h-8 rounded-full overflow-hidden flex-shrink-0 neon-glow\">\n                <svg \n                  width=\"100%\" \n                  height=\"100%\" \n                  viewBox=\"0 0 32 32\" \n                  fill=\"none\" \n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  className=\"w-full h-full animate-pulse\"\n                >\n                  <rect x=\"4\" y=\"18\" width=\"3\" height=\"10\" fill=\"#1e293b\" rx=\"1\"/>\n                  <rect x=\"9\" y=\"16\" width=\"3\" height=\"12\" fill=\"#334155\" rx=\"1\"/>\n                  <rect x=\"14\" y=\"14\" width=\"3\" height=\"14\" fill=\"#1e293b\" rx=\"1\"/>\n                  <rect x=\"19\" y=\"12\" width=\"3\" height=\"16\" fill=\"#334155\" rx=\"1\"/>\n                  <rect x=\"24\" y=\"10\" width=\"3\" height=\"18\" fill=\"#1e293b\" rx=\"1\"/>\n                </svg>\n              </div>\n              <div className=\"glass-panel rounded-2xl p-5 border border-primary/20 shadow-lg bg-gradient-to-br from-background/90 to-background/70\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"flex space-x-1\">\n                    <div className=\"w-3 h-3 bg-gradient-to-r from-primary to-accent rounded-full animate-bounce\"></div>\n                    <div className=\"w-3 h-3 bg-gradient-to-r from-accent to-primary rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                    <div className=\"w-3 h-3 bg-gradient-to-r from-primary to-accent rounded-full animate-bounce\" style={{ animationDelay: '0.4s' }}></div>\n                  </div>\n                  <div className=\"text-sm text-foreground font-semibold\">\n                    <span className=\"animate-pulse\">Analyzing your question...</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          <div ref={messagesEndRef} />\n        </div>\n\n        {/* Chat Input */}\n        <form onSubmit={handleSubmit} className=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3 pt-4 sm:pt-6 border-t border-primary/20 bg-gradient-to-r from-background/50 to-background/30 rounded-t-xl p-3 sm:p-4 -mx-6 -mb-6\">\n          <Input\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Ask about markets...\"\n            className=\"flex-1 h-12 sm:h-14 text-sm sm:text-base rounded-2xl border-2 border-primary/20 bg-gradient-to-r from-background/95 to-background/85 backdrop-blur-sm shadow-xl transition-all duration-300 ease-in-out focus:border-primary focus:shadow-primary/30 focus:shadow-2xl focus:bg-gradient-to-r focus:from-background focus:to-background/90 hover:border-primary/40 hover:shadow-lg placeholder:text-muted-foreground/30 text-foreground font-medium px-4 sm:px-6\"\n            disabled={chatMutation.isPending}\n            data-testid=\"chat-input\"\n          />\n          <Button\n            type=\"submit\"\n            disabled={!input.trim() || chatMutation.isPending}\n            className=\"bg-black hover:bg-gray-800 text-white px-4 sm:px-6 py-3 sm:py-3 rounded-xl font-semibold transition-all shadow-lg min-w-[48px] sm:min-w-auto\"\n            data-testid=\"chat-send\"\n          >\n            <i className=\"fas fa-paper-plane text-sm sm:text-base\"></i>\n          </Button>\n        </form>\n      </div>\n\n    </div>\n  );\n}\n","size_bytes":11669},"client/src/components/layout/navbar.tsx":{"content":"import { useTheme } from '@/hooks/use-theme';\nimport { TabType } from '@/pages/home';\n\ninterface NavbarProps {\n  activeTab: TabType;\n  onTabChange: (tab: TabType) => void;\n}\n\nexport default function Navbar({ activeTab, onTabChange }: NavbarProps) {\n  const { theme, toggleTheme } = useTheme();\n\n  const navItems = [\n    { id: 'chat' as TabType, label: 'Chat', icon: 'fas fa-robot' },\n    { id: 'charts' as TabType, label: 'Charts', icon: 'fas fa-chart-area' },\n    { id: 'news' as TabType, label: 'News', icon: 'fas fa-newspaper' },\n    { id: 'calculators' as TabType, label: 'Calculators', icon: 'fas fa-calculator' },\n    { id: 'tax' as TabType, label: 'Tax Tools', icon: 'fas fa-percentage' },\n  ];\n\n  return (\n    <nav className=\"sticky top-0 z-50 glass-panel\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo */}\n          <div className=\"flex items-center justify-center flex-1 md:flex-none md:justify-start space-x-2 sm:space-x-3\">\n            <div className=\"w-10 h-10 sm:w-12 sm:h-12 flex items-center justify-center\">\n              <svg \n                width=\"100%\" \n                height=\"100%\" \n                viewBox=\"0 0 48 48\" \n                fill=\"none\" \n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"max-w-[150px] filter drop-shadow-sm\"\n              >\n                {/* Financial chart bars */}\n                <rect x=\"6\" y=\"28\" width=\"4\" height=\"14\" fill=\"#1e293b\" rx=\"1\"/>\n                <rect x=\"12\" y=\"24\" width=\"4\" height=\"18\" fill=\"#334155\" rx=\"1\"/>\n                <rect x=\"18\" y=\"20\" width=\"4\" height=\"22\" fill=\"#1e293b\" rx=\"1\"/>\n                <rect x=\"24\" y=\"16\" width=\"4\" height=\"26\" fill=\"#334155\" rx=\"1\"/>\n                \n                {/* Chat bubble */}\n                <path \n                  d=\"M32 8C37.5228 8 42 12.4772 42 18C42 23.5228 37.5228 28 32 28H35L30 32V28C32.2091 28 34 26.2091 34 24V12C34 9.79086 32.2091 8 30 8H32Z\" \n                  fill=\"#1e293b\"\n                />\n                <circle cx=\"35\" cy=\"18\" r=\"1.5\" fill=\"white\"/>\n                <circle cx=\"38\" cy=\"18\" r=\"1.5\" fill=\"white\"/>\n                \n                {/* Connection line */}\n                <path \n                  d=\"M28 24L32 20\" \n                  stroke=\"#334155\" \n                  strokeWidth=\"2\" \n                  strokeLinecap=\"round\"\n                />\n              </svg>\n            </div>\n            <h1 className=\"text-xl sm:text-2xl font-bold gradient-text\">FinChat</h1>\n            <div className=\"pulse-dot w-1.5 h-1.5 sm:w-2 sm:h-2 bg-primary rounded-full ml-1 sm:ml-2\"></div>\n          </div>\n\n          {/* Navigation Tabs */}\n          <div className=\"hidden md:flex items-center space-x-1\">\n            {navItems.map((item) => (\n              <button\n                key={item.id}\n                onClick={() => onTabChange(item.id)}\n                data-testid={`nav-${item.id}`}\n                className={`nav-tab px-4 py-2 rounded-lg font-medium transition-all ${\n                  activeTab === item.id\n                    ? 'bg-primary/20 text-primary border border-primary/30 neon-glow animate-glow'\n                    : 'hover:bg-accent/20 hover:text-accent'\n                }`}\n              >\n                <i className={`${item.icon} mr-2`}></i>\n                {item.label}\n              </button>\n            ))}\n          </div>\n\n          {/* Theme Toggle */}\n          <button\n            onClick={toggleTheme}\n            data-testid=\"theme-toggle\"\n            className=\"w-8 h-8 sm:w-10 sm:h-10 rounded-lg glass-panel flex items-center justify-center hover:bg-primary/10 transition-all\"\n          >\n            <i className={`fas ${theme === 'dark' ? 'fa-sun' : 'fa-moon'} text-primary text-sm sm:text-base`}></i>\n          </button>\n        </div>\n      </div>\n\n      {/* Mobile Navigation */}\n      <div className=\"md:hidden px-3 pb-3\">\n        <div className=\"flex flex-wrap justify-center gap-1.5\">\n          {navItems.map((item) => (\n            <button\n              key={item.id}\n              onClick={() => onTabChange(item.id)}\n              data-testid={`nav-mobile-${item.id}`}\n              className={`px-3 py-2.5 rounded-xl text-xs font-semibold transition-all min-w-[60px] flex-1 max-w-[100px] ${\n                activeTab === item.id\n                  ? 'bg-primary/25 text-primary border-2 border-primary/50 scale-105 neon-glow animate-glow'\n                  : 'hover:bg-accent/15 hover:text-accent text-muted-foreground border-2 border-transparent'\n              }`}\n            >\n              <div className=\"flex flex-col items-center space-y-1\">\n                <i className={`${item.icon} text-sm`}></i>\n                <span className=\"leading-none\">{item.label}</span>\n              </div>\n            </button>\n          ))}\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":4915},"client/src/components/markets/market-card.tsx":{"content":"import { formatPrice, formatPercentage, formatVolume, formatMarketCap } from '@/lib/api';\n\ninterface MarketData {\n  symbol: string;\n  name: string;\n  price: number;\n  change24h?: number;\n  volume?: number;\n  marketCap?: number;\n  timestamp: string;\n  source: string;\n  kind: 'crypto' | 'stock';\n}\n\ninterface MarketCardProps {\n  data: MarketData;\n  isInWatchlist: boolean;\n  onToggleWatchlist: () => void;\n}\n\nexport default function MarketCard({ data, isInWatchlist, onToggleWatchlist }: MarketCardProps) {\n  const { symbol, name, price, change24h, volume, marketCap, timestamp } = data;\n  \n  const isPositive = change24h ? change24h >= 0 : true;\n  const changeColor = isPositive ? 'text-green-400' : 'text-red-400';\n  \n  // Get icon based on symbol\n  const getIcon = () => {\n    switch (symbol) {\n      case 'BTC':\n        return 'fab fa-bitcoin text-orange-500';\n      case 'ETH':\n        return 'fab fa-ethereum text-blue-600';\n      default:\n        return data.kind === 'crypto' \n          ? 'fas fa-coins text-yellow-500'\n          : 'fas fa-chart-line text-blue-500';\n    }\n  };\n\n  // Generate sparkline data (simplified)\n  const generateSparkline = () => {\n    const points = 8;\n    const baseY = 30;\n    const amplitude = isPositive ? -10 : 10;\n    \n    return Array.from({ length: points }, (_, i) => {\n      const x = (i / (points - 1)) * 200;\n      const noise = (Math.sin(i * 0.8) + Math.cos(i * 1.2)) * amplitude;\n      const y = baseY + noise + (isPositive ? -5 : 5);\n      return `${x},${Math.max(5, Math.min(55, y))}`;\n    }).join(' L');\n  };\n\n  const sparklinePath = `M${generateSparkline()}`;\n  const sparklineColor = isPositive ? 'var(--primary)' : '#ef4444';\n\n  return (\n    <div \n      className=\"market-card glass-panel rounded-xl p-6 hover:neon-glow transition-all cursor-pointer\"\n      data-testid={`market-card-${symbol}`}\n    >\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 rounded-full flex items-center justify-center bg-muted/20\">\n            <i className={getIcon()}></i>\n          </div>\n          <div>\n            <h3 className=\"font-semibold text-foreground\">{name}</h3>\n            <p className=\"text-sm text-muted-foreground\">{symbol}</p>\n          </div>\n        </div>\n        <button\n          onClick={(e) => {\n            e.stopPropagation();\n            onToggleWatchlist();\n          }}\n          data-testid={`watchlist-${symbol}`}\n          className={`transition-colors ${\n            isInWatchlist \n              ? 'text-primary hover:text-accent' \n              : 'text-muted-foreground hover:text-primary'\n          }`}\n        >\n          <i className={isInWatchlist ? 'fas fa-heart' : 'far fa-heart'}></i>\n        </button>\n      </div>\n      \n      <div className=\"space-y-2\">\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-2xl font-bold text-foreground\" data-testid={`price-${symbol}`}>\n            {formatPrice(price)}\n          </span>\n          {change24h !== undefined && (\n            <span className={`text-sm font-medium ${changeColor}`} data-testid={`change-${symbol}`}>\n              {formatPercentage(change24h)}\n            </span>\n          )}\n        </div>\n        \n        {(volume || marketCap) && (\n          <div className=\"flex justify-between text-sm text-muted-foreground\">\n            {volume && <span>Vol: {formatVolume(volume)}</span>}\n            {marketCap && <span>MCap: {formatMarketCap(marketCap)}</span>}\n          </div>\n        )}\n      </div>\n\n      {/* Sparkline */}\n      <div className=\"mt-4 h-12\">\n        <svg className=\"w-full h-full\" viewBox=\"0 0 200 60\">\n          <path \n            d={sparklinePath}\n            stroke={sparklineColor}\n            strokeWidth=\"2\" \n            fill=\"none\"\n            className=\"transition-colors duration-300\"\n          />\n        </svg>\n      </div>\n\n      <div className=\"mt-3 flex items-center justify-between text-xs text-muted-foreground\">\n        <span>Last updated: {getTimeAgo(timestamp)}</span>\n        <div className=\"w-2 h-2 bg-green-400 rounded-full pulse-dot\"></div>\n      </div>\n    </div>\n  );\n}\n\nfunction getTimeAgo(timestamp: string): string {\n  const now = new Date();\n  const time = new Date(timestamp);\n  const diffInSeconds = Math.floor((now.getTime() - time.getTime()) / 1000);\n  \n  if (diffInSeconds < 60) return `${diffInSeconds}s ago`;\n  if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;\n  if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;\n  return `${Math.floor(diffInSeconds / 86400)}d ago`;\n}\n","size_bytes":4656},"client/src/components/markets/markets-dashboard.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport MarketCard from './market-card';\nimport { useSSE } from '@/hooks/use-sse';\n\ntype MarketKind = 'crypto' | 'stock';\n\ninterface MarketData {\n  symbol: string;\n  name: string;\n  price: number;\n  change24h?: number;\n  volume?: number;\n  marketCap?: number;\n  timestamp: string;\n  source: string;\n  kind: MarketKind;\n}\n\nexport default function MarketsDashboard() {\n  const [activeMarket, setActiveMarket] = useState<MarketKind>('crypto');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [watchlist, setWatchlist] = useState<string[]>(['BTC', 'ETH', 'SOL', 'ADA']);\n\n  // Get default symbols based on market type\n  const getDefaultSymbols = (kind: MarketKind): string[] => {\n    if (kind === 'crypto') {\n      return ['BTC', 'ETH', 'SOL', 'ADA', 'DOT', 'MATIC', 'AVAX', 'LINK', 'UNI', 'LTC'];\n    } else {\n      return ['AAPL', 'GOOGL', 'MSFT', 'AMZN', 'TSLA', 'META', 'NVDA', 'NFLX', 'SPY', 'QQQ'];\n    }\n  };\n\n  // Fetch market data via REST API\n  const { data: marketData, isLoading, error } = useQuery({\n    queryKey: [`/api/markets/snapshot?kind=${activeMarket}&symbols=${getDefaultSymbols(activeMarket).join(',')}`],\n    refetchInterval: activeMarket === 'crypto' ? 15000 : 30000, // 15s for crypto, 30s for stocks\n  });\n\n  // Use SSE for real-time updates\n  const sseData = useSSE(`/api/markets/stream?kind=${activeMarket}&symbols=${getDefaultSymbols(activeMarket).join(',')}`);\n\n  // Use SSE data if available, otherwise fall back to REST API data\n  const displayData: MarketData[] = sseData || marketData || [];\n\n  // Filter data based on search term\n  const filteredData = displayData.filter(item =>\n    item.symbol.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    item.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const toggleWatchlist = (symbol: string) => {\n    setWatchlist(prev => \n      prev.includes(symbol) \n        ? prev.filter(s => s !== symbol)\n        : [...prev, symbol]\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Market Controls */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center space-y-4 sm:space-y-0\">\n        <div className=\"flex space-x-2\">\n          <Button\n            variant={activeMarket === 'crypto' ? 'default' : 'outline'}\n            onClick={() => setActiveMarket('crypto')}\n            data-testid=\"market-crypto\"\n            className={activeMarket === 'crypto' ? 'bg-primary/20 text-primary border-primary/30' : ''}\n          >\n            <i className=\"fas fa-bitcoin mr-2\"></i>\n            Crypto\n          </Button>\n          <Button\n            variant={activeMarket === 'stock' ? 'default' : 'outline'}\n            onClick={() => setActiveMarket('stock')}\n            data-testid=\"market-stocks\"\n            className={activeMarket === 'stock' ? 'bg-primary/20 text-primary border-primary/30' : ''}\n          >\n            <i className=\"fas fa-chart-line mr-2\"></i>\n            Stocks\n          </Button>\n        </div>\n\n        <div className=\"flex space-x-3\">\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search symbols...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"calculator-input rounded-lg pl-10 pr-4 py-2 w-64\"\n              data-testid=\"market-search\"\n            />\n            <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"></i>\n          </div>\n          <Button\n            variant=\"outline\"\n            className=\"glass-panel hover:neon-glow\"\n            data-testid=\"watchlist-button\"\n          >\n            <i className=\"fas fa-heart mr-2\"></i>\n            Watchlist ({watchlist.length})\n          </Button>\n        </div>\n      </div>\n\n      {/* Loading State */}\n      {isLoading && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n          {[...Array(8)].map((_, i) => (\n            <div key={i} className=\"glass-panel rounded-xl p-6 animate-pulse\">\n              <div className=\"h-16 bg-muted rounded mb-4\"></div>\n              <div className=\"h-4 bg-muted rounded mb-2\"></div>\n              <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Error State */}\n      {error && (\n        <div className=\"glass-panel rounded-xl p-6 border border-destructive/30\">\n          <div className=\"flex items-center space-x-2 text-destructive\">\n            <i className=\"fas fa-exclamation-triangle\"></i>\n            <span className=\"font-medium\">Failed to load market data</span>\n          </div>\n          <p className=\"text-sm text-muted-foreground mt-2\">\n            {activeMarket === 'stock' \n              ? 'Stock data requires API keys. Check your configuration or view crypto markets instead.'\n              : 'Unable to connect to market data providers. Please try again later.'\n            }\n          </p>\n        </div>\n      )}\n\n      {/* Market Data Grid */}\n      {!isLoading && !error && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n          {filteredData.map((item) => (\n            <MarketCard\n              key={item.symbol}\n              data={item}\n              isInWatchlist={watchlist.includes(item.symbol)}\n              onToggleWatchlist={() => toggleWatchlist(item.symbol)}\n            />\n          ))}\n        </div>\n      )}\n\n      {/* Empty State */}\n      {!isLoading && !error && filteredData.length === 0 && (\n        <div className=\"glass-panel rounded-xl p-12 text-center\">\n          <i className=\"fas fa-search text-4xl text-muted-foreground mb-4\"></i>\n          <h3 className=\"text-lg font-medium text-foreground mb-2\">No results found</h3>\n          <p className=\"text-muted-foreground\">\n            Try adjusting your search term or switch to a different market.\n          </p>\n        </div>\n      )}\n\n      {/* Market Status */}\n      <div className=\"glass-panel rounded-xl p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-green-400 rounded-full pulse-dot\"></div>\n              <span className=\"text-sm text-muted-foreground\">\n                {activeMarket === 'crypto' \n                  ? 'Live data via Binance WebSocket'\n                  : 'Live/delayed data from multiple providers'\n                }\n              </span>\n            </div>\n            <div className=\"text-xs text-muted-foreground\">\n              {activeMarket === 'crypto' \n                ? 'Fallback: CoinGecko → CoinPaprika → Kraken'\n                : 'Fallback chain available with API keys'\n              }\n            </div>\n          </div>\n          <div className=\"text-xs text-muted-foreground\">\n            Last sync: {sseData ? 'Live' : 'Just now'}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7222},"client/src/components/news/news-dashboard.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\n\ninterface NewsArticle {\n  title: string;\n  description?: string;\n  url: string;\n  imageUrl?: string;\n  source: string;\n  category: 'crypto' | 'stocks' | 'general';\n  publishedAt: string;\n}\n\nexport default function NewsDashboard() {\n  const [activeFilter, setActiveFilter] = useState<string>('all');\n\n  // Fetch news data\n  const { data: news, isLoading, error } = useQuery({\n    queryKey: [`/api/news?${activeFilter === 'all' ? '' : `category=${activeFilter}&`}limit=50`],\n    refetchInterval: 10 * 60 * 1000, // Refetch every 10 minutes\n  });\n\n  // Fetch featured news\n  const { data: featuredNews } = useQuery({\n    queryKey: [`/api/news/featured${activeFilter === 'all' ? '' : `?category=${activeFilter}`}`],\n    refetchInterval: 10 * 60 * 1000,\n  });\n\n  const newsData: NewsArticle[] = Array.isArray(news) ? news : [];\n  const featured: NewsArticle | null = featuredNews && typeof featuredNews === 'object' && 'title' in featuredNews ? featuredNews as NewsArticle : null;\n\n  const filters = [\n    { id: 'all', label: 'All News', icon: '' },\n    { id: 'crypto', label: 'Crypto', icon: 'fas fa-bitcoin' },\n    { id: 'stocks', label: 'Stocks', icon: 'fas fa-chart-line' },\n  ];\n\n  const getTimeAgo = (dateString: string): string => {\n    const now = new Date();\n    const publishedDate = new Date(dateString);\n    const diffInHours = Math.floor((now.getTime() - publishedDate.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return 'Just now';\n    if (diffInHours < 24) return `${diffInHours}h ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    return `${diffInDays}d ago`;\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'crypto':\n        return 'bg-primary/20 text-primary';\n      case 'stocks':\n        return 'bg-accent/20 text-accent';\n      default:\n        return 'bg-muted/20 text-muted-foreground';\n    }\n  };\n\n  const getPlaceholderImage = (category: string) => {\n    const images = {\n      crypto: 'https://images.unsplash.com/photo-1640161704729-cbe966a08476?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=200',\n      stocks: 'https://images.unsplash.com/photo-1590283603385-17ffb3a7f29f?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=200',\n      default: 'https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=200'\n    };\n    return images[category as keyof typeof images] || images.default;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* News Controls */}\n      <div className=\"flex flex-col space-y-3 sm:flex-row sm:justify-between sm:items-center sm:space-y-0\">\n        <div className=\"flex space-x-1 sm:space-x-2 overflow-x-auto\">\n          {filters.map((filter) => (\n            <Button\n              key={filter.id}\n              variant={activeFilter === filter.id ? 'default' : 'outline'}\n              onClick={() => setActiveFilter(filter.id)}\n              data-testid={`news-filter-${filter.id}`}\n              className={`text-xs sm:text-sm px-3 sm:px-4 py-2 whitespace-nowrap flex-shrink-0 ${activeFilter === filter.id ? 'bg-primary/20 text-primary border-primary/30' : ''}`}\n            >\n              {filter.icon && <i className={`${filter.icon} mr-1 sm:mr-2 text-xs sm:text-sm`}></i>}\n              {filter.label}\n            </Button>\n          ))}\n        </div>\n\n        <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n          <div className=\"w-2 h-2 bg-green-400 rounded-full pulse-dot\"></div>\n          <span>Live feeds from 11 sources</span>\n        </div>\n      </div>\n\n      {/* Featured News */}\n      {featured && (\n        <div className=\"glass-panel rounded-xl p-3 sm:p-4 lg:p-6\">\n          <h2 className=\"text-lg sm:text-xl font-semibold mb-3 sm:mb-4 text-foreground\">Featured Story</h2>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6\">\n            <div className=\"relative\">\n              <img\n                src={featured.imageUrl || getPlaceholderImage(featured.category)}\n                alt={featured.title}\n                className=\"w-full h-48 sm:h-56 lg:h-64 object-cover rounded-lg\"\n                onError={(e) => {\n                  (e.target as HTMLImageElement).src = getPlaceholderImage(featured.category);\n                }}\n              />\n              <div className={`absolute top-4 left-4 px-2 py-1 rounded text-xs font-medium ${getCategoryColor(featured.category)}`}>\n                {featured.category.charAt(0).toUpperCase() + featured.category.slice(1)}\n              </div>\n            </div>\n            <div className=\"space-y-3 sm:space-y-4\">\n              <h3 className=\"text-lg sm:text-xl font-bold text-foreground\">{featured.title}</h3>\n              {featured.description && (\n                <p className=\"text-sm sm:text-base text-muted-foreground line-clamp-3\">{featured.description}</p>\n              )}\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-sm text-muted-foreground\">{featured.source}</span>\n                  <span className=\"text-xs text-muted-foreground\">•</span>\n                  <span className=\"text-sm text-muted-foreground\">{getTimeAgo(featured.publishedAt)}</span>\n                </div>\n                <a\n                  href={featured.url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"text-primary hover:text-accent transition-all\"\n                  data-testid=\"featured-news-link\"\n                >\n                  <i className=\"fas fa-external-link-alt\"></i>\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Loading State */}\n      {isLoading && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"glass-panel animate-pulse\">\n              <div className=\"h-32 bg-muted rounded-t-lg mb-4\"></div>\n              <CardContent className=\"space-y-3\">\n                <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                <div className=\"h-3 bg-muted rounded w-full\"></div>\n                <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Error State */}\n      {error && (\n        <div className=\"glass-panel rounded-xl p-6 border border-destructive/30\">\n          <div className=\"flex items-center space-x-2 text-destructive\">\n            <i className=\"fas fa-exclamation-triangle\"></i>\n            <span className=\"font-medium\">Failed to load news</span>\n          </div>\n          <p className=\"text-sm text-muted-foreground mt-2\">\n            Unable to fetch news from RSS feeds. Please try again later.\n          </p>\n        </div>\n      )}\n\n      {/* News Grid */}\n      {!isLoading && !error && (\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4 lg:gap-6\">\n          {newsData.map((article, index) => (\n            <Card \n              key={`${article.url}-${index}`} \n              className=\"news-card glass-panel rounded-xl hover:shadow-lg cursor-pointer transition-all\"\n              data-testid={`news-card-${index}`}\n            >\n              <div className=\"relative\">\n                <img\n                  src={article.imageUrl || getPlaceholderImage(article.category)}\n                  alt={article.title}\n                  className=\"w-full h-32 object-cover rounded-t-xl\"\n                  onError={(e) => {\n                    (e.target as HTMLImageElement).src = getPlaceholderImage(article.category);\n                  }}\n                />\n                <div className={`absolute top-2 left-2 px-2 py-1 rounded text-xs font-medium ${getCategoryColor(article.category)}`}>\n                  {article.category.charAt(0).toUpperCase() + article.category.slice(1)}\n                </div>\n              </div>\n              \n              <CardContent className=\"p-6 space-y-3\">\n                <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n                  <span>{article.source}</span>\n                  <span>•</span>\n                  <span>{getTimeAgo(article.publishedAt)}</span>\n                </div>\n                \n                <h3 className=\"font-semibold text-foreground leading-tight line-clamp-2\">\n                  {article.title}\n                </h3>\n                \n                {article.description && (\n                  <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                    {article.description}\n                  </p>\n                )}\n                \n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-xs text-muted-foreground\">{article.source}</span>\n                  <a\n                    href={article.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    onClick={(e) => e.stopPropagation()}\n                    className=\"text-primary hover:text-accent transition-colors\"\n                    data-testid={`news-link-${index}`}\n                  >\n                    <i className=\"fas fa-external-link-alt text-xs\"></i>\n                  </a>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Empty State */}\n      {!isLoading && !error && newsData.length === 0 && (\n        <div className=\"glass-panel rounded-xl p-12 text-center\">\n          <i className=\"fas fa-newspaper text-4xl text-muted-foreground mb-4\"></i>\n          <h3 className=\"text-lg font-medium text-foreground mb-2\">No news available</h3>\n          <p className=\"text-muted-foreground\">\n            No news articles found for the selected category. Try switching to a different filter.\n          </p>\n        </div>\n      )}\n\n      {/* News Sources Status */}\n      <div className=\"glass-panel rounded-xl p-4\">\n        <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4 text-sm\">\n          {[\n            'CoinTelegraph',\n            'Yahoo Finance',\n            'NewsBTC',\n            'MarketWatch',\n            'Reuters',\n            'Seeking Alpha'\n          ].map((source) => (\n            <div key={source} className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-green-400 rounded-full\"></div>\n              <span className=\"text-muted-foreground\">{source}</span>\n            </div>\n          ))}\n        </div>\n        <div className=\"mt-3 text-xs text-muted-foreground\">\n          Last update: 2 minutes ago • Auto-refresh every 10 minutes\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10998},"client/src/components/tax/tax-calculator.tsx":{"content":"import { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { formatPrice, formatPercentage } from '@/lib/api';\n\ninterface TaxResult {\n  purchasePrice: number;\n  salePrice: number;\n  quantity: number;\n  totalCost: number;\n  totalSale: number;\n  fees: number;\n  capitalGains: number;\n  holdingDays: number;\n  isLongTerm: boolean;\n  taxRate: number;\n  taxOwed: number;\n  netProfit: number;\n  effectiveRate: number;\n  scenarios: {\n    current: {\n      type: string;\n      taxRate: number;\n      taxOwed: number;\n      netProfit: number;\n    };\n    shortTerm: {\n      type: string;\n      taxRate: number;\n      taxOwed: number;\n      netProfit: number;\n    };\n    savings: number;\n  };\n}\n\nexport default function TaxCalculator() {\n  const { toast } = useToast();\n  const [inputs, setInputs] = useState({\n    assetType: 'cryptocurrency',\n    symbol: 'BTC',\n    quantity: '',\n    purchasePrice: '',\n    salePrice: '',\n    purchaseDate: '',\n    saleDate: '',\n    fees: '0',\n    region: 'US',\n    taxBracket: '50000',\n  });\n  \n  const [result, setResult] = useState<TaxResult | null>(null);\n\n  const calculateMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/calculators/tax', data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setResult(data);\n    },\n    onError: (error) => {\n      toast({\n        title: 'Tax Calculation Error',\n        description: error instanceof Error ? error.message : 'Failed to calculate tax liability',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleInputChange = (field: string, value: string) => {\n    setInputs(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleCalculate = () => {\n    const data = {\n      assetType: inputs.assetType,\n      symbol: inputs.symbol,\n      quantity: parseFloat(inputs.quantity),\n      purchasePrice: parseFloat(inputs.purchasePrice),\n      salePrice: parseFloat(inputs.salePrice),\n      purchaseDate: inputs.purchaseDate,\n      saleDate: inputs.saleDate || undefined,\n      fees: parseFloat(inputs.fees),\n      region: inputs.region,\n      taxBracket: parseFloat(inputs.taxBracket),\n    };\n\n    calculateMutation.mutate(data);\n  };\n\n  const calculateHoldingPeriod = () => {\n    if (inputs.purchaseDate && inputs.saleDate) {\n      const purchase = new Date(inputs.purchaseDate);\n      const sale = new Date(inputs.saleDate);\n      const diffTime = Math.abs(sale.getTime() - purchase.getTime());\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n      return `${diffDays} days`;\n    }\n    return '';\n  };\n\n  const isFormValid = inputs.quantity && inputs.purchasePrice && inputs.salePrice && inputs.purchaseDate;\n\n  const taxBrackets = [\n    { value: '10275', label: '10% ($0 - $10,275)' },\n    { value: '41775', label: '12% ($10,275 - $41,775)' },\n    { value: '89450', label: '22% ($41,775 - $89,450)' },\n    { value: '190750', label: '24% ($89,450 - $190,750)' },\n    { value: '364200', label: '32% ($190,750 - $364,200)' },\n    { value: '462500', label: '35% ($364,200 - $462,500)' },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Tax Calculator Header */}\n      <div className=\"glass-panel rounded-xl p-6\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center space-y-4 md:space-y-0\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\">Tax & Investment Calculator</h1>\n            <p className=\"text-muted-foreground mt-1\">Calculate capital gains, tax liability, and investment scenarios</p>\n          </div>\n          <div className=\"flex space-x-2\">\n            <Select value={inputs.region} onValueChange={(value) => handleInputChange('region', value)}>\n              <SelectTrigger className=\"calculator-input w-48\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"US\">United States</SelectItem>\n                <SelectItem value=\"UK\">United Kingdom</SelectItem>\n                <SelectItem value=\"CA\">Canada</SelectItem>\n                <SelectItem value=\"AU\">Australia</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6\">\n        {/* Tax Input Panel */}\n        <div className=\"xl:col-span-2 space-y-6\">\n          {/* Asset Details */}\n          <Card className=\"glass-panel rounded-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-foreground\">Asset Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"asset-type\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                  Asset Type\n                </Label>\n                <Select value={inputs.assetType} onValueChange={(value) => handleInputChange('assetType', value)}>\n                  <SelectTrigger className=\"calculator-input\" id=\"asset-type\" data-testid=\"tax-asset-type\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"cryptocurrency\">Cryptocurrency</SelectItem>\n                    <SelectItem value=\"stock\">Stock</SelectItem>\n                    <SelectItem value=\"etf\">ETF</SelectItem>\n                    <SelectItem value=\"real-estate\">Real Estate</SelectItem>\n                    <SelectItem value=\"commodity\">Commodity</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"symbol\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                  Asset Symbol/Name\n                </Label>\n                <Select value={inputs.symbol} onValueChange={(value) => handleInputChange('symbol', value)}>\n                  <SelectTrigger className=\"calculator-input\" id=\"symbol\" data-testid=\"tax-symbol\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"BTC\">Bitcoin (BTC)</SelectItem>\n                    <SelectItem value=\"ETH\">Ethereum (ETH)</SelectItem>\n                    <SelectItem value=\"AAPL\">Apple (AAPL)</SelectItem>\n                    <SelectItem value=\"TSLA\">Tesla (TSLA)</SelectItem>\n                    <SelectItem value=\"CUSTOM\">Custom Asset</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Transaction Details */}\n          <Card className=\"glass-panel rounded-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-foreground\">Transaction Details</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"purchase-date\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                    Purchase Date\n                  </Label>\n                  <Input\n                    id=\"purchase-date\"\n                    type=\"date\"\n                    value={inputs.purchaseDate}\n                    onChange={(e) => handleInputChange('purchaseDate', e.target.value)}\n                    className=\"calculator-input\"\n                    data-testid=\"tax-purchase-date\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"sale-date\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                    Sale Date\n                  </Label>\n                  <Input\n                    id=\"sale-date\"\n                    type=\"date\"\n                    value={inputs.saleDate}\n                    onChange={(e) => handleInputChange('saleDate', e.target.value)}\n                    className=\"calculator-input\"\n                    data-testid=\"tax-sale-date\"\n                  />\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-foreground mb-2 block\">\n                    Holding Period\n                  </Label>\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Auto-calculated\"\n                    className=\"calculator-input\"\n                    readOnly\n                    value={calculateHoldingPeriod()}\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"quantity\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                    Quantity\n                  </Label>\n                  <Input\n                    id=\"quantity\"\n                    type=\"number\"\n                    placeholder=\"0.5\"\n                    value={inputs.quantity}\n                    onChange={(e) => handleInputChange('quantity', e.target.value)}\n                    className=\"calculator-input\"\n                    data-testid=\"tax-quantity\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"cost-basis\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                    Cost Basis per Unit\n                  </Label>\n                  <div className=\"relative\">\n                    <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">$</span>\n                    <Input\n                      id=\"cost-basis\"\n                      type=\"number\"\n                      placeholder=\"35,000\"\n                      value={inputs.purchasePrice}\n                      onChange={(e) => handleInputChange('purchasePrice', e.target.value)}\n                      className=\"calculator-input pl-8\"\n                      data-testid=\"tax-purchase-price\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"sale-price\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                    Sale Price per Unit\n                  </Label>\n                  <div className=\"relative\">\n                    <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">$</span>\n                    <Input\n                      id=\"sale-price\"\n                      type=\"number\"\n                      placeholder=\"43,247\"\n                      value={inputs.salePrice}\n                      onChange={(e) => handleInputChange('salePrice', e.target.value)}\n                      className=\"calculator-input pl-8\"\n                      data-testid=\"tax-sale-price\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"fees\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                    Transaction Fees\n                  </Label>\n                  <div className=\"relative\">\n                    <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">$</span>\n                    <Input\n                      id=\"fees\"\n                      type=\"number\"\n                      placeholder=\"25\"\n                      value={inputs.fees}\n                      onChange={(e) => handleInputChange('fees', e.target.value)}\n                      className=\"calculator-input pl-8\"\n                      data-testid=\"tax-fees\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Tax Settings */}\n          <Card className=\"glass-panel rounded-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-foreground\">Tax Settings</CardTitle>\n            </CardHeader>\n            <CardContent className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <Label htmlFor=\"tax-bracket\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                  Income Tax Bracket\n                </Label>\n                <Select value={inputs.taxBracket} onValueChange={(value) => handleInputChange('taxBracket', value)}>\n                  <SelectTrigger className=\"calculator-input\" id=\"tax-bracket\" data-testid=\"tax-bracket\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {taxBrackets.map((bracket) => (\n                      <SelectItem key={bracket.value} value={bracket.value}>\n                        {bracket.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium text-foreground mb-2 block\">\n                  Short-term Capital Gains\n                </Label>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Based on income bracket\"\n                  className=\"calculator-input\"\n                  readOnly\n                />\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium text-foreground mb-2 block\">\n                  Long-term Capital Gains\n                </Label>\n                <Input\n                  type=\"text\"\n                  placeholder=\"0%, 15%, or 20%\"\n                  className=\"calculator-input\"\n                  readOnly\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Button\n            onClick={handleCalculate}\n            disabled={!isFormValid || calculateMutation.isPending}\n            className=\"w-full bg-primary hover:bg-primary/80 text-primary-foreground py-3 rounded-lg font-medium neon-glow transition-all\"\n            data-testid=\"tax-calculate\"\n          >\n            <i className=\"fas fa-calculator mr-2\"></i>\n            {calculateMutation.isPending ? 'Calculating...' : 'Calculate Tax Liability'}\n          </Button>\n        </div>\n\n        {/* Results Panel */}\n        <div className=\"space-y-6\">\n          {/* Tax Summary */}\n          <Card className=\"glass-panel rounded-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-foreground\">Tax Summary</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {result ? (\n                <div className=\"space-y-4\">\n                  {/* Key Metrics */}\n                  <div className=\"text-center p-4 glass-panel rounded-lg neon-glow\">\n                    <div className=\"text-2xl font-bold text-foreground\">{formatPrice(result.capitalGains)}</div>\n                    <div className=\"text-sm text-muted-foreground mt-1\">Total Capital Gains</div>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    <div className=\"text-center p-3 glass-panel rounded-lg\">\n                      <div className=\"text-lg font-bold text-red-400\">{formatPrice(result.taxOwed)}</div>\n                      <div className=\"text-xs text-muted-foreground\">Tax Owed</div>\n                    </div>\n                    <div className=\"text-center p-3 glass-panel rounded-lg\">\n                      <div className=\"text-lg font-bold text-green-400\">{formatPrice(result.netProfit)}</div>\n                      <div className=\"text-xs text-muted-foreground\">Net Profit</div>\n                    </div>\n                  </div>\n\n                  {/* Detailed Breakdown */}\n                  <div className=\"space-y-3 text-sm\">\n                    <div className=\"flex justify-between py-2 border-b border-border\">\n                      <span className=\"text-muted-foreground\">Purchase Price:</span>\n                      <span className=\"text-foreground\">{formatPrice(result.totalCost)}</span>\n                    </div>\n                    <div className=\"flex justify-between py-2 border-b border-border\">\n                      <span className=\"text-muted-foreground\">Sale Price:</span>\n                      <span className=\"text-foreground\">{formatPrice(result.totalSale)}</span>\n                    </div>\n                    <div className=\"flex justify-between py-2 border-b border-border\">\n                      <span className=\"text-muted-foreground\">Transaction Fees:</span>\n                      <span className=\"text-red-400\">-{formatPrice(result.fees)}</span>\n                    </div>\n                    <div className=\"flex justify-between py-2 border-b border-border\">\n                      <span className=\"text-muted-foreground\">Holding Period:</span>\n                      <span className={`${result.isLongTerm ? 'text-primary' : 'text-accent'}`}>\n                        {result.holdingDays} days ({result.isLongTerm ? 'Long-term' : 'Short-term'})\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between py-2 border-b border-border\">\n                      <span className=\"text-muted-foreground\">Tax Rate:</span>\n                      <span className=\"text-foreground\">{result.taxRate}%</span>\n                    </div>\n                    <div className=\"flex justify-between py-2 font-medium\">\n                      <span className=\"text-foreground\">After-Tax Profit:</span>\n                      <span className=\"text-green-400\">{formatPrice(result.netProfit)}</span>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <i className=\"fas fa-percentage text-4xl text-muted-foreground mb-4\"></i>\n                  <p className=\"text-muted-foreground\">\n                    Enter transaction details to calculate tax liability\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Scenario Comparison */}\n          {result && (\n            <Card className=\"glass-panel rounded-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-lg font-semibold text-foreground\">Scenario Comparison</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"p-4 glass-panel rounded-lg\">\n                  <h4 className=\"font-medium text-foreground mb-2\">Current Scenario ({result.scenarios.current.type})</h4>\n                  <div className=\"text-sm space-y-1\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Net Profit:</span>\n                      <span className=\"text-green-400\">{formatPrice(result.scenarios.current.netProfit)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Tax Rate:</span>\n                      <span className=\"text-foreground\">{result.scenarios.current.taxRate}%</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-4 glass-panel rounded-lg opacity-75\">\n                  <h4 className=\"font-medium text-foreground mb-2\">If Short-term ({result.scenarios.shortTerm.type})</h4>\n                  <div className=\"text-sm space-y-1\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Net Profit:</span>\n                      <span className=\"text-red-400\">{formatPrice(result.scenarios.shortTerm.netProfit)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Tax Rate:</span>\n                      <span className=\"text-foreground\">{result.scenarios.shortTerm.taxRate}%</span>\n                    </div>\n                  </div>\n                  {result.scenarios.savings > 0 && (\n                    <div className=\"mt-2 text-xs text-green-400\">\n                      Saved {formatPrice(result.scenarios.savings)} by holding long-term\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Quick Actions */}\n          <Card className=\"glass-panel rounded-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-foreground\">Actions</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <button className=\"w-full text-left p-3 glass-panel rounded-lg hover:bg-accent/10 transition-all\">\n                <i className=\"fas fa-download mr-2 text-primary\"></i>\n                <span className=\"text-sm\">Export Tax Report</span>\n              </button>\n              <button className=\"w-full text-left p-3 glass-panel rounded-lg hover:bg-accent/10 transition-all\">\n                <i className=\"fas fa-save mr-2 text-primary\"></i>\n                <span className=\"text-sm\">Save Calculation</span>\n              </button>\n              <button \n                onClick={() => {\n                  const shareUrl = `${window.location.origin}${window.location.pathname}#tax-results`;\n                  navigator.clipboard.writeText(shareUrl).then(() => {\n                    toast({\n                      title: 'Link Copied!',\n                      description: 'Tax calculation results link has been copied to your clipboard.',\n                    });\n                  }).catch(() => {\n                    toast({\n                      title: 'Share Results',\n                      description: 'Copy this link to share your results: ' + shareUrl,\n                      variant: 'default',\n                    });\n                  });\n                }}\n                className=\"w-full text-left p-3 glass-panel rounded-lg hover:bg-accent/10 transition-all\"\n                data-testid=\"tax-share-results\"\n              >\n                <i className=\"fas fa-share mr-2 text-primary\"></i>\n                <span className=\"text-sm\">Share Results</span>\n              </button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Tax Tool Features */}\n      <div className=\"glass-panel rounded-xl p-6 border border-primary/30\">\n        <div className=\"space-y-3\">\n          <h3 className=\"font-semibold text-primary flex items-center\">\n            <i className=\"fas fa-check-circle mr-2\"></i>\n            Advanced Tax Analysis\n          </h3>\n          <div className=\"text-sm text-muted-foreground space-y-2\">\n            <p><strong>Comprehensive tax calculations with real-time data integration.</strong></p>\n            <p>Our advanced algorithms analyze multiple tax scenarios to help you optimize your financial strategy. \n               Results are based on current tax brackets and include sophisticated modeling for various income types.</p>\n            <p><strong>Features include:</strong> Multi-jurisdiction support, real-time rate updates, and detailed breakdown analysis \n               for informed financial planning.</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":23821},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-all duration-300 ease-in-out focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 hover:scale-105 hover:shadow-lg\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-gradient-to-r from-primary to-accent text-primary-foreground hover:from-primary/90 hover:to-accent/90 neon-glow shadow-lg\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90 shadow-lg\",\n        outline:\n          \"border border-primary/30 bg-background/80 hover:bg-accent hover:text-accent-foreground hover:border-accent glass-panel\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80 glass-panel\",\n        ghost: \"glass-panel hover:bg-accent/10 hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline hover:text-accent\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2120},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-primary/20 bg-background/50 px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground hover:border-primary/40 focus:outline-none focus:ring-2 focus:ring-primary/30 focus:border-primary/50 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 transition-all backdrop-blur-sm\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border border-primary/20 bg-background/95 backdrop-blur-md text-foreground shadow-2xl shadow-primary/10 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none hover:bg-primary/20 focus:bg-primary/30 focus:text-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-all\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5900},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# FinChat - AI-Powered Financial Hub\n\n## Overview\n\nFinChat is a production-grade financial hub that provides AI-powered chat assistance, real-time market data, interactive charts, news feeds, and financial calculators. Built with a modern TypeScript stack, it offers a comprehensive suite of tools for cryptocurrency and stock market analysis with real-time data streaming and a glassmorphism UI design.\n\nThe application integrates multiple free-first data providers with intelligent failover mechanisms, ensuring reliable access to market data even when individual providers experience issues. It features an OpenAI-powered chat assistant specifically trained for financial guidance, real-time market dashboards, TradingView-style charts, and specialized calculators for ROI, P/L, compound interest, and tax calculations.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n**Frontend Architecture**\n- React with TypeScript using Vite for build tooling\n- shadcn/ui components with Tailwind CSS for styling\n- React Router (wouter) for client-side navigation\n- TanStack Query for server state management and caching\n- Custom hooks for SSE connections, theme management, and mobile detection\n- Glassmorphism design with light/dark theme support\n\n**Backend Architecture**\n- Express.js server with TypeScript\n- WebSocket server for real-time data streaming\n- Server-Sent Events (SSE) for live market updates\n- Modular service architecture with dependency injection pattern\n- Circuit breaker pattern for external API resilience\n- In-memory LRU caching with configurable TTLs\n\n**Data Provider System**\n- Multi-provider architecture with automatic failover\n- Crypto providers: Binance API, CoinGecko (fallback)\n- Stock providers: IEX Cloud, Alpha Vantage (fallback)\n- News providers: RSS aggregation from multiple financial sources\n- Unified data format across all providers with normalization layer\n\n**Database Architecture**\n- Drizzle ORM with PostgreSQL for persistent storage\n- Hybrid storage approach: in-memory for active data, PostgreSQL for persistence\n- Schema supports users, market data caching, news articles, chat conversations, and watchlists\n- Fallback to cached database data when live providers fail\n\n**Real-time Data Flow**\n- WebSocket connections for bi-directional market data streaming\n- SSE endpoints for unidirectional live updates to frontend\n- Automatic reconnection logic with exponential backoff\n- Rate limiting and connection throttling\n\n**AI Chat System**\n- OpenAI GPT integration with financial domain specialization\n- Context-aware conversations with market data integration\n- Conversation persistence and retrieval\n- Financial disclaimer enforcement in all responses\n\n## External Dependencies\n\n**Market Data APIs**\n- Binance API for cryptocurrency real-time and snapshot data\n- IEX Cloud for stock market data (requires API key)\n- CoinGecko API as crypto fallback provider\n- Alpha Vantage as stock fallback provider\n\n**AI Services**\n- OpenAI API for GPT-powered financial chat assistant (requires API key)\n- Custom financial prompt engineering for domain-specific responses\n\n**Database Services**\n- PostgreSQL via Neon Database for persistent storage\n- Connection managed through Drizzle ORM with connection pooling\n\n**News Sources**\n- RSS feeds from major financial news outlets\n- CoinDesk, CryptoNews, MarketWatch, and other financial RSS sources\n- XML parsing with fallback mechanisms for different RSS formats\n\n**Development Tools**\n- TradingView Lightweight Charts for market visualization\n- Font Awesome for comprehensive icon library\n- Google Fonts for typography (Inter, JetBrains Mono)\n\n**Infrastructure**\n- Replit hosting platform with always-on server capability\n- Environment variable management through Replit Secrets\n- Vite development server with HMR and Replit-specific plugins\n\n**Third-party Libraries**\n- Radix UI primitives for accessible component foundations\n- React Hook Form with Zod validation for form management\n- Date-fns for date manipulation and formatting\n- WebSocket libraries for real-time communication\n- LRU cache implementation for memory management","size_bytes":4162},"client/src/components/markets/market-overview.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\n\ninterface MarketData {\n  symbol: string;\n  name: string;\n  price: number;\n  change24h: number;\n  changePercent24h: number;\n}\n\n\ninterface MarketOverviewProps {\n  onNavigateToCharts?: () => void;\n}\n\nexport default function MarketOverview({ onNavigateToCharts }: MarketOverviewProps) {\n  const { data: marketData = [], isLoading: loadingMarkets } = useQuery<MarketData[]>({\n    queryKey: ['/api/markets/snapshot'],\n    refetchInterval: 30000,\n  });\n\n\n  // Get up to 4 coins for display - prioritize preferred symbols but show whatever is available\n  const preferredSymbols = ['BTC', 'ETH', 'AAPL', 'SPY'];\n  const preferredCoins = marketData.filter(asset => \n    preferredSymbols.includes(asset.symbol)\n  );\n  const otherCoins = marketData.filter(asset => \n    !preferredSymbols.includes(asset.symbol) && asset.price != null\n  );\n  \n  // Combine preferred + other coins, up to 4 total\n  const displayCoins = [...preferredCoins, ...otherCoins].slice(0, 4);\n\n  const formatPrice = (price: number | null | undefined, symbol: string) => {\n    if (price === null || price === undefined || isNaN(price)) {\n      return 'N/A';\n    }\n    if (['BTC', 'ETH'].includes(symbol)) {\n      return price >= 1000 ? `$${(price / 1000).toFixed(1)}K` : `$${price.toFixed(2)}`;\n    }\n    return `$${price.toFixed(2)}`;\n  };\n\n  const formatChange = (change: number | undefined) => {\n    if (change === undefined || change === null) return 'N/A';\n    const sign = change >= 0 ? '+' : '';\n    return `${sign}${change.toFixed(2)}%`;\n  };\n\n  // Generate simple sparkline SVG\n  const generateSparkline = (change?: number) => {\n    const isPositive = (change || 0) >= 0;\n    const points = isPositive \n      ? \"0,20 5,15 10,10 15,5 20,0\" \n      : \"0,0 5,5 10,10 15,15 20,20\";\n    \n    return (\n      <svg width=\"40\" height=\"20\" className=\"inline-block\">\n        <polyline\n          points={points}\n          fill=\"none\"\n          stroke={isPositive ? \"#10b981\" : \"#ef4444\"}\n          strokeWidth=\"2\"\n          className=\"animate-pulse\"\n        />\n      </svg>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Market Overview */}\n      <Card className=\"glass-panel border-primary/20 shadow-lg\">\n        <CardHeader className=\"pb-3 px-3 sm:px-6\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center text-base sm:text-lg\">\n              <i className=\"fas fa-chart-line text-primary mr-2 text-sm sm:text-base\"></i>\n              Market Overview\n            </CardTitle>\n            <div className=\"flex items-center space-x-1\">\n              <div className=\"w-1.5 h-1.5 sm:w-2 sm:h-2 bg-green-400 rounded-full animate-pulse\"></div>\n              <span className=\"text-xs text-green-400\">Live</span>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-3 px-3 sm:px-6\">\n          {displayCoins.length > 0 ? (\n            <div className=\"grid grid-cols-1 gap-3\">\n              {displayCoins.map((asset) => (\n                <div key={asset.symbol} className=\"glass-panel p-2.5 sm:p-3 rounded-lg border border-primary/20 hover:border-primary/40 transition-all\"\n                     data-testid={`market-card-${asset.symbol}`}>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2 sm:space-x-3\">\n                      <div className={`w-8 h-8 sm:w-10 sm:h-10 rounded-full flex items-center justify-center text-xs sm:text-sm font-bold text-white ${\n                        ['BTC', 'ETH'].includes(asset.symbol) \n                          ? 'bg-gradient-to-r from-orange-500 to-yellow-500'\n                          : 'bg-gradient-to-r from-blue-500 to-purple-500'\n                      }`}>\n                        {asset.symbol === 'BTC' ? '₿' : asset.symbol === 'ETH' ? 'Ξ' : (asset.symbol || '').charAt(0)}\n                      </div>\n                      <div>\n                        <div className=\"font-semibold text-foreground text-sm sm:text-base\">{asset.symbol}</div>\n                        <div className=\"text-xs sm:text-sm font-medium text-primary\">{formatPrice(asset.price, asset.symbol)}</div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2 sm:space-x-3\">\n                      <div className=\"hidden sm:block\">\n                        {generateSparkline(asset.changePercent24h || asset.change24h)}\n                      </div>\n                      <div className=\"text-right\">\n                        <div className={`text-xs sm:text-sm font-semibold ${\n                          (asset.changePercent24h || asset.change24h || 0) >= 0 ? 'text-green-400' : 'text-red-400'\n                        }`}>\n                          {formatChange(asset.changePercent24h || asset.change24h)}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : loadingMarkets ? (\n            <div className=\"text-center py-8\">\n              <div className=\"inline-flex items-center text-sm text-muted-foreground\">\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                Loading market data...\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <div className=\"text-sm text-muted-foreground\">\n                <i className=\"fas fa-exclamation-triangle text-yellow-500 mr-2\"></i>\n                Market data temporarily unavailable\n              </div>\n              <div className=\"text-xs text-muted-foreground mt-1\">\n                Data providers experiencing issues\n              </div>\n            </div>\n          )}\n\n          {/* See More Button */}\n          <div className=\"mt-4 sm:mt-6 flex justify-center\">\n            <Button\n              onClick={onNavigateToCharts}\n              className=\"bg-gradient-to-r from-primary to-accent text-black px-6 sm:px-8 py-2.5 sm:py-3 rounded-lg font-semibold w-full sm:w-auto\"\n              data-testid=\"see-more-button\"\n            >\n              <i className=\"fas fa-chart-area mr-2 text-sm sm:text-base\"></i>\n              See More\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n}","size_bytes":6520},"README.md":{"content":"# FinChat - AI-Powered Financial Hub\n\nFinChat is a modern financial trading application that provides real-time market data, AI-powered chat assistance, interactive charts, and financial calculators. Built with a sleek glassmorphism design, it offers a comprehensive suite of tools for cryptocurrency and stock market analysis.\n\n## ✨ Features\n\n- **AI Chat Assistant**: Powered by OpenRouter's DeepSeek Chat v3.1 for intelligent financial guidance\n- **Real-time Market Data**: Live cryptocurrency and stock prices with automatic updates\n- **Interactive Charts**: TradingView-style charts with technical analysis\n- **Financial Calculators**: ROI, P/L, compound interest, and tax calculations\n- **News Feed**: Aggregated financial news from multiple sources\n- **Glassmorphism UI**: Modern, responsive design with light/dark theme support\n- **Real-time Streaming**: WebSocket and SSE connections for live data\n\n## 🚀 Quick Start\n\n### 1. Prerequisites\n\n- Node.js 18+ installed\n- OpenRouter API key (free tier available)\n\n### 2. Installation\n\n```bash\n# Clone the repository\ngit clone <repository-url>\ncd finchat\n\n# Install dependencies\nnpm install\n```\n\n### 3. Configuration\n\n#### For Development (Local .env file):\n```bash\n# Copy the example environment file\ncp .env.example .env\n\n# Edit .env and add your OpenRouter API key\nOPENROUTER_API_KEY=your_openrouter_key_here\n```\n\n#### For Replit (Recommended):\n1. Open the **Secrets** tab in your Replit workspace\n2. Add a new secret:\n   - **Key**: `OPENROUTER_API_KEY`\n   - **Value**: Your OpenRouter API key from https://openrouter.ai/keys\n\n### 4. Get Your OpenRouter API Key\n\n1. Visit [OpenRouter](https://openrouter.ai/keys)\n2. Sign up for a free account\n3. Generate a new API key\n4. Copy the key and add it to your environment variables\n\n### 5. Run the Application\n\n```bash\nnpm run dev\n```\n\nThe application will be available at `http://localhost:5000`\n\n## 🤖 AI Chat Assistant\n\nFinChat now uses **OpenRouter** with the **DeepSeek Chat v3.1** model, providing:\n\n- **Free tier available**: Get started without costs\n- **High-quality responses**: Advanced financial knowledge and analysis\n- **Streaming responses**: Real-time chat experience\n- **Financial expertise**: Specialized in crypto, stocks, and market analysis\n\n### Chat Features:\n- Cryptocurrency and stock analysis\n- Market trend insights\n- Investment strategy guidance\n- Tax calculation assistance\n- Portfolio optimization advice\n- Risk assessment and management\n\n## 📊 Market Data\n\n### Cryptocurrency Data\n- **Primary**: Binance API (WebSocket for real-time)\n- **Fallback**: CoinGecko, CoinPaprika\n- **No API keys required** - works with free tiers\n\n### Stock Market Data\n- **Primary**: IEX Cloud (requires API key for real-time)\n- **Fallback**: Alpha Vantage, Yahoo Finance\n- **Free tier**: Limited delayed data available\n\n### News Sources\n- Financial RSS feeds from major outlets\n- Real-time aggregation\n- No API keys required\n\n## 🔧 Optional API Keys\n\nWhile FinChat works with minimal configuration, you can enhance functionality with these optional API keys:\n\n```env\n# Stock Data Enhancement\nIEX_CLOUD_TOKEN=your_iex_token_here\nALPHA_VANTAGE_API_KEY=your_alpha_vantage_key_here\n\n# Additional providers (optional)\nFINNHUB_KEY=your_finnhub_key_here\nTWELVEDATA_KEY=your_twelve_data_key_here\n```\n\n## 🛠️ Technology Stack\n\n- **Frontend**: React, TypeScript, Tailwind CSS, shadcn/ui\n- **Backend**: Express.js, Node.js\n- **Database**: PostgreSQL with Drizzle ORM\n- **Real-time**: WebSocket, Server-Sent Events\n- **AI**: OpenRouter API with DeepSeek Chat v3.1\n- **Charts**: TradingView Lightweight Charts\n- **Deployment**: Replit (recommended)\n\n## 📁 Project Structure\n\n```\nfinchat/\n├── client/                 # React frontend\n│   ├── src/\n│   │   ├── components/     # Reusable UI components\n│   │   ├── pages/          # Application pages\n│   │   ├── hooks/          # Custom React hooks\n│   │   └── lib/            # Utilities and configurations\n├── server/                 # Express.js backend\n│   ├── services/           # Business logic\n│   ├── providers/          # Data provider implementations\n│   └── routes.ts           # API routes\n├── shared/                 # Shared types and schemas\n└── .env.example           # Environment variables template\n```\n\n## 🚀 Deployment\n\n### Replit (Recommended)\n\n1. Fork this repository to Replit\n2. Add your `OPENROUTER_API_KEY` to Replit Secrets\n3. Run the application using the \"Run\" button\n4. Your app will be live at `https://your-repl-name.replit.app`\n\n### Manual Deployment\n\n```bash\n# Build the application\nnpm run build\n\n# Start production server\nnpm start\n```\n\n## 🔒 Environment Variables\n\n### Required:\n- `OPENROUTER_API_KEY`: Your OpenRouter API key for chat functionality\n\n### Optional:\n- `IEX_CLOUD_TOKEN`: Enhanced stock market data\n- `ALPHA_VANTAGE_API_KEY`: Additional stock data provider\n- `PORT`: Server port (default: 5000)\n- `NODE_ENV`: Environment mode (development/production)\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch: `git checkout -b feature/new-feature`\n3. Commit your changes: `git commit -am 'Add new feature'`\n4. Push to the branch: `git push origin feature/new-feature`\n5. Submit a pull request\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## 🆘 Support\n\nIf you encounter any issues:\n\n1. Check that your `OPENROUTER_API_KEY` is correctly set\n2. Verify your internet connection for real-time data\n3. Review the console logs for specific error messages\n4. Ensure you're using Node.js 18 or higher\n\n## 🔄 Updates\n\nFinChat is actively maintained with regular updates for:\n- New market data providers\n- Enhanced AI capabilities\n- Additional financial tools\n- UI/UX improvements\n\n---\n\n**Note**: This application provides educational information only and should not be considered as financial advice. Always consult with qualified financial advisors for investment decisions.","size_bytes":6051},"server/utils/providerOptimizer.ts":{"content":"interface ProviderMetrics {\n  successRate: number;\n  averageResponseTime: number;\n  recentFailures: number;\n  totalRequests: number;\n  lastSuccessTime: number;\n  consecutiveFailures: number;\n}\n\ninterface ProviderPerformance {\n  id: string;\n  metrics: ProviderMetrics;\n  priority: number;\n  dynamicPriority: number;\n}\n\nexport class ProviderOptimizer {\n  private performanceMetrics = new Map<string, ProviderMetrics>();\n  private requestHistory = new Map<string, number[]>(); // Response times for last 10 requests\n  \n  constructor() {\n    // Clean up old metrics every 5 minutes\n    setInterval(() => this.cleanupMetrics(), 5 * 60 * 1000);\n  }\n  \n  async recordProviderRequest<T>(\n    providerId: string, \n    operation: () => Promise<T>\n  ): Promise<T> {\n    const startTime = Date.now();\n    let metrics = this.getMetrics(providerId);\n    \n    try {\n      const result = await operation();\n      const responseTime = Date.now() - startTime;\n      \n      // Record successful request\n      metrics.totalRequests++;\n      metrics.lastSuccessTime = Date.now();\n      metrics.consecutiveFailures = 0;\n      \n      // Update response time tracking\n      this.updateResponseTime(providerId, responseTime);\n      \n      // Recalculate success rate\n      metrics.successRate = this.calculateSuccessRate(providerId);\n      metrics.averageResponseTime = this.calculateAverageResponseTime(providerId);\n      \n      this.performanceMetrics.set(providerId, metrics);\n      return result;\n      \n    } catch (error) {\n      const responseTime = Date.now() - startTime;\n      \n      // Record failed request\n      metrics.totalRequests++;\n      metrics.recentFailures++;\n      metrics.consecutiveFailures++;\n      \n      this.updateResponseTime(providerId, responseTime);\n      metrics.successRate = this.calculateSuccessRate(providerId);\n      metrics.averageResponseTime = this.calculateAverageResponseTime(providerId);\n      \n      this.performanceMetrics.set(providerId, metrics);\n      throw error;\n    }\n  }\n  \n  optimizeProviderOrder<T extends { id: string; priority: number }>(providers: T[]): T[] {\n    // Calculate dynamic priorities but keep original provider instances\n    const providerPriorities = new Map<string, number>();\n    \n    providers.forEach(provider => {\n      const metrics = this.getMetrics(provider.id);\n      const dynamicPriority = this.calculateDynamicPriority(provider, metrics);\n      providerPriorities.set(provider.id, dynamicPriority);\n    });\n    \n    // Sort original providers by dynamic priority (lower is better)\n    return [...providers].sort((a, b) => {\n      const priorityA = providerPriorities.get(a.id) || a.priority;\n      const priorityB = providerPriorities.get(b.id) || b.priority;\n      return priorityA - priorityB;\n    });\n  }\n  \n  shouldSkipProvider(providerId: string): boolean {\n    const metrics = this.getMetrics(providerId);\n    \n    // Don't skip if we don't have enough data yet\n    if (metrics.totalRequests < 5) {\n      return false;\n    }\n    \n    // Skip if too many consecutive failures (increased threshold)\n    if (metrics.consecutiveFailures >= 10) {\n      return true;\n    }\n    \n    // Skip if success rate is extremely low and we have significant data\n    if (metrics.totalRequests > 20 && metrics.successRate < 0.1) {\n      return true;\n    }\n    \n    // Skip if average response time is extremely high (over 30 seconds)\n    if (metrics.averageResponseTime > 30000 && metrics.totalRequests > 10) {\n      return true;\n    }\n    \n    return false;\n  }\n  \n  getProviderRecommendations(): { fast: string[], reliable: string[], avoid: string[] } {\n    const allMetrics = Array.from(this.performanceMetrics.entries());\n    \n    const fast = allMetrics\n      .filter(([_, metrics]) => metrics.averageResponseTime < 2000 && metrics.totalRequests > 3)\n      .sort((a, b) => a[1].averageResponseTime - b[1].averageResponseTime)\n      .slice(0, 3)\n      .map(([id]) => id);\n    \n    const reliable = allMetrics\n      .filter(([_, metrics]) => metrics.successRate > 0.8 && metrics.totalRequests > 5)\n      .sort((a, b) => b[1].successRate - a[1].successRate)\n      .slice(0, 3)\n      .map(([id]) => id);\n    \n    const avoid = allMetrics\n      .filter(([_, metrics]) => metrics.successRate < 0.3 && metrics.totalRequests > 5)\n      .map(([id]) => id);\n    \n    return { fast, reliable, avoid };\n  }\n  \n  private getMetrics(providerId: string): ProviderMetrics {\n    if (!this.performanceMetrics.has(providerId)) {\n      this.performanceMetrics.set(providerId, {\n        successRate: 1.0,\n        averageResponseTime: 0,\n        recentFailures: 0,\n        totalRequests: 0,\n        lastSuccessTime: Date.now(),\n        consecutiveFailures: 0\n      });\n    }\n    return this.performanceMetrics.get(providerId)!;\n  }\n  \n  private updateResponseTime(providerId: string, responseTime: number): void {\n    if (!this.requestHistory.has(providerId)) {\n      this.requestHistory.set(providerId, []);\n    }\n    \n    const history = this.requestHistory.get(providerId)!;\n    history.push(responseTime);\n    \n    // Keep only last 10 requests\n    if (history.length > 10) {\n      history.shift();\n    }\n  }\n  \n  private calculateSuccessRate(providerId: string): number {\n    const metrics = this.getMetrics(providerId);\n    if (metrics.totalRequests === 0) return 1.0;\n    \n    const successfulRequests = metrics.totalRequests - metrics.recentFailures;\n    return successfulRequests / metrics.totalRequests;\n  }\n  \n  private calculateAverageResponseTime(providerId: string): number {\n    const history = this.requestHistory.get(providerId) || [];\n    if (history.length === 0) return 0;\n    \n    return history.reduce((sum, time) => sum + time, 0) / history.length;\n  }\n  \n  private calculateDynamicPriority(\n    provider: { id: string; priority: number }, \n    metrics: ProviderMetrics\n  ): number {\n    let dynamicPriority = provider.priority;\n    \n    // Bonus for high success rate\n    dynamicPriority -= (metrics.successRate - 0.5) * 2;\n    \n    // Bonus for fast response times (under 1 second)\n    if (metrics.averageResponseTime < 1000) {\n      dynamicPriority -= 1;\n    }\n    \n    // Penalty for slow response times\n    if (metrics.averageResponseTime > 5000) {\n      dynamicPriority += 2;\n    }\n    \n    // Penalty for recent failures\n    dynamicPriority += metrics.consecutiveFailures * 0.5;\n    \n    // Bonus for recent activity\n    const timeSinceLastSuccess = Date.now() - metrics.lastSuccessTime;\n    if (timeSinceLastSuccess < 60000) { // Less than 1 minute\n      dynamicPriority -= 0.5;\n    }\n    \n    return Math.max(0, dynamicPriority);\n  }\n  \n  private cleanupMetrics(): void {\n    const now = Date.now();\n    const fiveMinutesAgo = now - 5 * 60 * 1000;\n    \n    for (const [providerId, metrics] of Array.from(this.performanceMetrics.entries())) {\n      // Reset failure count if it's been a while\n      if (metrics.lastSuccessTime < fiveMinutesAgo) {\n        metrics.recentFailures = Math.max(0, metrics.recentFailures - 1);\n      }\n      \n      // Clean up providers with no recent activity\n      if (metrics.lastSuccessTime < now - 30 * 60 * 1000) { // 30 minutes\n        this.performanceMetrics.delete(providerId);\n        this.requestHistory.delete(providerId);\n      }\n    }\n  }\n  \n  getProviderStats() {\n    return Array.from(this.performanceMetrics.entries()).map(([id, metrics]) => ({\n      id,\n      ...metrics,\n      responseTimeHistory: this.requestHistory.get(id) || []\n    }));\n  }\n\n  // Public API for accessing metrics (replaces private method access)\n  getProviderMetrics(providerId: string): ProviderMetrics {\n    return this.getMetrics(providerId);\n  }\n\n  // Public API for calculating dynamic priority\n  getProviderDynamicPriority(provider: { id: string; priority: number }): number {\n    const metrics = this.getMetrics(provider.id);\n    return this.calculateDynamicPriority(provider, metrics);\n  }\n}\n\nexport const cryptoProviderOptimizer = new ProviderOptimizer();\nexport const stockProviderOptimizer = new ProviderOptimizer();","size_bytes":8005}},"version":1}